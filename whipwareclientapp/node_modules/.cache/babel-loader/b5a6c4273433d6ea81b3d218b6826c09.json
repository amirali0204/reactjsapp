{"ast":null,"code":"\"use strict\";\n\nvar __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) {\n        if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n      }\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar uuid_1 = require(\"uuid\");\n\nvar rotate_1 = require(\"./utils/rotate\");\n/**\n * This file contains actions for updating state after each of the required callbacks\n */\n\n\nexports.onDragNode = function (_a) {\n  var config = _a.config,\n      event = _a.event,\n      data = _a.data,\n      id = _a.id;\n  return function (chart) {\n    var nodechart = chart.nodes[id];\n\n    if (nodechart) {\n      chart.nodes[id] = __assign({}, nodechart, {\n        position: config && config.snapToGrid ? {\n          x: Math.round(data.x / 20) * 20,\n          y: Math.round(data.y / 20) * 20\n        } : {\n          x: data.x,\n          y: data.y\n        }\n      });\n    }\n\n    return chart;\n  };\n};\n\nexports.onDragCanvas = function (_a) {\n  var config = _a.config,\n      event = _a.event,\n      data = _a.data;\n  return function (chart) {\n    chart.offset = config && config.snapToGrid ? {\n      x: Math.round(data.x / 20) * 20,\n      y: Math.round(data.y / 20) * 20\n    } : {\n      x: data.x,\n      y: data.y\n    };\n    return chart;\n  };\n};\n\nexports.onLinkStart = function (_a) {\n  var linkId = _a.linkId,\n      fromNodeId = _a.fromNodeId,\n      fromPortId = _a.fromPortId;\n  return function (chart) {\n    chart.links[linkId] = {\n      id: linkId,\n      from: {\n        nodeId: fromNodeId,\n        portId: fromPortId\n      },\n      to: {}\n    };\n    return chart;\n  };\n};\n\nexports.onLinkMove = function (_a) {\n  var linkId = _a.linkId,\n      toPosition = _a.toPosition;\n  return function (chart) {\n    var link = chart.links[linkId];\n    link.to.position = toPosition;\n    chart.links[linkId] = __assign({}, link);\n    return chart;\n  };\n};\n\nexports.onLinkComplete = function (props) {\n  var linkId = props.linkId,\n      fromNodeId = props.fromNodeId,\n      fromPortId = props.fromPortId,\n      toNodeId = props.toNodeId,\n      toPortId = props.toPortId,\n      _a = props.config,\n      config = _a === void 0 ? {} : _a;\n  return function (chart) {\n    if (!config.readonly && (config.validateLink ? config.validateLink(__assign({}, props, {\n      chart: chart\n    })) : true) && [fromNodeId, fromPortId].join() !== [toNodeId, toPortId].join()) {\n      chart.links[linkId].to = {\n        nodeId: toNodeId,\n        portId: toPortId\n      };\n    } else {\n      delete chart.links[linkId];\n    }\n\n    return chart;\n  };\n};\n\nexports.onLinkCancel = function (_a) {\n  var linkId = _a.linkId;\n  return function (chart) {\n    delete chart.links[linkId];\n    return chart;\n  };\n};\n\nexports.onLinkMouseEnter = function (_a) {\n  var linkId = _a.linkId;\n  return function (chart) {\n    // Set the link to hover\n    var link = chart.links[linkId]; // Set the connected ports to hover\n\n    if (link.to.nodeId && link.to.portId) {\n      if (chart.hovered.type !== 'link' || chart.hovered.id !== linkId) {\n        chart.hovered = {\n          type: 'link',\n          id: linkId\n        };\n      }\n    }\n\n    return chart;\n  };\n};\n\nexports.onLinkMouseLeave = function (_a) {\n  var linkId = _a.linkId;\n  return function (chart) {\n    var link = chart.links[linkId]; // Set the connected ports to hover\n\n    if (link.to.nodeId && link.to.portId) {\n      chart.hovered = {};\n    }\n\n    return chart;\n  };\n};\n\nexports.onLinkClick = function (_a) {\n  var linkId = _a.linkId;\n  return function (chart) {\n    if (chart.selected.id !== linkId || chart.selected.type !== 'link') {\n      chart.selected = {\n        type: 'link',\n        id: linkId\n      };\n    }\n\n    return chart;\n  };\n};\n\nexports.onCanvasClick = function () {\n  return function (chart) {\n    if (chart.selected.id) {\n      chart.selected = {};\n    }\n\n    return chart;\n  };\n};\n\nexports.onDeleteKey = function () {\n  return function (chart) {\n    if (chart.selected.type === 'node' && chart.selected.id) {\n      var node_1 = chart.nodes[chart.selected.id]; // Delete the connected links\n\n      Object.keys(chart.links).forEach(function (linkId) {\n        var link = chart.links[linkId];\n\n        if (link.from.nodeId === node_1.id || link.to.nodeId === node_1.id) {\n          delete chart.links[link.id];\n        }\n      }); // Delete the node\n\n      delete chart.nodes[chart.selected.id];\n    } else if (chart.selected.type === 'link' && chart.selected.id) {\n      delete chart.links[chart.selected.id];\n    }\n\n    if (chart.selected) {\n      chart.selected = {};\n    }\n\n    return chart;\n  };\n};\n\nexports.onNodeClick = function (_a) {\n  var nodeId = _a.nodeId;\n  return function (chart) {\n    if (chart.selected.id !== nodeId || chart.selected.type !== 'node') {\n      chart.selected = {\n        type: 'node',\n        id: nodeId\n      };\n    }\n\n    return chart;\n  };\n};\n\nexports.onNodeSizeChange = function (_a) {\n  var nodeId = _a.nodeId,\n      size = _a.size;\n  return function (chart) {\n    chart.nodes[nodeId] = __assign({}, chart.nodes[nodeId], {\n      size: size\n    });\n    return chart;\n  };\n};\n\nexports.onPortPositionChange = function (_a) {\n  var nodeToUpdate = _a.node,\n      port = _a.port,\n      el = _a.el,\n      nodesEl = _a.nodesEl;\n  return function (chart) {\n    if (nodeToUpdate.size) {\n      // rotate the port's position based on the node's orientation prop (angle)\n      var center = {\n        x: nodeToUpdate.size.width / 2,\n        y: nodeToUpdate.size.height / 2\n      };\n      var current = {\n        x: el.offsetLeft + nodesEl.offsetLeft + el.offsetWidth / 2,\n        y: el.offsetTop + nodesEl.offsetTop + el.offsetHeight / 2\n      };\n      var angle = nodeToUpdate.orientation || 0;\n      var position = rotate_1.rotate(center, current, angle);\n      var node = chart.nodes[nodeToUpdate.id];\n      node.ports[port.id].position = {\n        x: position.x,\n        y: position.y\n      };\n      chart.nodes[nodeToUpdate.id] = __assign({}, node);\n    }\n\n    return chart;\n  };\n};\n\nexports.onCanvasDrop = function (_a) {\n  var config = _a.config,\n      data = _a.data,\n      position = _a.position;\n  return function (chart) {\n    var id = uuid_1.v4();\n    chart.nodes[id] = {\n      id: id,\n      position: config && config.snapToGrid ? {\n        x: Math.round(position.x / 20) * 20,\n        y: Math.round(position.y / 20) * 20\n      } : {\n        x: position.x,\n        y: position.y\n      },\n      orientation: data.orientation || 0,\n      type: data.type,\n      ports: data.ports,\n      properties: data.properties\n    };\n    return chart;\n  };\n};","map":null,"metadata":{},"sourceType":"script"}
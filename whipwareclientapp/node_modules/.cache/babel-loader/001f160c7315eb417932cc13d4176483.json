{"ast":null,"code":"\"use strict\";\n\nvar __extends = this && this.__extends || function () {\n  var _extendStatics = function extendStatics(d, b) {\n    _extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) {\n        if (b.hasOwnProperty(p)) d[p] = b[p];\n      }\n    };\n\n    return _extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    _extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar lodash_1 = require(\"lodash\");\n\nvar React = require(\"react\");\n\nvar ReactDOM = require(\"react-dom\");\n\nvar uuid_1 = require(\"uuid\");\n\nvar CanvasContext_1 = require(\"../Canvas/CanvasContext\");\n\nvar Port_default_1 = require(\"./Port.default\");\n/** Construct the composed path by traversing parentElements */\n\n\nvar composedPath = function composedPath(el) {\n  var path = [];\n\n  while (el) {\n    path.push(el);\n    el = el.parentElement;\n  }\n\n  return path;\n};\n\nvar PortWrapper =\n/** @class */\nfunction (_super) {\n  __extends(PortWrapper, _super);\n\n  function PortWrapper() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n\n    _this.nodeRef = React.createRef();\n\n    _this.onMouseDown = function (startEvent) {\n      var _a = _this.props,\n          offset = _a.offset,\n          node = _a.node,\n          port = _a.port,\n          onLinkStart = _a.onLinkStart,\n          onLinkCancel = _a.onLinkCancel,\n          onLinkComplete = _a.onLinkComplete,\n          onLinkMove = _a.onLinkMove,\n          config = _a.config;\n      var linkId = uuid_1.v4();\n      var fromNodeId = node.id;\n      var fromPortId = port.id; // Create the move handler\n      // This will update the position as the mouse moves\n\n      var mouseMoveHandler = function mouseMoveHandler(e) {\n        var _a = _this.context,\n            offsetX = _a.offsetX,\n            offsetY = _a.offsetY;\n        onLinkMove({\n          config: config,\n          linkId: linkId,\n          startEvent: startEvent,\n          fromNodeId: fromNodeId,\n          fromPortId: fromPortId,\n          toPosition: {\n            x: e.clientX - offsetX - offset.x,\n            y: e.clientY - offsetY - offset.y\n          }\n        });\n      }; // Create and bind the mouse up handler\n      // This is used to check if the link is complete or cancelled\n\n\n      var mouseUpHandler = function mouseUpHandler(e) {\n        // We traverse up the event path until we find an element with 'data-port-id' and data-node-id'\n        // e.toElement cannot be used because it may be a child element of the port\n        var path = composedPath(e.target);\n        var portEl = path.find(function (el) {\n          var toPortId = el.getAttribute && el.getAttribute('data-port-id');\n          var toNodeId = el.getAttribute && el.getAttribute('data-node-id');\n          return !!(toPortId && toNodeId);\n        }); // If both node-id and port-id are defined as data attributes, we are mouse-upping\n        // on another port. Run the success handler\n\n        if (portEl) {\n          var toPortId = portEl.getAttribute('data-port-id');\n          var toNodeId = portEl.getAttribute('data-node-id');\n          onLinkComplete({\n            config: config,\n            linkId: linkId,\n            startEvent: startEvent,\n            fromNodeId: fromNodeId,\n            fromPortId: fromPortId,\n            toNodeId: toNodeId,\n            toPortId: toPortId\n          });\n        } else {\n          onLinkCancel({\n            config: config,\n            linkId: linkId,\n            startEvent: startEvent,\n            fromNodeId: fromNodeId,\n            fromPortId: fromPortId\n          });\n        } // Remove the listeners if the link is complete or canceled\n\n\n        window.removeEventListener('mouseup', mouseUpHandler, false);\n        window.removeEventListener('mousemove', mouseMoveHandler, false);\n      }; // Add listeners\n\n\n      window.addEventListener('mouseup', mouseUpHandler, false);\n      window.addEventListener('mousemove', mouseMoveHandler, false); // Notify state of link start\n\n      onLinkStart({\n        config: config,\n        linkId: linkId,\n        startEvent: startEvent,\n        fromNodeId: fromNodeId,\n        fromPortId: fromPortId\n      }); // Prevent default and stop propagation to prevent text selection\n\n      startEvent.preventDefault();\n      startEvent.stopPropagation();\n    };\n\n    return _this;\n  }\n\n  PortWrapper.prototype.componentDidUpdate = function (prevProps) {\n    // Update port position after a re-render if node.size has changed\n    if (!lodash_1.isEqual(this.props.node.size, prevProps.node.size)) {\n      var el = ReactDOM.findDOMNode(this.nodeRef.current);\n\n      if (el) {\n        // Ports component should be positions absolute\n        // Factor this in so we get position relative to the node\n        var nodesEl = el.parentElement ? el.parentElement : {\n          offsetLeft: 0,\n          offsetTop: 0\n        }; // update port position after node size has been determined\n\n        this.props.onPortPositionChange({\n          config: this.props.config,\n          node: this.props.node,\n          port: this.props.port,\n          el: el,\n          nodesEl: nodesEl\n        });\n      }\n    }\n  };\n\n  PortWrapper.prototype.render = function () {\n    var _a = this.props,\n        selected = _a.selected,\n        selectedLink = _a.selectedLink,\n        hovered = _a.hovered,\n        hoveredLink = _a.hoveredLink,\n        style = _a.style,\n        port = _a.port,\n        node = _a.node,\n        _b = _a.Component,\n        Component = _b === void 0 ? Port_default_1.PortDefault : _b,\n        config = _a.config;\n    return React.createElement(\"div\", {\n      \"data-port-id\": port.id,\n      \"data-node-id\": node.id,\n      onMouseDown: this.onMouseDown,\n      ref: this.nodeRef,\n      style: style\n    }, React.createElement(Component, {\n      config: config,\n      port: port,\n      isSelected: !!selected && selected.type === 'port' && selected.id === port.id,\n      isHovered: !!hovered && hovered.type === 'port' && hovered.id === port.id,\n      isLinkSelected: selectedLink ? selectedLink.from.portId === port.id && selectedLink.from.nodeId === node.id || selectedLink.to.portId === port.id && selectedLink.to.nodeId === node.id : false,\n      isLinkHovered: hoveredLink ? hoveredLink.from.portId === port.id && hoveredLink.from.nodeId === node.id || hoveredLink.to.portId === port.id && hoveredLink.to.nodeId === node.id : false\n    }));\n  };\n\n  PortWrapper.contextType = CanvasContext_1.default;\n  return PortWrapper;\n}(React.Component);\n\nexports.PortWrapper = PortWrapper;","map":null,"metadata":{},"sourceType":"script"}
{"ast":null,"code":"\"use strict\";\n\nvar __extends = this && this.__extends || function () {\n  var _extendStatics = function extendStatics(d, b) {\n    _extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) {\n        if (b.hasOwnProperty(p)) d[p] = b[p];\n      }\n    };\n\n    return _extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    _extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar React = require(\"react\");\n\nvar react_draggable_1 = require(\"react-draggable\");\n\nvar __1 = require(\"../../\");\n\nvar CanvasContext_1 = require(\"./CanvasContext\");\n\nvar CanvasWrapper =\n/** @class */\nfunction (_super) {\n  __extends(CanvasWrapper, _super);\n\n  function CanvasWrapper() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n\n    _this.state = {\n      width: 0,\n      height: 0,\n      offsetX: 0,\n      offsetY: 0\n    };\n    _this.ref = React.createRef();\n\n    _this.updateSize = function () {\n      var el = _this.ref.current;\n\n      if (el) {\n        var rect = el.getBoundingClientRect();\n\n        if (el.offsetWidth !== _this.state.width || el.offsetHeight !== _this.state.height) {\n          _this.setState({\n            width: el.offsetWidth,\n            height: el.offsetHeight\n          });\n\n          _this.props.onSizeChange(el.offsetWidth, el.offsetHeight);\n        }\n\n        if (rect.left !== _this.state.offsetX || rect.top !== _this.state.offsetY) {\n          _this.setState({\n            offsetX: rect.left,\n            offsetY: rect.top\n          });\n        }\n      }\n    };\n\n    return _this;\n  }\n\n  CanvasWrapper.prototype.componentDidMount = function () {\n    this.updateSize();\n\n    if (this.ref.current) {\n      if (window.ResizeObserver) {\n        var ro = new window.ResizeObserver(this.updateSize);\n        ro.observe(this.ref.current);\n      } else {\n        window.addEventListener('resize', this.updateSize);\n      }\n\n      window.addEventListener('scroll', this.updateSize);\n    }\n  };\n\n  CanvasWrapper.prototype.componentDidUpdate = function () {\n    this.updateSize();\n  };\n\n  CanvasWrapper.prototype.componentWillUnmount = function () {\n    window.removeEventListener('resize', this.updateSize);\n    window.removeEventListener('scroll', this.updateSize);\n  };\n\n  CanvasWrapper.prototype.render = function () {\n    var _a = this.props,\n        config = _a.config,\n        ComponentInner = _a.ComponentInner,\n        ComponentOuter = _a.ComponentOuter,\n        position = _a.position,\n        onDragCanvas = _a.onDragCanvas,\n        children = _a.children,\n        onCanvasClick = _a.onCanvasClick,\n        onDeleteKey = _a.onDeleteKey,\n        onCanvasDrop = _a.onCanvasDrop;\n    var _b = this.state,\n        offsetX = _b.offsetX,\n        offsetY = _b.offsetY;\n    return React.createElement(CanvasContext_1.default.Provider, {\n      value: {\n        offsetX: this.state.offsetX,\n        offsetY: this.state.offsetY\n      }\n    }, React.createElement(ComponentOuter, {\n      config: config,\n      ref: this.ref\n    }, React.createElement(react_draggable_1.default, {\n      axis: \"both\",\n      position: position,\n      grid: [1, 1],\n      onDrag: function onDrag(event, data) {\n        return onDragCanvas({\n          config: config,\n          event: event,\n          data: data\n        });\n      },\n      disabled: config.readonly\n    }, React.createElement(ComponentInner, {\n      config: config,\n      children: children,\n      onClick: onCanvasClick,\n      tabIndex: 0,\n      onKeyDown: function onKeyDown(e) {\n        // delete or backspace keys\n        if (e.keyCode === 46 || e.keyCode === 8) {\n          onDeleteKey({\n            config: config\n          });\n        }\n      },\n      onDrop: function onDrop(e) {\n        var data = JSON.parse(e.dataTransfer.getData(__1.REACT_FLOW_CHART));\n\n        if (data) {\n          onCanvasDrop({\n            data: data,\n            position: {\n              x: e.clientX - (position.x + offsetX),\n              y: e.clientY - (position.y + offsetY)\n            }\n          });\n        }\n      },\n      onDragOver: function onDragOver(e) {\n        return e.preventDefault();\n      }\n    }))));\n  };\n\n  return CanvasWrapper;\n}(React.Component);\n\nexports.CanvasWrapper = CanvasWrapper;","map":null,"metadata":{},"sourceType":"script"}
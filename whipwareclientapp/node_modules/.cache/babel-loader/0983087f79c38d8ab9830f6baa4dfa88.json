{"ast":null,"code":"\"use strict\";\n\nvar __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar uuid_1 = require(\"uuid\");\n\nvar rotate_1 = require(\"./utils/rotate\");\n/**\n * This file contains actions for updating state after each of the required callbacks\n */\n\n\nexports.onDragNode = function (_a) {\n  var config = _a.config,\n      event = _a.event,\n      data = _a.data,\n      id = _a.id;\n  return function (chart) {\n    var nodechart = chart.nodes[id];\n\n    if (nodechart) {\n      chart.nodes[id] = __assign({}, nodechart, {\n        position: config && config.snapToGrid ? {\n          x: Math.round(data.x / 20) * 20,\n          y: Math.round(data.y / 20) * 20\n        } : {\n          x: data.x,\n          y: data.y\n        }\n      });\n    }\n\n    return chart;\n  };\n};\n\nexports.onDragCanvas = function (_a) {\n  var config = _a.config,\n      event = _a.event,\n      data = _a.data;\n  return function (chart) {\n    chart.offset = config && config.snapToGrid ? {\n      x: Math.round(data.x / 20) * 20,\n      y: Math.round(data.y / 20) * 20\n    } : {\n      x: data.x,\n      y: data.y\n    };\n    return chart;\n  };\n};\n\nexports.onLinkStart = function (_a) {\n  var linkId = _a.linkId,\n      fromNodeId = _a.fromNodeId,\n      fromPortId = _a.fromPortId;\n  return function (chart) {\n    chart.links[linkId] = {\n      id: linkId,\n      from: {\n        nodeId: fromNodeId,\n        portId: fromPortId\n      },\n      to: {}\n    };\n    return chart;\n  };\n};\n\nexports.onLinkMove = function (_a) {\n  var linkId = _a.linkId,\n      toPosition = _a.toPosition;\n  return function (chart) {\n    var link = chart.links[linkId];\n    link.to.position = toPosition;\n    chart.links[linkId] = __assign({}, link);\n    return chart;\n  };\n};\n\nexports.onLinkComplete = function (props) {\n  var linkId = props.linkId,\n      fromNodeId = props.fromNodeId,\n      fromPortId = props.fromPortId,\n      toNodeId = props.toNodeId,\n      toPortId = props.toPortId,\n      _a = props.config,\n      config = _a === void 0 ? {} : _a;\n  return function (chart) {\n    if (!config.readonly && (config.validateLink ? config.validateLink(__assign({}, props, {\n      chart: chart\n    })) : true) && [fromNodeId, fromPortId].join() !== [toNodeId, toPortId].join()) {\n      chart.links[linkId].to = {\n        nodeId: toNodeId,\n        portId: toPortId\n      };\n    } else {\n      delete chart.links[linkId];\n    }\n\n    return chart;\n  };\n};\n\nexports.onLinkCancel = function (_a) {\n  var linkId = _a.linkId;\n  return function (chart) {\n    delete chart.links[linkId];\n    return chart;\n  };\n};\n\nexports.onLinkMouseEnter = function (_a) {\n  var linkId = _a.linkId;\n  return function (chart) {\n    // Set the link to hover\n    var link = chart.links[linkId]; // Set the connected ports to hover\n\n    if (link.to.nodeId && link.to.portId) {\n      if (chart.hovered.type !== 'link' || chart.hovered.id !== linkId) {\n        chart.hovered = {\n          type: 'link',\n          id: linkId\n        };\n      }\n    }\n\n    return chart;\n  };\n};\n\nexports.onLinkMouseLeave = function (_a) {\n  var linkId = _a.linkId;\n  return function (chart) {\n    var link = chart.links[linkId]; // Set the connected ports to hover\n\n    if (link.to.nodeId && link.to.portId) {\n      chart.hovered = {};\n    }\n\n    return chart;\n  };\n};\n\nexports.onLinkClick = function (_a) {\n  var linkId = _a.linkId;\n  return function (chart) {\n    if (chart.selected.id !== linkId || chart.selected.type !== 'link') {\n      chart.selected = {\n        type: 'link',\n        id: linkId\n      };\n    }\n\n    return chart;\n  };\n};\n\nexports.onCanvasClick = function () {\n  return function (chart) {\n    if (chart.selected.id) {\n      chart.selected = {};\n    }\n\n    return chart;\n  };\n};\n\nexports.onDeleteKey = function () {\n  return function (chart) {\n    if (chart.selected.type === 'node' && chart.selected.id) {\n      var node_1 = chart.nodes[chart.selected.id]; // Delete the connected links\n\n      Object.keys(chart.links).forEach(function (linkId) {\n        var link = chart.links[linkId];\n\n        if (link.from.nodeId === node_1.id || link.to.nodeId === node_1.id) {\n          delete chart.links[link.id];\n        }\n      }); // Delete the node\n\n      delete chart.nodes[chart.selected.id];\n    } else if (chart.selected.type === 'link' && chart.selected.id) {\n      delete chart.links[chart.selected.id];\n    }\n\n    if (chart.selected) {\n      chart.selected = {};\n    }\n\n    return chart;\n  };\n};\n\nexports.onNodeClick = function (_a) {\n  var nodeId = _a.nodeId;\n  return function (chart) {\n    if (chart.selected.id !== nodeId || chart.selected.type !== 'node') {\n      chart.selected = {\n        type: 'node',\n        id: nodeId\n      };\n    }\n\n    return chart;\n  };\n};\n\nexports.onNodeSizeChange = function (_a) {\n  var nodeId = _a.nodeId,\n      size = _a.size;\n  return function (chart) {\n    chart.nodes[nodeId] = __assign({}, chart.nodes[nodeId], {\n      size: size\n    });\n    return chart;\n  };\n};\n\nexports.onPortPositionChange = function (_a) {\n  var nodeToUpdate = _a.node,\n      port = _a.port,\n      el = _a.el,\n      nodesEl = _a.nodesEl;\n  return function (chart) {\n    if (nodeToUpdate.size) {\n      // rotate the port's position based on the node's orientation prop (angle)\n      var center = {\n        x: nodeToUpdate.size.width / 2,\n        y: nodeToUpdate.size.height / 2\n      };\n      var current = {\n        x: el.offsetLeft + nodesEl.offsetLeft + el.offsetWidth / 2,\n        y: el.offsetTop + nodesEl.offsetTop + el.offsetHeight / 2\n      };\n      var angle = nodeToUpdate.orientation || 0;\n      var position = rotate_1.rotate(center, current, angle);\n      var node = chart.nodes[nodeToUpdate.id];\n      node.ports[port.id].position = {\n        x: position.x,\n        y: position.y\n      };\n      chart.nodes[nodeToUpdate.id] = __assign({}, node);\n    }\n\n    return chart;\n  };\n};\n\nexports.onCanvasDrop = function (_a) {\n  var config = _a.config,\n      data = _a.data,\n      position = _a.position;\n  return function (chart) {\n    var id = uuid_1.v4();\n    chart.nodes[id] = {\n      id: id,\n      position: config && config.snapToGrid ? {\n        x: Math.round(position.x / 20) * 20,\n        y: Math.round(position.y / 20) * 20\n      } : {\n        x: position.x,\n        y: position.y\n      },\n      orientation: data.orientation || 0,\n      type: data.type,\n      ports: data.ports,\n      properties: data.properties\n    };\n    return chart;\n  };\n};","map":{"version":3,"sources":["../../../src/container/actions.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\nvar __assign = (this && this.__assign) || function () {\n    __assign = Object.assign || function(t) {\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\n            s = arguments[i];\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar uuid_1 = require(\"uuid\");\nvar rotate_1 = require(\"./utils/rotate\");\n/**\n * This file contains actions for updating state after each of the required callbacks\n */\nexports.onDragNode = function (_a) {\n    var config = _a.config, event = _a.event, data = _a.data, id = _a.id;\n    return function (chart) {\n        var nodechart = chart.nodes[id];\n        if (nodechart) {\n            chart.nodes[id] = __assign({}, nodechart, { position: config && config.snapToGrid ? { x: Math.round(data.x / 20) * 20, y: Math.round(data.y / 20) * 20 } : { x: data.x, y: data.y } });\n        }\n        return chart;\n    };\n};\nexports.onDragCanvas = function (_a) {\n    var config = _a.config, event = _a.event, data = _a.data;\n    return function (chart) {\n        chart.offset = config && config.snapToGrid ? { x: Math.round(data.x / 20) * 20, y: Math.round(data.y / 20) * 20 } : { x: data.x, y: data.y };\n        return chart;\n    };\n};\nexports.onLinkStart = function (_a) {\n    var linkId = _a.linkId, fromNodeId = _a.fromNodeId, fromPortId = _a.fromPortId;\n    return function (chart) {\n        chart.links[linkId] = {\n            id: linkId,\n            from: {\n                nodeId: fromNodeId,\n                portId: fromPortId,\n            },\n            to: {},\n        };\n        return chart;\n    };\n};\nexports.onLinkMove = function (_a) {\n    var linkId = _a.linkId, toPosition = _a.toPosition;\n    return function (chart) {\n        var link = chart.links[linkId];\n        link.to.position = toPosition;\n        chart.links[linkId] = __assign({}, link);\n        return chart;\n    };\n};\nexports.onLinkComplete = function (props) {\n    var linkId = props.linkId, fromNodeId = props.fromNodeId, fromPortId = props.fromPortId, toNodeId = props.toNodeId, toPortId = props.toPortId, _a = props.config, config = _a === void 0 ? {} : _a;\n    return function (chart) {\n        if (!config.readonly && (config.validateLink ? config.validateLink(__assign({}, props, { chart: chart })) : true) && [fromNodeId, fromPortId].join() !== [toNodeId, toPortId].join()) {\n            chart.links[linkId].to = {\n                nodeId: toNodeId,\n                portId: toPortId,\n            };\n        }\n        else {\n            delete chart.links[linkId];\n        }\n        return chart;\n    };\n};\nexports.onLinkCancel = function (_a) {\n    var linkId = _a.linkId;\n    return function (chart) {\n        delete chart.links[linkId];\n        return chart;\n    };\n};\nexports.onLinkMouseEnter = function (_a) {\n    var linkId = _a.linkId;\n    return function (chart) {\n        // Set the link to hover\n        var link = chart.links[linkId];\n        // Set the connected ports to hover\n        if (link.to.nodeId && link.to.portId) {\n            if (chart.hovered.type !== 'link' || chart.hovered.id !== linkId) {\n                chart.hovered = {\n                    type: 'link',\n                    id: linkId,\n                };\n            }\n        }\n        return chart;\n    };\n};\nexports.onLinkMouseLeave = function (_a) {\n    var linkId = _a.linkId;\n    return function (chart) {\n        var link = chart.links[linkId];\n        // Set the connected ports to hover\n        if (link.to.nodeId && link.to.portId) {\n            chart.hovered = {};\n        }\n        return chart;\n    };\n};\nexports.onLinkClick = function (_a) {\n    var linkId = _a.linkId;\n    return function (chart) {\n        if (chart.selected.id !== linkId || chart.selected.type !== 'link') {\n            chart.selected = {\n                type: 'link',\n                id: linkId,\n            };\n        }\n        return chart;\n    };\n};\nexports.onCanvasClick = function () { return function (chart) {\n    if (chart.selected.id) {\n        chart.selected = {};\n    }\n    return chart;\n}; };\nexports.onDeleteKey = function () { return function (chart) {\n    if (chart.selected.type === 'node' && chart.selected.id) {\n        var node_1 = chart.nodes[chart.selected.id];\n        // Delete the connected links\n        Object.keys(chart.links).forEach(function (linkId) {\n            var link = chart.links[linkId];\n            if (link.from.nodeId === node_1.id || link.to.nodeId === node_1.id) {\n                delete chart.links[link.id];\n            }\n        });\n        // Delete the node\n        delete chart.nodes[chart.selected.id];\n    }\n    else if (chart.selected.type === 'link' && chart.selected.id) {\n        delete chart.links[chart.selected.id];\n    }\n    if (chart.selected) {\n        chart.selected = {};\n    }\n    return chart;\n}; };\nexports.onNodeClick = function (_a) {\n    var nodeId = _a.nodeId;\n    return function (chart) {\n        if (chart.selected.id !== nodeId || chart.selected.type !== 'node') {\n            chart.selected = {\n                type: 'node',\n                id: nodeId,\n            };\n        }\n        return chart;\n    };\n};\nexports.onNodeSizeChange = function (_a) {\n    var nodeId = _a.nodeId, size = _a.size;\n    return function (chart) {\n        chart.nodes[nodeId] = __assign({}, chart.nodes[nodeId], { size: size });\n        return chart;\n    };\n};\nexports.onPortPositionChange = function (_a) {\n    var nodeToUpdate = _a.node, port = _a.port, el = _a.el, nodesEl = _a.nodesEl;\n    return function (chart) {\n        if (nodeToUpdate.size) {\n            // rotate the port's position based on the node's orientation prop (angle)\n            var center = { x: nodeToUpdate.size.width / 2, y: nodeToUpdate.size.height / 2 };\n            var current = { x: el.offsetLeft + nodesEl.offsetLeft + el.offsetWidth / 2, y: el.offsetTop + nodesEl.offsetTop + el.offsetHeight / 2 };\n            var angle = nodeToUpdate.orientation || 0;\n            var position = rotate_1.rotate(center, current, angle);\n            var node = chart.nodes[nodeToUpdate.id];\n            node.ports[port.id].position = {\n                x: position.x,\n                y: position.y,\n            };\n            chart.nodes[nodeToUpdate.id] = __assign({}, node);\n        }\n        return chart;\n    };\n};\nexports.onCanvasDrop = function (_a) {\n    var config = _a.config, data = _a.data, position = _a.position;\n    return function (chart) {\n        var id = uuid_1.v4();\n        chart.nodes[id] = {\n            id: id,\n            position: config && config.snapToGrid ? { x: Math.round(position.x / 20) * 20, y: Math.round(position.y / 20) * 20 } : { x: position.x, y: position.y },\n            orientation: data.orientation || 0,\n            type: data.type,\n            ports: data.ports,\n            properties: data.properties,\n        };\n        return chart;\n    };\n};\n//# sourceMappingURL=actions.js.map"]},"metadata":{},"sourceType":"script"}
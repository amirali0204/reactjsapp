{"version":3,"sources":["DVComponents/dvmenu.tsx","DVApps/App.tsx","serviceWorker.ts","index.tsx","DVApps/mystyle.module.css"],"names":["dvmenu","props","myMenu","React","animationOnChange","bind","disabledOnChange","hoverOnChange","openOnChange","topLevelArrowsOnChange","ReactDOM","width","height","value","document","getElementsByClassName","className","styles","menualign","theme","ref","this","href","style","type","id","searchalign","data-ignoretheme","float","marginTop","marginLeft","padding","event","args","checked","current","setOptions","animationHideDuration","animationShowDelay","animationShowDuration","disabled","enableHover","autoOpen","showTopLevelArrows","App","Boolean","window","location","hostname","match","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister","module","exports"],"mappings":"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","file":"static/js/main.17555064.chunk.js","sourcesContent":["import * as React from 'react';\nimport * as ReactDOM from 'react-dom';\nimport JqxCheckBox from 'jqwidgets-scripts/jqwidgets-react-tsx/jqxcheckbox';\nimport JqxMenu from 'jqwidgets-scripts/jqwidgets-react-tsx/jqxmenu';\nimport JqxButton from 'jqwidgets-scripts/jqwidgets-react-tsx/jqxbuttons';\nimport styles from \"../DVApps/mystyle.module.css\";\nimport { any } from 'prop-types';\n\nclass dvmenu extends React.Component<{}> {\n\n    private myMenu = React.createRef<JqxMenu>();\n\n    constructor(props: {}) {\n        super(props);\n        this.animationOnChange = this.animationOnChange.bind(this);\n        this.disabledOnChange = this.disabledOnChange.bind(this);\n        this.hoverOnChange = this.hoverOnChange.bind(this);\n        this.openOnChange = this.openOnChange.bind(this);\n        this.topLevelArrowsOnChange = this.topLevelArrowsOnChange.bind(this);\n    }\n    public componentDidMount() {\n        ReactDOM.render(<JqxButton width={90} height={23} value={'Search'} />, document.getElementsByClassName('jqx-menu-search')[0]);\n    }\n\n    public render() {\n        return (\n                <JqxMenu className={styles.menualign}  theme={'Material'} ref={this.myMenu}  height={30}>\n                    <ul>\n                        <li ><a href=\"#Home\">Dashboard</a></li>\n                        <li>\n                            Customer Management\n                            <ul style={{ width: '200px' }}>\n                                <li><a href=\"#SupportHome\">Customers</a></li>\n                                <li><a href=\"#SupportHome\">Orders</a></li>\n                                <li>File Management\n                                    <ul style={{ width: '200px' }}>\n                                        <li><a href=\"#SupportHome\">File Manager</a></li>\n                                    </ul>\n                                </li>\n                                {/* \n                                 // @ts-ignore */}\n                                <li type=\"separator\" />\n                                <li><a href=\"#SupportHome\">Messages</a></li>\n                            </ul>\n                        </li>\n                        <li>\n                            Services Management \n                            <ul style={{ width: '200px' }}>\n                                <li> Services<ul>\n                                    <li>\n                                        Manage Services\n                                    </li>\n                                    <li>\n                                        Service Templates\n                                    </li>\n                                    </ul>\n                                </li>\n                                <li> Add-ons<ul>\n                                    <li>\n                                        Manage Add-ons\n                                    </li>\n                                    <li>\n                                        Add-on Types\n                                    </li>\n                                    </ul>\n                                </li>\n                                {/* \n                                 // @ts-ignore */}\n                                <li type=\"separator\" />\n                                <li> Discounts</li>\n                            </ul>\n                        </li>\n                        <li>\n                            Project Management\n                            <ul style={{ width: '200px' }}>\n                                <li><a href=\"#SupportHome\">Projects</a></li>\n                                <li><a href=\"#CustomerService\">Work Queue</a></li>\n                            </ul>\n                        </li>\n                        <li>\n                            Billing Management\n                            <ul style={{ width: '200px' }}>\n                                <li><a href=\"#SupportHome\">Invoices</a></li>\n                                <li><a href=\"#CustomerService\">Payroll</a></li>\n                            </ul>\n                        </li>\n                        <li>\n                            Support\n                            <ul style={{ width: '200px' }}>\n                                <li><a href=\"#SupportHome\">Support home</a></li>\n                                <li><a href=\"#CustomerService\">Customer Service</a></li>\n                                <li><a href=\"#KB\">Knowledge base</a></li>\n                                <li><a href=\"#Books\">Books</a></li>\n                                <li><a href=\"#Training\">Training and certification</a></li>\n                                <li><a href=\"#SupportPrograms\">Support programs</a></li>\n                                <li><a href=\"#Forums\">Forums</a></li>\n                                <li><a href=\"#Documentation\">Documentation</a></li>\n                                <li><a href=\"#Updates\">Updates</a></li>\n                            </ul>\n                        </li>\n                        <li>\n                            Settings\n                            <ul style={{ width: '200px' }}>\n                                <li><a href=\"#Designers\">Staff</a></li>\n                                <li><a href=\"#Developers\">Workflows</a></li>\n                                <li><a href=\"#Educators\">Educators and students</a></li>\n                                <li><a href=\"#Partners\">Partners</a></li>\n                                {/* \n                                 // @ts-ignore */}\n                                <li type=\"separator\" />\n                                <li>\n                                    By resource\n                                    <ul>\n                                        <li><a href=\"#Labs\">Labs</a></li>\n                                        <li><a href=\"#TV\">TV</a></li>\n                                        <li><a href=\"#Forums\">Forums</a></li>\n                                        <li><a href=\"#Exchange\">Exchange</a></li>\n                                        <li><a href=\"#Blogs\">Blogs</a></li>\n                                        <li><a href=\"#Experience Design\">Experience Design</a></li>\n                                    </ul>\n                                </li>\n                            </ul>\n                        </li>\n                        \n                        <li id=\"44\" className={styles.searchalign} data-ignoretheme=\"true\" >\n                            <div style={{ float: 'left', height: '30px', marginTop: '1px', marginLeft: '20px' }}>\n                                <input className=\"jqx-input jqx-widget-content\" style={{ float: 'left', height: '22px', width: '130px' }} />\n                            </div>\n                            <span className=\"jqx-menu-search\" style={{ marginTop: '1px', marginLeft: '3px', padding: '2px', float: 'left' }} />\n                        </li>\n                    </ul>\n                </JqxMenu>\n        );\n    }\n\n    private animationOnChange(event: any): void {\n        const value = event.args.checked;\n        // enable or disable the menu's animation.\n        if (!value) {\n            this.myMenu.current!.setOptions\n                ({\n                    animationHideDuration: 0,\n                    animationShowDelay: 0,\n                    animationShowDuration: 0                    \n                });\n        }\n        else {\n            this.myMenu.current!.setOptions\n                ({\n                    animationHideDuration: 200,\n                    animationShowDelay: 200,\n                    animationShowDuration: 300                    \n                });\n        }\n    }\n\n    private disabledOnChange(event: any): void {\n        const value = event.args.checked;\n        // enable or disable the menu\n        if (!value) {\n            this.myMenu.current!.setOptions({ disabled: false });\n        }\n        else {\n            this.myMenu.current!.setOptions({ disabled: true });\n        }\n    }\n\n    private hoverOnChange(event: any): void {\n        const value = event.args.checked;\n        // enable or disable the menu's hover effect.\n        if (!value) {\n            this.myMenu.current!.setOptions({ enableHover: false });\n        }\n        else {\n            this.myMenu.current!.setOptions({ enableHover: true });\n        }\n    }\n\n    private openOnChange(event: any): void {\n        const value = event.args.checked;\n        // enable or disable the opening of the top level menu items when the user hovers them.\n        if (!value) {\n            this.myMenu.current!.setOptions({ autoOpen: false });\n        }\n        else {\n            this.myMenu.current!.setOptions({ autoOpen: true });\n        }\n    }\n    private topLevelArrowsOnChange(event: any): void {\n        const value = event.args.checked;\n        // enable or disable the top level arrows.\n        if (!value) {\n            this.myMenu.current!.setOptions({ showTopLevelArrows: false });\n        }\n        else {\n            this.myMenu.current!.setOptions({ showTopLevelArrows: true });\n        }\n    }\n\n}\n\nexport default dvmenu;","import * as React from 'react';\nimport * as ReactDOM from 'react-dom';\nimport JqxCheckBox from 'jqwidgets-scripts/jqwidgets-react-tsx/jqxcheckbox';\nimport JqxMenu from 'jqwidgets-scripts/jqwidgets-react-tsx/jqxmenu';\nimport JqxButton from 'jqwidgets-scripts/jqwidgets-react-tsx/jqxbuttons';\nimport styles from \"./mystyle.module.css\";\nimport { any } from 'prop-types';\nimport DvMenu from '../DVComponents/dvmenu';\n\nclass App extends React.PureComponent<{}> {\n\n    constructor(props: {}) {\n        super(props);\n        \n    }\n    public componentDidMount() {\n    }\n\n    public render() {\n        return (\n            <div>\n            <DvMenu/>\n            <div><br></br></div>\n            </div>\n        );\n    }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = process.env.PUBLIC_URL + '/service-worker.js';\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './DVApps/App';\nimport Dashboard from './DVApps/Dashboard';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('app'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();","// extracted by mini-css-extract-plugin\nmodule.exports = {\"searchalign\":\"mystyle_searchalign__3nP7k\",\"menualign\":\"mystyle_menualign__18xwI\"};"],"sourceRoot":""}
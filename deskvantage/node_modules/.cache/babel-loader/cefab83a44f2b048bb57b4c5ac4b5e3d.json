{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar React = require(\"react\");\n\nvar ReactDOM = require(\"react-dom\");\n\nvar react_draggable_1 = require(\"react-draggable\");\n\nvar react_resize_observer_1 = require(\"react-resize-observer\");\n\nvar __1 = require(\"../../\");\n\nvar utils_1 = require(\"../../utils\");\n\nvar Node_default_1 = require(\"./Node.default\");\n\nexports.NodeWrapper = function (_a) {\n  var config = _a.config,\n      node = _a.node,\n      onDragNode = _a.onDragNode,\n      onNodeClick = _a.onNodeClick,\n      isSelected = _a.isSelected,\n      _b = _a.Component,\n      Component = _b === void 0 ? Node_default_1.NodeDefault : _b,\n      onNodeSizeChange = _a.onNodeSizeChange,\n      NodeInner = _a.NodeInner,\n      Ports = _a.Ports,\n      Port = _a.Port,\n      offset = _a.offset,\n      selected = _a.selected,\n      selectedLink = _a.selectedLink,\n      hovered = _a.hovered,\n      hoveredLink = _a.hoveredLink,\n      onPortPositionChange = _a.onPortPositionChange,\n      onLinkStart = _a.onLinkStart,\n      onLinkMove = _a.onLinkMove,\n      onLinkComplete = _a.onLinkComplete,\n      onLinkCancel = _a.onLinkCancel;\n\n  var _c = React.useState({\n    width: 0,\n    height: 0\n  }),\n      size = _c[0],\n      setSize = _c[1];\n\n  var isDragging = React.useRef(false);\n  var onStart = React.useCallback(function (e) {\n    // Stop propagation so the canvas does not move\n    e.stopPropagation();\n    isDragging.current = false;\n  }, []);\n  var onDrag = React.useCallback(function (event, data) {\n    isDragging.current = true;\n    onDragNode({\n      config: config,\n      event: event,\n      data: data,\n      id: node.id\n    });\n  }, [onDragNode, config, node.id]);\n  var onClick = React.useCallback(function (e) {\n    if (!config.readonly) {\n      e.stopPropagation();\n\n      if (!isDragging.current) {\n        onNodeClick({\n          config: config,\n          nodeId: node.id\n        });\n      }\n    }\n  }, [config, node.id]);\n  var compRef = React.useRef(null); // TODO: probably should add an observer to track node component size changes\n\n  React.useLayoutEffect(function () {\n    var el = ReactDOM.findDOMNode(compRef.current);\n\n    if (el) {\n      if ((node.size && node.size.width) !== el.offsetWidth || (node.size && node.size.height) !== el.offsetHeight) {\n        var newSize = {\n          width: el.offsetWidth,\n          height: el.offsetHeight\n        };\n        setSize(newSize);\n        onNodeSizeChange({\n          config: config,\n          nodeId: node.id,\n          size: newSize\n        });\n      }\n    }\n  }, [node, compRef.current, size.width, size.height]);\n  var children = React.createElement(React.Fragment, null, React.createElement(react_resize_observer_1.default, {\n    onResize: function onResize(rect) {\n      var newSize = {\n        width: rect.width,\n        height: rect.height\n      };\n      setSize(newSize);\n    }\n  }), React.createElement(NodeInner, {\n    node: node,\n    config: config\n  }), React.createElement(Ports, {\n    config: config\n  }, Object.keys(node.ports).map(function (portId) {\n    return React.createElement(__1.PortWrapper, {\n      config: config,\n      key: portId,\n      offset: offset,\n      selected: selected,\n      selectedLink: selectedLink,\n      hoveredLink: hoveredLink,\n      hovered: hovered,\n      node: node,\n      port: node.ports[portId],\n      Component: Port,\n      onPortPositionChange: onPortPositionChange,\n      onLinkStart: config.readonly ? utils_1.noop : onLinkStart,\n      onLinkMove: config.readonly ? utils_1.noop : onLinkMove,\n      onLinkComplete: onLinkComplete,\n      onLinkCancel: onLinkCancel\n    });\n  })));\n  return React.createElement(react_draggable_1.default, {\n    bounds: \"parent\",\n    axis: \"both\",\n    position: node.position,\n    grid: [1, 1],\n    onStart: onStart,\n    onDrag: onDrag,\n    disabled: config.readonly\n  }, React.createElement(Component, {\n    config: config,\n    ref: compRef,\n    children: children,\n    onClick: onClick,\n    isSelected: isSelected,\n    node: node\n  }));\n};","map":null,"metadata":{},"sourceType":"script"}
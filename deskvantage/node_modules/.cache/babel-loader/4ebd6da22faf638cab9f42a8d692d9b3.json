{"ast":null,"code":"/*\r\njQWidgets v9.0.0 (2020-Jan)\r\nCopyright (c) 2011-2020 jQWidgets.\r\nLicense: https://jqwidgets.com/license/\r\n*/\n\n/* eslint-disable */\n(function (b) {\n  b.extend(b.jqx._jqxGrid.prototype, {\n    _exportData: function _exportData(R, J) {\n      var X = this;\n      var N = typeof J === \"string\" ? J : J.fileName;\n\n      if (!N) {\n        N = \"jqxGrid\";\n      }\n\n      if (!J || typeof J === \"string\") {\n        J = {\n          header: true,\n          filterBy: null,\n          groupBy: null,\n          style: null,\n          fileName: N,\n          pageOrientation: \"portrait\",\n          expandChart: \"+\",\n          collapseChar: \"-\"\n        };\n      }\n\n      var ae = new b.jqx.dataAdapter.DataExporter({\n        exportHeader: J.header\n      });\n      var V = [];\n      ae.expandChar = J.expandChar;\n      ae.collapseChar = J.collapseChar;\n      ae.pageOrientation = J.pageOrientation;\n      ae.style = J.style;\n      ae.filterBy = J.filterBy;\n      ae.groupBy = J.groupBy;\n      var L = [];\n      var W = X.columngroups || [];\n      var Y = 0;\n\n      for (var U = 0; U < X.columns.records.length; U++) {\n        if (X.columns.records[U].datafield !== null) {\n          L[Y++] = {\n            label: X.columns.records[U].text,\n            dataField: X.columns.records[U].datafield\n          };\n        }\n      }\n\n      ae.header = {\n        columns: L,\n        columngroups: W\n      };\n\n      if (!J.style) {\n        var aa = window.getComputedStyle(X.element);\n        var H = window.getComputedStyle(X.columns.records.length > 0 && X.columns.records[0].element ? X.columns.records[0].element : X.host.find(\".jqx-grid-header\")[0]);\n        var j = window.getComputedStyle(X.host.find(\".jqx-grid-header\")[0]);\n        var ab = X.offsetWidth === 0 || X.offsetHeight === 0;\n\n        if (!ab) {\n          var ac = function ac(h) {\n            var g = \"Helvetica\";\n            var e = h.fontSize;\n            var m = h.borderRightColor;\n            var f = h.backgroundColor;\n            var k = h.color;\n            var d = new Array(\"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"a\", \"b\", \"c\", \"d\", \"e\", \"f\");\n\n            function l(n) {\n              n = n.match(/^rgb\\((\\d+),\\s*(\\d+),\\s*(\\d+)\\)$/);\n\n              if (!n) {\n                return \"#ffffff\";\n              }\n\n              return \"#\" + c(n[1]) + c(n[2]) + c(n[3]).toUpperCase();\n            }\n\n            function c(n) {\n              return isNaN(n) ? \"00\" : d[(n - n % 16) / 16] + d[n % 16];\n            }\n\n            return {\n              borderColor: l(m),\n              fontSize: e,\n              fontFamily: g,\n              color: l(k),\n              backgroundColor: l(f)\n            };\n          };\n\n          var P = ac(aa);\n          var T = ac(H);\n          var M = ac(j);\n          var a = {\n            height: \"30px\",\n            border: \"1px solid \" + P.borderColor,\n            fontFamily: M.fontFamily,\n            fontSize: M.fontSize,\n            color: M.color,\n            backgroundColor: T.backgroundColor,\n            fontWeight: \"400\"\n          };\n          var ag = {\n            border: \"1px solid \" + P.borderColor,\n            fontFamily: P.fontFamily,\n            fontSize: P.fontSize\n          };\n          var O = {\n            height: X.rowsheight + \"px\"\n          };\n\n          for (var U = 0; U < X.columns.records.length; U++) {\n            var ad = X.columns.records[U];\n\n            if (!ad.exportable) {\n              continue;\n            }\n\n            a[ad.datafield] = {\n              textAlign: ad.align,\n              width: ad.width + \"px\",\n              format: ad.cellsformat || \"\"\n            };\n            var ah = ad.cellsformat || \"\";\n\n            if (ad.dataType === \"date\") {\n              ah = \"d\";\n            } else {\n              if (ad.dataType === \"dateTime\") {\n                ah = \"D\";\n              } else {\n                if (ad.dataType === \"time\") {\n                  ah = \"t\";\n                }\n              }\n            }\n\n            var S = {\n              textAlign: ad.cellsalign,\n              format: ah\n            };\n            ag[ad.datafield] = S;\n          }\n\n          if (X.altrows) {\n            O.alternationCount = 2;\n            O.alternationStart = 0;\n            O.alternationEnd = 0;\n            O.alternationIndex0Color = P.color;\n            O.alternationIndex0BackgroundColor = P.backgroundColor;\n            O.alternationIndex1Color = P.color;\n            O.alternationIndex1BackgroundColor = \"#F5F5F5\";\n          }\n\n          ae.style = {\n            border: \"1px solid \" + P.borderColor,\n            borderCollapse: \"collapse\",\n            header: a,\n            columns: ag,\n            rows: O\n          };\n        }\n      }\n\n      var af = this.getrows();\n      var K = [];\n\n      for (var U = 0; U < af.length; U++) {\n        var Z = af[U];\n\n        if (Z.hidden) {\n          continue;\n        }\n\n        var I = {};\n\n        for (var i = 0; i < X.columns.records.length; i++) {\n          var ad = X.columns.records[i];\n          I[ad.datafield] = Z[ad.datafield];\n        }\n\n        K.push(I);\n      }\n\n      if (!J.groupBy && X.groups) {\n        ae.groupBy = X.groups.slice(0);\n      }\n\n      var Q = ae.exportData(K, R, J.fileName, null);\n      return Q;\n    },\n    exportview: function exportview(f, a) {\n      var e = this;\n\n      e._exportData(f, a);\n    },\n    exportdata: function exportdata(Z, ab, ac, ad, X, T, al) {\n      if (!b.jqx.dataAdapter.ArrayExporter) {\n        throw \"jqxGrid: Missing reference to jqxdata.export.js!\";\n      }\n\n      if (Z === \"xlsx\") {\n        this._exportData(\"xlsx\", ab);\n\n        return;\n      }\n\n      if (ac == undefined) {\n        ac = true;\n      }\n\n      var a = this;\n\n      if (ad == undefined) {\n        var ad = this.getrows();\n\n        if (ad.length == 0) {\n          throw \"No data to export.\";\n        }\n      }\n\n      this.exporting = true;\n\n      if (!this.pageable) {\n        this.loadondemand = true;\n      }\n\n      if (this.altrows) {\n        this._renderrows(this.virtualsizeinfo);\n      }\n\n      var ae = this.hScrollInstance.value;\n      this.hScrollInstance.setPosition(0);\n\n      this._renderrows(this.virtualsizeinfo);\n\n      var M = X != undefined ? X : false;\n      var R = {};\n      var af = {};\n      var P = [];\n      var ah = this.host.find(\".jqx-grid-cell:first\");\n      var N = this.host.find(\".jqx-grid-cell-alt:first\");\n      ah.removeClass(this.toThemeProperty(\"jqx-grid-cell-selected\"));\n      ah.removeClass(this.toThemeProperty(\"jqx-fill-state-pressed\"));\n      N.removeClass(this.toThemeProperty(\"jqx-grid-cell-selected\"));\n      N.removeClass(this.toThemeProperty(\"jqx-fill-state-pressed\"));\n      ah.removeClass(this.toThemeProperty(\"jqx-grid-cell-hover\"));\n      ah.removeClass(this.toThemeProperty(\"jqx-fill-state-hover\"));\n      N.removeClass(this.toThemeProperty(\"jqx-grid-cell-hover\"));\n      N.removeClass(this.toThemeProperty(\"jqx-fill-state-hover\"));\n      var ak = \"cell\";\n      var am = 1;\n      var O = \"column\";\n      var ao = 1;\n      var aj = [];\n\n      for (var W = 0; W < this.columns.records.length; W++) {\n        var an = this.columns.records[W];\n\n        if (an.cellclassname != \"\") {\n          an.customCellStyles = new Array();\n\n          if (typeof an.cellclassname == \"string\") {\n            for (var V = 0; V < ad.length; V++) {\n              an.customCellStyles[V] = an.cellclassname;\n            }\n          } else {\n            for (var V = 0; V < ad.length; V++) {\n              var Q = this.getrowboundindex(V);\n              var ap = an.cellclassname(Q, an.displayfield, ad[V][an.displayfield], ad[V]);\n\n              if (ap) {\n                an.customCellStyles[V] = ap;\n              }\n            }\n          }\n        }\n      }\n\n      var j = new Array();\n      var i = null;\n      var aq = null;\n      var ar = null;\n      b.each(this.columns.records, function (l) {\n        var d = b(a.table[0].rows[0].cells[l]);\n\n        if (a.table[0].rows.length > 1) {\n          var e = b(a.table[0].rows[1].cells[l]);\n\n          if (!ar) {\n            ar = e;\n          }\n        }\n\n        if (!aq) {\n          aq = d;\n        }\n\n        var m = this;\n\n        var k = function k(p) {\n          p.removeClass(a.toThemeProperty(\"jqx-grid-cell-selected\"));\n          p.removeClass(a.toThemeProperty(\"jqx-fill-state-pressed\"));\n          p.removeClass(a.toThemeProperty(\"jqx-grid-cell-hover\"));\n          p.removeClass(a.toThemeProperty(\"jqx-fill-state-hover\"));\n\n          if (m.customCellStyles) {\n            for (var o in m.customCellStyles) {\n              p.removeClass(m.customCellStyles[o]);\n            }\n          }\n        };\n\n        k(d);\n\n        if (e) {\n          k(e);\n        }\n\n        if (this.displayfield == null) {\n          return true;\n        }\n\n        if (a.showaggregates) {\n          if (a.getcolumnaggregateddata) {\n            aj.push(a.getcolumnaggregateddata(this.displayfield, this.aggregates, true, ad));\n          }\n        }\n\n        var g = a._getexportcolumntype(this);\n\n        if (this.exportable && (!this.hidden || M)) {\n          R[this.displayfield] = {};\n          R[this.displayfield].text = this.text;\n          R[this.displayfield].width = parseInt(this.width);\n\n          if (isNaN(R[this.displayfield].width)) {\n            R[this.displayfield].width = 60;\n          }\n\n          R[this.displayfield].formatString = this.cellsformat;\n          R[this.displayfield].localization = a.gridlocalization;\n          R[this.displayfield].type = g;\n          R[this.displayfield].cellsAlign = this.cellsalign;\n          R[this.displayfield].hidden = !ac;\n          R[this.displayfield].displayfield = this.displayfield;\n          j.push(R[this.displayfield]);\n        }\n\n        ak = \"cell\" + am;\n        var c = b(this.element);\n\n        if (this.element == undefined) {\n          c = b(this.uielement);\n        }\n\n        if (!i) {\n          i = c;\n        } else {\n          if (!m._rendered) {\n            c = i;\n            d = aq;\n            e = ar;\n            var h = a.toTP(\"jqx-grid-cell\") + \" \" + a.toTP(\"jqx-item\");\n            d[0].className = h;\n            h += a.toTP(\"jqx-grid-cell-alt\");\n\n            if (e) {\n              e[0].className = h;\n            }\n          }\n        }\n\n        O = \"column\" + ao;\n\n        if (Z == \"html\" || Z == \"xls\" || Z == \"pdf\") {\n          var f = function f(u, v, w, t, o, r, s, q, p) {\n            af[u] = {};\n\n            if (v == undefined) {\n              return;\n            }\n\n            if (v[0].offsetWidth == 0 || v[0].offsetHeight == 0) {\n              return;\n            }\n\n            af[u][\"font-size\"] = v.css(\"font-size\");\n            af[u][\"font-weight\"] = v.css(\"font-weight\");\n            af[u][\"font-style\"] = v.css(\"font-style\");\n            af[u][\"background-color\"] = r._getexportcolor(v.css(\"background-color\"));\n            af[u][\"color\"] = r._getexportcolor(v.css(\"color\"));\n            af[u][\"border-color\"] = r._getexportcolor(v.css(\"border-top-color\"));\n\n            if (w) {\n              af[u][\"text-align\"] = o.align;\n            } else {\n              af[u][\"text-align\"] = o.cellsalign;\n              af[u][\"formatString\"] = o.cellsformat;\n              af[u][\"dataType\"] = g;\n            }\n\n            if (Z == \"html\" || Z == \"pdf\") {\n              af[u][\"border-top-width\"] = v.css(\"border-top-width\");\n              af[u][\"border-left-width\"] = v.css(\"border-left-width\");\n              af[u][\"border-right-width\"] = v.css(\"border-right-width\");\n              af[u][\"border-bottom-width\"] = v.css(\"border-bottom-width\");\n              af[u][\"border-top-style\"] = v.css(\"border-top-style\");\n              af[u][\"border-left-style\"] = v.css(\"border-left-style\");\n              af[u][\"border-right-style\"] = v.css(\"border-right-style\");\n              af[u][\"border-bottom-style\"] = v.css(\"border-bottom-style\");\n\n              if (w) {\n                if (s == 0) {\n                  af[u][\"border-left-width\"] = v.css(\"border-right-width\");\n                }\n\n                af[u][\"border-top-width\"] = v.css(\"border-right-width\");\n                af[u][\"border-bottom-width\"] = v.css(\"border-bottom-width\");\n              } else {\n                if (s == 0) {\n                  af[u][\"border-left-width\"] = v.css(\"border-right-width\");\n                }\n              }\n\n              af[u][\"height\"] = v.css(\"height\");\n            }\n\n            if (o.exportable && (!o.hidden || M)) {\n              if (q == true) {\n                if (!R[o.displayfield].customCellStyles) {\n                  R[o.displayfield].customCellStyles = new Array();\n                }\n\n                R[o.displayfield].customCellStyles[p] = u;\n              } else {\n                if (w) {\n                  R[o.displayfield].style = u;\n                } else {\n                  if (!t) {\n                    R[o.displayfield].cellStyle = u;\n                  } else {\n                    R[o.displayfield].cellAltStyle = u;\n                  }\n                }\n              }\n            }\n          };\n\n          f(O, c, true, false, this, a, l);\n          ao++;\n          f(ak, d, false, false, this, a, l);\n\n          if (a.altrows) {\n            ak = \"cellalt\" + am;\n            f(ak, e, false, true, this, a, l);\n          }\n\n          if (this.customCellStyles) {\n            for (var n in m.customCellStyles) {\n              d.removeClass(m.customCellStyles[n]);\n            }\n\n            for (var n in m.customCellStyles) {\n              d.addClass(m.customCellStyles[n]);\n              f(ak + m.customCellStyles[n], d, false, false, this, a, l, true, n);\n              d.removeClass(m.customCellStyles[n]);\n            }\n          }\n\n          am++;\n        }\n      });\n      b.each(this.columns.records, function (c) {\n        if (R[this.displayfield]) {\n          R[this.displayfield].columnsDataFields = j;\n        }\n      });\n\n      if (this.showaggregates) {\n        var S = [];\n        var Y = Z == \"xls\" ? \"_AG\" : \"\";\n        var ai = this.groupable ? this.groups.length : 0;\n\n        if (this.rowdetails) {\n          ai++;\n        }\n\n        if (this.selectionmode === \"checkbox\") {\n          ai++;\n        }\n\n        if (aj.length > 0) {\n          b.each(this.columns.records, function (c) {\n            if (this.aggregates) {\n              for (var f = 0; f < this.aggregates.length; f++) {\n                if (!S[f]) {\n                  S[f] = {};\n                }\n\n                if (S[f]) {\n                  var e = a._getaggregatename(this.aggregates[f]);\n\n                  var d = a._getaggregatetype(this.aggregates[f]);\n\n                  var g = aj[c - ai];\n\n                  if (g) {\n                    S[f][this.displayfield] = Y + e + \": \" + g[d];\n                  }\n                }\n              }\n            }\n          });\n          b.each(this.columns.records, function (c) {\n            for (var d = 0; d < S.length; d++) {\n              if (S[d][this.displayfield] == undefined) {\n                S[d][this.displayfield] = Y;\n              }\n            }\n          });\n        }\n\n        b.each(S, function () {\n          ad.push(this);\n        });\n      }\n\n      var ag = this;\n      var U = b.jqx.dataAdapter.ArrayExporter(ad, R, af);\n\n      if (ab == undefined) {\n        this._renderrows(this.virtualsizeinfo);\n\n        var aa = U.exportTo(Z);\n\n        if (this.showaggregates) {\n          b.each(S, function () {\n            ad.pop(this);\n          });\n        }\n\n        setTimeout(function () {\n          ag.exporting = false;\n        }, 50);\n        this.hScrollInstance.setPosition(ae);\n\n        this._renderrows(this.virtualsizeinfo);\n\n        return aa;\n      } else {\n        U.exportToFile(Z, ab, T, al);\n      }\n\n      if (this.showaggregates) {\n        b.each(S, function () {\n          ad.pop(this);\n        });\n      }\n\n      this._renderrows(this.virtualsizeinfo);\n\n      setTimeout(function () {\n        ag.exporting = false;\n      }, 50);\n      this.hScrollInstance.setPosition(ae);\n\n      this._renderrows(this.virtualsizeinfo);\n    },\n    _getexportcolor: function _getexportcolor(g) {\n      var r = g;\n\n      if (g == \"transparent\") {\n        r = \"#FFFFFF\";\n      }\n\n      if (!r || !r.toString()) {\n        r = \"#FFFFFF\";\n      }\n\n      if (r.toString().indexOf(\"rgb\") != -1) {\n        var p = r.split(\",\");\n\n        if (r.toString().indexOf(\"rgba\") != -1) {\n          var t = parseInt(p[0].substring(5));\n          var q = parseInt(p[1]);\n          var o = parseInt(p[2]);\n          var n = parseInt(p[3].substring(1, 4));\n          var a = {\n            r: t,\n            g: q,\n            b: o\n          };\n\n          var s = this._rgbToHex(a);\n\n          if (t == 0 && q == 0 && o == 0 && n == 0) {\n            return \"#ffffff\";\n          }\n\n          return \"#\" + s;\n        }\n\n        var t = parseInt(p[0].substring(4));\n        var q = parseInt(p[1]);\n        var o = parseInt(p[2].substring(1, 4));\n        var a = {\n          r: t,\n          g: q,\n          b: o\n        };\n\n        var s = this._rgbToHex(a);\n\n        return \"#\" + s;\n      } else {\n        if (r.toString().indexOf(\"#\") != -1) {\n          if (r.toString().length == 4) {\n            var u = r.toString().substring(1, 4);\n            r += u;\n          }\n        }\n      }\n\n      return r;\n    },\n    _rgbToHex: function _rgbToHex(a) {\n      return this._intToHex(a.r) + this._intToHex(a.g) + this._intToHex(a.b);\n    },\n    _intToHex: function _intToHex(d) {\n      var a = parseInt(d).toString(16);\n\n      if (a.length == 1) {\n        a = \"0\" + a;\n      }\n\n      return a.toUpperCase();\n    },\n    _getexportcolumntype: function _getexportcolumntype(m) {\n      var l = this;\n      var n = \"string\";\n      var o = l.source.datafields || (l.source._source ? l.source._source.datafields : null);\n\n      if (o) {\n        var j = \"\";\n        b.each(o, function () {\n          if (this.name == m.displayfield) {\n            if (this.type) {\n              j = this.type;\n            }\n\n            return false;\n          }\n        });\n\n        if (j) {\n          return j;\n        }\n      }\n\n      if (m != null) {\n        if (this.dataview.cachedrecords == undefined) {\n          return n;\n        }\n\n        var a = null;\n\n        if (!this.virtualmode) {\n          if (this.dataview.cachedrecords.length == 0) {\n            return n;\n          }\n\n          a = this.dataview.cachedrecords[0][m.displayfield];\n\n          if (a != null && a.toString() == \"\") {\n            return \"string\";\n          }\n        } else {\n          b.each(this.dataview.cachedrecords, function () {\n            a = this[m.displayfield];\n            return false;\n          });\n        }\n\n        if (a != null) {\n          if (m.cellsformat.indexOf(\"c\") != -1) {\n            return \"number\";\n          }\n\n          if (m.cellsformat.indexOf(\"n\") != -1) {\n            return \"number\";\n          }\n\n          if (m.cellsformat.indexOf(\"p\") != -1) {\n            return \"number\";\n          }\n\n          if (m.cellsformat.indexOf(\"d\") != -1) {\n            return \"date\";\n          }\n\n          if (m.cellsformat.indexOf(\"y\") != -1) {\n            return \"date\";\n          }\n\n          if (m.cellsformat.indexOf(\"M\") != -1) {\n            return \"date\";\n          }\n\n          if (m.cellsformat.indexOf(\"m\") != -1) {\n            return \"date\";\n          }\n\n          if (m.cellsformat.indexOf(\"t\") != -1) {\n            return \"date\";\n          }\n\n          if (typeof a == \"boolean\") {\n            n = \"boolean\";\n          } else {\n            if (b.jqx.dataFormat.isNumber(a)) {\n              n = \"number\";\n            } else {\n              var k = new Date(a);\n\n              if (k.toString() == \"NaN\" || k.toString() == \"Invalid Date\") {\n                if (b.jqx.dataFormat) {\n                  k = b.jqx.dataFormat.tryparsedate(a);\n\n                  if (k != null) {\n                    if (k && k.getFullYear()) {\n                      if (k.getFullYear() == 1970 && k.getMonth() == 0 && k.getDate() == 1) {\n                        var p = new Number(a);\n\n                        if (!isNaN(p)) {\n                          return \"number\";\n                        }\n\n                        return \"string\";\n                      }\n                    }\n\n                    return \"date\";\n                  } else {\n                    n = \"string\";\n                  }\n                } else {\n                  n = \"string\";\n                }\n              } else {\n                n = \"date\";\n              }\n            }\n          }\n        }\n      }\n\n      return n;\n    }\n  });\n})(jqxBaseFramework);","map":null,"metadata":{},"sourceType":"script"}
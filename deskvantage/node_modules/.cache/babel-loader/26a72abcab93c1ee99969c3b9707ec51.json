{"ast":null,"code":"/*\r\njQWidgets v9.0.0 (2020-Jan)\r\nCopyright (c) 2011-2020 jQWidgets.\r\nLicense: https://jqwidgets.com/license/\r\n*/\n\n/* eslint-disable */\n(function (a) {\n  a.extend(a.jqx._jqxChart.prototype, {\n    _moduleApi: true,\n    getItemsCount: function getItemsCount(f, b) {\n      var d = this.seriesGroups[f];\n\n      if (!this._isSerieVisible(f, b)) {\n        return 0;\n      }\n\n      var e = this._renderData;\n\n      if (!d || !e || e.length <= f) {\n        return 0;\n      }\n\n      var c = d.series[b];\n\n      if (!c) {\n        return 0;\n      }\n\n      return e[f].offsets[b].length;\n    },\n    getXAxisRect: function getXAxisRect(c) {\n      var b = this._renderData;\n\n      if (!b || b.length <= c) {\n        return undefined;\n      }\n\n      if (!b[c].xAxis) {\n        return undefined;\n      }\n\n      return b[c].xAxis.rect;\n    },\n    getXAxisLabels: function getXAxisLabels(k) {\n      var d = [];\n      var l = this._renderData;\n\n      if (!l || l.length <= k) {\n        return d;\n      }\n\n      l = l[k].xAxis;\n\n      if (!l) {\n        return d;\n      }\n\n      var j = this.seriesGroups[k];\n\n      if (j.polar || j.spider) {\n        for (var e = 0; e < l.polarLabels.length; e++) {\n          var h = l.polarLabels[e];\n          d.push({\n            offset: {\n              x: h.x,\n              y: h.y\n            },\n            value: h.value\n          });\n        }\n\n        return d;\n      }\n\n      var c = this._getXAxis(k);\n\n      var g = this.getXAxisRect(k);\n      var b = c.position == \"top\" || c.position == \"right\";\n      var f = j.orientation == \"horizontal\";\n\n      for (var e = 0; e < l.data.length; e++) {\n        if (f) {\n          d.push({\n            offset: {\n              x: g.x + (b ? 0 : g.width),\n              y: g.y + l.data.data[e]\n            },\n            value: l.data.xvalues[e]\n          });\n        } else {\n          d.push({\n            offset: {\n              x: g.x + l.data.data[e],\n              y: g.y + (b ? g.height : 0)\n            },\n            value: l.data.xvalues[e]\n          });\n        }\n      }\n\n      return d;\n    },\n    getValueAxisRect: function getValueAxisRect(c) {\n      var b = this._renderData;\n\n      if (!b || b.length <= c) {\n        return undefined;\n      }\n\n      if (!b[c].valueAxis) {\n        return undefined;\n      }\n\n      return b[c].valueAxis.rect;\n    },\n    getValueAxisLabels: function getValueAxisLabels(h) {\n      var c = [];\n      var j = this._renderData;\n\n      if (!j || j.length <= h) {\n        return c;\n      }\n\n      j = j[h].valueAxis;\n\n      if (!j) {\n        return c;\n      }\n\n      var k = this._getValueAxis(h);\n\n      var b = k.position == \"top\" || k.position == \"right\";\n      var g = this.seriesGroups[h];\n      var e = g.orientation == \"horizontal\";\n\n      if (g.polar || g.spider) {\n        for (var d = 0; d < j.polarLabels.length; d++) {\n          var f = j.polarLabels[d];\n          c.push({\n            offset: {\n              x: f.x,\n              y: f.y\n            },\n            value: f.value\n          });\n        }\n\n        return c;\n      }\n\n      for (var d = 0; d < j.items.length; d++) {\n        if (e) {\n          c.push({\n            offset: {\n              x: j.itemOffsets[j.items[d]].x + j.itemWidth / 2,\n              y: j.rect.y + (b ? j.rect.height : 0)\n            },\n            value: j.items[d]\n          });\n        } else {\n          c.push({\n            offset: {\n              x: j.rect.x + j.rect.width,\n              y: j.itemOffsets[j.items[d]].y + j.itemWidth / 2\n            },\n            value: j.items[d]\n          });\n        }\n      }\n\n      return c;\n    },\n    getPlotAreaRect: function getPlotAreaRect() {\n      return this._plotRect;\n    },\n    getRect: function getRect() {\n      return this._rect;\n    },\n    showToolTip: function showToolTip(f, c, e, b, d) {\n      var g = this.getItemCoord(f, c, e);\n\n      if (isNaN(g.x) || isNaN(g.y)) {\n        return;\n      }\n\n      this._startTooltipTimer(f, c, e, g.x, g.y, b, d);\n    },\n    hideToolTip: function hideToolTip(c) {\n      if (isNaN(c)) {\n        c = 0;\n      }\n\n      var b = this;\n\n      b._cancelTooltipTimer();\n\n      setTimeout(function () {\n        b._hideToolTip(0);\n      }, c);\n    }\n  });\n})(jqxBaseFramework);","map":null,"metadata":{},"sourceType":"script"}
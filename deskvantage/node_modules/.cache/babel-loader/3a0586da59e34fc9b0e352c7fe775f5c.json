{"ast":null,"code":"var _jsxFileName = \"/Users/amirali/Documents/github/reactjsapp/deskvantage/src/DVComponents/DVDataGrid.tsx\";\nimport * as React from 'react';\nimport * as ReactDOM from 'react-dom';\nimport JqxGrid, { jqx } from 'jqwidgets-scripts/jqwidgets-react-tsx/jqxgrid';\nimport { griddata } from \"./beverages\";\nimport JqxButton from 'jqwidgets-scripts/jqwidgets-react-tsx/jqxbuttons';\nimport { dvGridColumns, dvGridDataFields } from \"../DVComponents/ComponentData/GridList/index\";\nimport JqxWindow from 'jqwidgets-scripts/jqwidgets-react-tsx/jqxwindow';\nimport FormBuilder from '../DVControllers/FormBuilder';\nimport { withRouter } from \"react-router-dom\";\nimport { connect } from 'react-redux';\n\nclass DVDataGrid extends React.Component {\n  constructor(props) {\n    super(props);\n    this.myGrid = React.createRef();\n    this.myWindow = React.createRef();\n    this.jqxWidget = React.createRef();\n    this.myGridOnRowSelect = this.myGridOnRowSelect.bind(this);\n\n    const rendertoolbar = statusbar => {\n      const style = {\n        float: 'left',\n        marginLeft: '5px'\n      };\n      const buttonsContainer = React.createElement(\"div\", {\n        style: {\n          overflow: 'hidden',\n          position: 'relative',\n          margin: '5px'\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 23\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        id: 'PreviewButton',\n        style: style,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 24\n        },\n        __self: this\n      }), React.createElement(\"div\", {\n        id: 'deleteButton',\n        style: style,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 25\n        },\n        __self: this\n      }), React.createElement(\"div\", {\n        id: 'EditButton',\n        style: style,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 26\n        },\n        __self: this\n      }), React.createElement(\"div\", {\n        id: 'addButton',\n        style: style,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 27\n        },\n        __self: this\n      }));\n      ReactDOM.render(buttonsContainer, statusbar[0]);\n    };\n\n    var rendertoolbarflag = true;\n    const source = {\n      datafields: dvGridDataFields[this.props.menuselected],\n      datatype: 'json',\n      id: 'id',\n      pagesize: 15,\n      localdata: griddata,\n      sortcolumn: 'name',\n      sortdirection: 'asc'\n    };\n    this.state = {\n      columns: dvGridColumns[this.props.menuselected],\n      source: new jqx.dataAdapter(source),\n      rendertoolbar,\n      rendertoolbarflag\n    };\n  }\n\n  componentDidMount() {\n    setTimeout(() => {\n      this.createButtons();\n    });\n    const offsetLeft = this.jqxWidget.current.getBoundingClientRect().left;\n    console.log(this.jqxWidget.current);\n    const offsetTop = this.jqxWidget.current.getBoundingClientRect().top;\n    this.myWindow.current.setOptions({\n      position: {\n        x: offsetLeft,\n        y: offsetTop\n      },\n      width: this.jqxWidget.current.getBoundingClientRect().width\n    });\n    this.myWindow.current.focus();\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      ref: this.jqxWidget,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 67\n      },\n      __self: this\n    }, React.createElement(JqxGrid, {\n      theme: 'bootstrap',\n      sortable: true,\n      altrows: true,\n      showtoolbar: this.state.rendertoolbarflag,\n      rendertoolbar: this.state.rendertoolbar,\n      pageable: true,\n      onSort: this.myGridOnSort,\n      filterable: true,\n      autoshowcolumnsmenubutton: true,\n      width: '100%',\n      height: window.innerHeight - 245,\n      ref: this.myGrid,\n      onRowselect: this.myGridOnRowSelect,\n      selectionmode: 'singlerow',\n      showcolumnlines: false,\n      showcolumnheaderlines: false,\n      source: this.state.source,\n      columns: this.state.columns,\n      columnsresize: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 68\n      },\n      __self: this\n    }, React.createElement(JqxWindow, {\n      ref: this.myWindow,\n      width: '70%',\n      height: window.innerHeight - 245,\n      resizable: false,\n      draggable: false,\n      isModal: true,\n      autoOpen: false,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 75\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 78\n      },\n      __self: this\n    }, React.createElement(FormBuilder, {\n      Id: this.props.menuselected,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 78\n      },\n      __self: this\n    })))));\n  }\n\n  createButtons() {\n    const deleteButtonClick = event => {};\n\n    const EditButtonClick = event => {\n      this.myWindow.current.open();\n    };\n\n    const PreviewButtonClick = event => {\n      this.myWindow.current.open();\n    };\n\n    ReactDOM.findDOMNode(React.createElement(JqxButton, {\n      onClick: PreviewButtonClick,\n      width: 35,\n      height: 25,\n      value: '',\n      imgSrc: './../Assets/folder-preview.png',\n      imgPosition: 'center',\n      textPosition: 'center',\n      textImageRelation: 'imageBeforeText',\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 97\n      },\n      __self: this\n    }), document.getElementById('PreviewButton'));\n    ReactDOM.render(React.createElement(JqxButton, {\n      onClick: EditButtonClick,\n      width: 35,\n      height: 25,\n      value: '',\n      imgSrc: './../Assets/YEdit.png',\n      imgPosition: 'center',\n      textPosition: 'center',\n      textImageRelation: 'imageBeforeText',\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 103\n      },\n      __self: this\n    }), document.getElementById('EditButton'));\n    ReactDOM.render(React.createElement(JqxButton, {\n      onClick: deleteButtonClick,\n      width: 35,\n      height: 25,\n      value: '',\n      imgSrc: './../Assets/trash.png',\n      imgPosition: 'center',\n      textPosition: 'center',\n      textImageRelation: 'imageBeforeText',\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 109\n      },\n      __self: this\n    }), document.getElementById('deleteButton'));\n  }\n\n  myGridOnSort(event) {}\n\n  myGridOnRowSelect(event) {\n    this.myWindow.current.open();\n  }\n\n}\n\n;\n\nlet mapStateToProps = state => ({\n  state: state\n});\n\nexport const toggleTodo = id => ({\n  type: 'TOGGLE_TODO',\n  id\n});\n\nconst mapDispatchToProps = dispatch => ({\n  menuaction: id => dispatch(toggleTodo(id))\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(withRouter(DVDataGrid)); //export default ()","map":{"version":3,"sources":["/Users/amirali/Documents/github/reactjsapp/deskvantage/src/DVComponents/DVDataGrid.tsx"],"names":["React","ReactDOM","JqxGrid","jqx","griddata","JqxButton","dvGridColumns","dvGridDataFields","JqxWindow","FormBuilder","withRouter","connect","DVDataGrid","Component","constructor","props","myGrid","createRef","myWindow","jqxWidget","myGridOnRowSelect","bind","rendertoolbar","statusbar","style","float","marginLeft","buttonsContainer","overflow","position","margin","render","rendertoolbarflag","source","datafields","menuselected","datatype","id","pagesize","localdata","sortcolumn","sortdirection","state","columns","dataAdapter","componentDidMount","setTimeout","createButtons","offsetLeft","current","getBoundingClientRect","left","console","log","offsetTop","top","setOptions","x","y","width","focus","myGridOnSort","window","innerHeight","deleteButtonClick","event","EditButtonClick","open","PreviewButtonClick","findDOMNode","document","getElementById","mapStateToProps","toggleTodo","type","mapDispatchToProps","dispatch","menuaction"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport * as ReactDOM from 'react-dom';\nimport JqxGrid, { IGridProps, jqx } from 'jqwidgets-scripts/jqwidgets-react-tsx/jqxgrid';\nimport {griddata} from \"./beverages\";\nimport JqxButton from 'jqwidgets-scripts/jqwidgets-react-tsx/jqxbuttons';\nimport {dvGridColumns,dvGridDataFields} from \"../DVComponents/ComponentData/GridList/index\"\nimport JqxWindow from 'jqwidgets-scripts/jqwidgets-react-tsx/jqxwindow';\nimport FormBuilder from '../DVControllers/FormBuilder';\nimport { withRouter } from \"react-router-dom\";\nimport { connect } from 'react-redux'\nimport { Dispatch } from \"redux\";\n\nclass DVDataGrid extends React.Component<{}&any, IGridProps&any> {\n    private myGrid = React.createRef<JqxGrid>();\n    private myWindow = React.createRef<JqxWindow>();\n    private jqxWidget = React.createRef<HTMLDivElement>();\n    constructor(props) {\n        super(props);\n        this.myGridOnRowSelect = this.myGridOnRowSelect.bind(this);\n        const rendertoolbar = (statusbar: any): void => {\n            const style: React.CSSProperties = { float: 'left', marginLeft: '5px' };\n            const buttonsContainer = (\n                <div style={{ overflow: 'hidden', position: 'relative', margin: '5px' }}>\n                    <div id={'PreviewButton'} style={style} />\n                    <div id={'deleteButton'} style={style} />\n                    <div id={'EditButton'} style={style} />\n                    <div id={'addButton'} style={style} />\n                </div>\n            );\n            ReactDOM.render(buttonsContainer, statusbar[0]);\n        }\n        var rendertoolbarflag = true;\n        const source: any =\n        {\n            datafields: dvGridDataFields[this.props.menuselected],\n            datatype: 'json',\n            id: 'id',\n            pagesize: 15,\n            localdata: griddata,\n            sortcolumn: 'name',\n            sortdirection: 'asc'\n        };\n        this.state = {\n            columns: dvGridColumns[this.props.menuselected],\n            source: new jqx.dataAdapter(source),\n            rendertoolbar,\n            rendertoolbarflag,\n        }\n    }\n    public componentDidMount() {\n        setTimeout(() => {\n            this.createButtons();\n        });    \n        const offsetLeft = this.jqxWidget.current!.getBoundingClientRect().left;\n        console.log(this.jqxWidget.current!)\n        const offsetTop = this.jqxWidget.current!.getBoundingClientRect().top;\n        this.myWindow.current!.setOptions({\n            position: { x: offsetLeft, y: offsetTop},\n            width: this.jqxWidget.current!.getBoundingClientRect().width,\n        });\n\n        this.myWindow.current!.focus();\n    }\n \n    public render() {\n        return (\n            <div ref={this.jqxWidget}>\n            <JqxGrid theme={'bootstrap'} sortable={true} altrows={true}  showtoolbar={this.state.rendertoolbarflag}\n            rendertoolbar={this.state.rendertoolbar} pageable={true}\n            onSort={this.myGridOnSort} filterable={true} autoshowcolumnsmenubutton={true}\n                width={'100%'} height={window.innerHeight-245} ref={this.myGrid}\n                onRowselect={this.myGridOnRowSelect} selectionmode={'singlerow'} showcolumnlines={false}\n                showcolumnheaderlines={false}\n                source={this.state.source} columns={this.state.columns} columnsresize={true} > \n                    <JqxWindow ref={this.myWindow} width={'70%'} \n                    height={window.innerHeight-245} resizable={false} draggable={false}\n                    isModal={true} autoOpen={false} >\n                    <div><FormBuilder Id={this.props.menuselected}/></div>\n                    </JqxWindow>\n                </JqxGrid>\n            </div>\n        );\n    }\n    private createButtons(): void {\n       \n        const deleteButtonClick = (event?: any) => {\n\n        };\n        const EditButtonClick = (event?: any) => {\n            this.myWindow.current!.open();\n        };\n        const PreviewButtonClick = (event?: any) => {\n            this.myWindow.current!.open();\n\n        };\n        ReactDOM.findDOMNode(\n            <JqxButton onClick={PreviewButtonClick}\n                width={35} height={25} value={''} imgSrc={'./../Assets/folder-preview.png'}\n                imgPosition={'center'} textPosition={'center'} textImageRelation={'imageBeforeText'} />,\n            document.getElementById('PreviewButton')\n        );\n        ReactDOM.render(\n            <JqxButton onClick={EditButtonClick}\n                width={35} height={25} value={''} imgSrc={'./../Assets/YEdit.png'}\n                imgPosition={'center'} textPosition={'center'} textImageRelation={'imageBeforeText'} />,\n            document.getElementById('EditButton')\n        );\n        ReactDOM.render(\n            <JqxButton onClick={deleteButtonClick}\n                width={35} height={25} value={''} imgSrc={'./../Assets/trash.png'}\n                imgPosition={'center'} textPosition={'center'} textImageRelation={'imageBeforeText'} />,\n            document.getElementById('deleteButton')\n        );\n        \n        \n    }\n    private myGridOnSort(event: any): void {\n    }\n    private myGridOnRowSelect(event: any): void {\n        this.myWindow.current!.open();\n\n    };\n}\nexport interface IStoreState {\n    type: string\n  };\ninterface NotesListState {\n    menuaction: (id) => (dispatch: Dispatch<IStoreState>) => Promise<void>;\n  }\nlet mapStateToProps =  (state) => ({\n    state: state,\n});\nexport const toggleTodo = id => ({\n    type: 'TOGGLE_TODO',\n    id\n  })\n\n  const mapDispatchToProps = dispatch => ({\n    menuaction: id => dispatch(toggleTodo(id))\n  })\nexport default connect(\n    mapStateToProps,\n    mapDispatchToProps\n  )(withRouter(DVDataGrid));\n//export default ()"]},"metadata":{},"sourceType":"module"}
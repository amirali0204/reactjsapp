{"ast":null,"code":"/* tslint:disable */\n\n/* eslint-disable */\n(function ($) {\n  $.extend($.jqx._jqxGrid.prototype, {\n    _getChartDataFields: function _getChartDataFields(data) {\n      var that = this;\n      var record = data[0];\n      var stringOnly = true,\n          xAxisDataField,\n          series = [];\n\n      for (var dataField in record) {\n        if (dataField === '$' || dataField === 'uid' || dataField === 'boundindex' || dataField === 'uniqueid' || dataField === 'visibleindex') {\n          continue;\n        }\n\n        var dataType = that.source._source.dataFields.find(function (gridField) {\n          return gridField.name === dataField;\n        }).type;\n\n        if (dataType === 'string') {\n          var index = that.columns.records.findIndex(function (col) {\n            return col.datafield === dataField;\n          });\n\n          if (index === 0) {\n            xAxisDataField = dataField;\n          }\n        } else {\n          stringOnly = false;\n          series.push({\n            dataField: dataField,\n            displayText: dataField\n          });\n        }\n      }\n\n      return {\n        xAxisDataField: xAxisDataField,\n        series: series,\n        stringOnly: stringOnly\n      };\n    },\n    createChart: function createChart(type, dataSource) {\n      var that = this;\n      var gridSelection = that.getselection(),\n          selectedRows = gridSelection.rows,\n          selectedCells = gridSelection.cells,\n          chartElement = document.createElement('div'),\n          chartData = [],\n          seriesGroup = {};\n      var rowsToPlot = [],\n          columnsToPlot = [],\n          series;\n\n      if (selectedCells && selectedCells.length > 1) {\n        selectedCells.forEach(function (cell) {\n          if (rowsToPlot.indexOf(cell.rowindex) === -1) {\n            rowsToPlot.push(cell.rowindex);\n          }\n\n          if (columnsToPlot.indexOf(cell.datafield) === -1) {\n            columnsToPlot.push(cell.datafield);\n          }\n        });\n      }\n\n      if (selectedRows.length === 0 && selectedCells.length === 0) {\n        var dataSource = that.source.records;\n      }\n\n      if (dataSource) {\n        chartData = chartData.concat(dataSource);\n      } else {\n        var dataSource = that.source.records;\n\n        for (var i = 0; i < dataSource.length; i++) {\n          var record = {};\n\n          if (selectedRows.length > 0) {\n            if (selectedRows.indexOf(i) === -1) {\n              continue;\n            }\n          } else if (selectedCells.length > 0) {\n            if (selectedCells.length > 1) {\n              if (rowsToPlot.indexOf(i) === -1) {\n                continue;\n              }\n\n              columnsToPlot.forEach(function (dataField) {\n                record[dataField] = dataSource[i][dataField];\n              });\n              chartData.push(record);\n              continue;\n            }\n          }\n\n          that.columns.records.forEach(function (col) {\n            return record[col.datafield] = dataSource[i][col.datafield];\n          });\n          chartData.push(record);\n        }\n      }\n\n      var chartDataFields = that._getChartDataFields(chartData);\n\n      if (chartDataFields.stringOnly) {\n        if (that.showheader) {\n          var chartIcon = that.element.querySelector('#' + type);\n          that.toolbar[0].firstElementChild.classList.add('warning');\n\n          if (chartIcon) {\n            chartIcon.classList.add('warning');\n          }\n\n          setTimeout(function () {\n            that.toolbar[0].firstElementChild.classList.remove('warning');\n\n            if (chartIcon) {\n              chartIcon.classList.remove('warning');\n            }\n          }, 1000);\n        }\n\n        return;\n      }\n\n      series = chartDataFields.series;\n      var chart = {};\n      chart.title = '';\n      chart.description = '';\n      chart.showLegend = true;\n      chart.showBorderLine = false;\n      chart.padding = {\n        left: 5,\n        top: 10,\n        right: 5,\n        bottom: 5\n      };\n      chart.source = chartData;\n      chart.xAxis = {\n        dataField: chartDataFields.xAxisDataField,\n        gridLines: {\n          visible: true\n        }\n      };\n      chart.valueAxis = {\n        displayValueAxis: true,\n        description: that.charting.description,\n        axisSize: 'auto',\n        formatSettings: that.charting.formatSettings\n      };\n      chart.colorScheme = that.charting.colorScheme;\n      chart.seriesGroups = [seriesGroup];\n      seriesGroup.formatSettings = that.charting.formatSettings;\n      seriesGroup.series = series;\n\n      if (type === 'line') {\n        series.forEach(function (serie) {\n          serie.symbolSize = 8;\n          serie.symbolType = 'square';\n        });\n      } else if (type === 'pie') {\n        var pieDataField = series[0].dataField;\n        delete seriesGroup.formatSettings;\n\n        seriesGroup.formatFunction = function (value, index) {\n          if (isNaN(value)) {\n            if (typeof value === 'object') {\n              return index;\n            }\n\n            return value;\n          }\n\n          return value;\n        };\n\n        seriesGroup.showLabels = true;\n        series.length = 0;\n        series.push({\n          dataField: pieDataField,\n          displayText: chartDataFields.xAxisDataField,\n          initialAngle: 0\n        });\n      } else if (type === 'bar') {\n        type = 'column';\n        seriesGroup.orientation = 'horizontal';\n        chart.xAxis.textRotationAngle = 90;\n        chart.valueAxis.textRotationAngle = 30;\n        chart.valueAxis.flip = true;\n      } else if (type === 'area') {\n        var opacity = 1;\n\n        for (var i = 0; i < series.length; i++) {\n          series[i].opacity = opacity;\n          opacity -= 0.2;\n          opacity = Math.max(0.3, opacity);\n        }\n      }\n\n      seriesGroup.type = type;\n\n      if (that.charting.ready) {\n        that.charting.ready(chart);\n      }\n\n      if (that.charting.appendTo) {\n        var container = that.charting.appendTo === 'string' ? document.querySelector(that.charting.appendTo) : that.charting.appendTo;\n\n        if (container) {\n          var chartInstance = new jqxChart(chartElement, chart);\n          container.appendChild(chartElement);\n        }\n      } else {\n        that._openChartDialog(chartElement, type, chart);\n      }\n    },\n    _openChartDialog: function _openChartDialog(chart, chartType, settings) {\n      var that = this;\n\n      if (!that.charting.dialog.enabled) {\n        return false;\n      }\n\n      var dialogElement = document.createElement('div');\n      dialogElement.innerHTML = '<div>' + that.charting.dialog.header + '</div><div style=\"overflow:hidden;\"></div>';\n      var chartLabel = chartType.substring(0, 1).toUpperCase() + chartType.substring(1);\n      chart.style.width = '100%';\n      chart.style.height = '100%';\n      var dialog = new jqxWindow(dialogElement, {\n        width: that.charting.dialog.width,\n        height: that.charting.dialog.height,\n        position: that.charting.dialog.position,\n        isModal: true\n      });\n      dialog.open();\n      setTimeout(function () {\n        dialogElement.querySelector('.jqx-widget-content').appendChild(chart);\n        var chartInstance = new jqxChart(chart, settings);\n      }, 100);\n      dialog.on('close', function () {\n        dialog.destroy();\n      });\n    }\n  });\n})(jqxBaseFramework);","map":null,"metadata":{},"sourceType":"script"}
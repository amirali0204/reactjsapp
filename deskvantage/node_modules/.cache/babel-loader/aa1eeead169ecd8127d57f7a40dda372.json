{"ast":null,"code":"var _jsxFileName = \"/Users/amirali/Documents/github/reactjsapp/deskvantage/src/DVComponents/DVDataGrid.tsx\";\nimport * as React from 'react';\nimport * as ReactDOM from 'react-dom';\nimport JqxGrid, { jqx } from 'jqwidgets-scripts/jqwidgets-react-tsx/jqxgrid';\nimport { griddata } from \"./beverages\";\nimport JqxButton from 'jqwidgets-scripts/jqwidgets-react-tsx/jqxbuttons';\nimport { dvGridColumns, dvGridDataFields } from \"../DVComponents/ComponentData/GridList/index\";\nimport JqxWindow from 'jqwidgets-scripts/jqwidgets-react-tsx/jqxwindow';\nimport FormBuilder from '../DVControllers/FormBuilder';\nimport { connect } from 'react-redux';\n\nclass DVDataGrid extends React.PureComponent {\n  constructor(props) {\n    super(props);\n    this.myGrid = React.createRef();\n    this.myWindow = React.createRef();\n    this.jqxWidget = React.createRef();\n    this.rendertoolbar = void 0;\n    this.myGridOnRowSelect = this.myGridOnRowSelect.bind(this);\n\n    this.rendertoolbar = statusbar => {\n      const style = {\n        float: 'left',\n        marginLeft: '5px'\n      };\n      const buttonsContainer = React.createElement(\"div\", {\n        style: {\n          overflow: 'hidden',\n          position: 'relative',\n          margin: '5px'\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 31\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        id: 'PreviewButton',\n        style: style,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 32\n        },\n        __self: this\n      }), React.createElement(\"div\", {\n        id: 'deleteButton',\n        style: style,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 33\n        },\n        __self: this\n      }), React.createElement(\"div\", {\n        id: 'EditButton',\n        style: style,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 34\n        },\n        __self: this\n      }));\n      ReactDOM.render(buttonsContainer, statusbar[0]);\n    };\n\n    const source = {\n      datafields: dvGridDataFields[this.props.menuselected],\n      datatype: 'json',\n      id: 'id',\n      pagesize: 15,\n      localdata: griddata,\n      sortcolumn: 'name',\n      sortdirection: 'asc'\n    };\n    this.state = {\n      columns: dvGridColumns[this.props.menuselected],\n      source: new jqx.dataAdapter(source)\n    };\n  }\n\n  componentWillReceiveProps() {\n    this.setState({\n      columns: dvGridColumns[this.props.menuselected]\n    });\n    this.myGrid.current.renderWidget();\n  }\n\n  componentDidUpdate() {\n    setTimeout(() => {\n      this.createButtons();\n    });\n  }\n\n  componentDidMount() {\n    const offsetLeft = this.jqxWidget.current.getBoundingClientRect().left;\n    const offsetTop = this.jqxWidget.current.getBoundingClientRect().top;\n    this.myWindow.current.setOptions({\n      position: {\n        x: offsetLeft,\n        y: offsetTop\n      },\n      width: this.jqxWidget.current.getBoundingClientRect().width\n    });\n    this.myWindow.current.focus();\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      ref: this.jqxWidget,\n      id: \"tempss\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 76\n      },\n      __self: this\n    }, React.createElement(JqxGrid, {\n      theme: 'bootstrap',\n      sortable: true,\n      altrows: true,\n      showtoolbar: true,\n      rendertoolbar: this.rendertoolbar,\n      pageable: true,\n      onSort: this.myGridOnSort,\n      filterable: true,\n      autoshowcolumnsmenubutton: true,\n      width: '100%',\n      height: window.innerHeight - 245,\n      ref: this.myGrid,\n      onRowselect: this.myGridOnRowSelect,\n      selectionmode: 'singlerow',\n      showcolumnlines: false,\n      showcolumnheaderlines: false,\n      rowsheight: 50,\n      source: this.state.source,\n      columns: this.state.columns,\n      columnsresize: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 77\n      },\n      __self: this\n    }, React.createElement(JqxWindow, {\n      ref: this.myWindow,\n      width: '70%',\n      height: window.innerHeight - 245,\n      resizable: false,\n      draggable: false,\n      isModal: true,\n      autoOpen: false,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 84\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 87\n      },\n      __self: this\n    }, React.createElement(FormBuilder, {\n      Id: this.props.menuselected,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 87\n      },\n      __self: this\n    })))));\n  }\n\n  createButtons() {\n    const deleteButtonClick = event => {};\n\n    const EditButtonClick = event => {\n      this.myWindow.current.open();\n    };\n\n    const PreviewButtonClick = event => {\n      this.myWindow.current.open();\n    };\n\n    ReactDOM.render(React.createElement(JqxButton, {\n      onClick: PreviewButtonClick,\n      theme: 'bootstrap',\n      width: 35,\n      height: 25,\n      value: '',\n      imgSrc: './../Assets/folder-preview.png',\n      imgPosition: 'center',\n      textPosition: 'center',\n      textImageRelation: 'imageBeforeText',\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 106\n      },\n      __self: this\n    }), document.getElementById('PreviewButton'));\n    ReactDOM.render(React.createElement(JqxButton, {\n      onClick: EditButtonClick,\n      theme: 'bootstrap',\n      width: 35,\n      height: 25,\n      value: '',\n      imgSrc: './../Assets/YEdit.png',\n      imgPosition: 'center',\n      textPosition: 'center',\n      textImageRelation: 'imageBeforeText',\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 112\n      },\n      __self: this\n    }), document.getElementById('EditButton'));\n    ReactDOM.render(React.createElement(JqxButton, {\n      onClick: deleteButtonClick,\n      theme: 'bootstrap',\n      width: 35,\n      height: 25,\n      value: '',\n      imgSrc: './../Assets/trash.png',\n      imgPosition: 'center',\n      textPosition: 'center',\n      textImageRelation: 'imageBeforeText',\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 118\n      },\n      __self: this\n    }), document.getElementById('deleteButton'));\n  }\n\n  myGridOnSort(event) {}\n\n  myGridOnRowSelect(event) {\n    this.myWindow.current.open();\n  }\n\n}\n\n;\n\nlet mapStateToProps = state => {\n  if (state.rootReducer !== null) {\n    return {\n      state: state,\n      menuselected: state.rootReducer.menuselected\n    };\n  } else {\n    return {\n      state: state,\n      menuselected: \"Orders\"\n    };\n  }\n};\n\nexport const toggleTodo = id => ({\n  type: 'TOGGLE_TODO',\n  id\n});\n\nconst mapDispatchToProps = dispatch => ({\n  menuaction: id => dispatch(toggleTodo(id))\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(DVDataGrid); //export default ()","map":{"version":3,"sources":["/Users/amirali/Documents/github/reactjsapp/deskvantage/src/DVComponents/DVDataGrid.tsx"],"names":["React","ReactDOM","JqxGrid","jqx","griddata","JqxButton","dvGridColumns","dvGridDataFields","JqxWindow","FormBuilder","connect","DVDataGrid","PureComponent","constructor","props","myGrid","createRef","myWindow","jqxWidget","rendertoolbar","myGridOnRowSelect","bind","statusbar","style","float","marginLeft","buttonsContainer","overflow","position","margin","render","source","datafields","menuselected","datatype","id","pagesize","localdata","sortcolumn","sortdirection","state","columns","dataAdapter","componentWillReceiveProps","setState","current","renderWidget","componentDidUpdate","setTimeout","createButtons","componentDidMount","offsetLeft","getBoundingClientRect","left","offsetTop","top","setOptions","x","y","width","focus","myGridOnSort","window","innerHeight","deleteButtonClick","event","EditButtonClick","open","PreviewButtonClick","document","getElementById","mapStateToProps","rootReducer","toggleTodo","type","mapDispatchToProps","dispatch","menuaction"],"mappings":";AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,OAAO,KAAKC,QAAZ,MAA0B,WAA1B;AACA,OAAOC,OAAP,IAA8BC,GAA9B,QAAyC,+CAAzC;AACA,SAAQC,QAAR,QAAuB,aAAvB;AACA,OAAOC,SAAP,MAAsB,kDAAtB;AACA,SAAQC,aAAR,EAAsBC,gBAAtB,QAA6C,8CAA7C;AACA,OAAOC,SAAP,MAAsB,iDAAtB;AACA,OAAOC,WAAP,MAAwB,8BAAxB;AAEA,SAASC,OAAT,QAAwB,aAAxB;;AAUA,MAAMC,UAAN,SAAyBX,KAAK,CAACY,aAA/B,CAAqE;AAKjEC,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACf,UAAMA,KAAN;AADe,SAJXC,MAIW,GAJFf,KAAK,CAACgB,SAAN,EAIE;AAAA,SAHXC,QAGW,GAHAjB,KAAK,CAACgB,SAAN,EAGA;AAAA,SAFXE,SAEW,GAFClB,KAAK,CAACgB,SAAN,EAED;AAAA,SADVG,aACU;AAEf,SAAKC,iBAAL,GAAyB,KAAKA,iBAAL,CAAuBC,IAAvB,CAA4B,IAA5B,CAAzB;;AACA,SAAKF,aAAL,GAAsBG,SAAD,IAA0B;AAC3C,YAAMC,KAA0B,GAAG;AAAEC,QAAAA,KAAK,EAAE,MAAT;AAAiBC,QAAAA,UAAU,EAAE;AAA7B,OAAnC;AACA,YAAMC,gBAAgB,GAClB;AAAK,QAAA,KAAK,EAAE;AAAEC,UAAAA,QAAQ,EAAE,QAAZ;AAAsBC,UAAAA,QAAQ,EAAE,UAAhC;AAA4CC,UAAAA,MAAM,EAAE;AAApD,SAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI;AAAK,QAAA,EAAE,EAAE,eAAT;AAA0B,QAAA,KAAK,EAAEN,KAAjC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADJ,EAEI;AAAK,QAAA,EAAE,EAAE,cAAT;AAAyB,QAAA,KAAK,EAAEA,KAAhC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAFJ,EAGI;AAAK,QAAA,EAAE,EAAE,YAAT;AAAuB,QAAA,KAAK,EAAEA,KAA9B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAHJ,CADJ;AAOAtB,MAAAA,QAAQ,CAAC6B,MAAT,CAAgBJ,gBAAhB,EAAkCJ,SAAS,CAAC,CAAD,CAA3C;AACH,KAVD;;AAWA,UAAMS,MAAW,GACjB;AACIC,MAAAA,UAAU,EAAEzB,gBAAgB,CAAC,KAAKO,KAAL,CAAWmB,YAAZ,CADhC;AAEIC,MAAAA,QAAQ,EAAE,MAFd;AAGIC,MAAAA,EAAE,EAAE,IAHR;AAIIC,MAAAA,QAAQ,EAAE,EAJd;AAKIC,MAAAA,SAAS,EAAEjC,QALf;AAMIkC,MAAAA,UAAU,EAAE,MANhB;AAOIC,MAAAA,aAAa,EAAE;AAPnB,KADA;AAUA,SAAKC,KAAL,GAAa;AACTC,MAAAA,OAAO,EAAEnC,aAAa,CAAC,KAAKQ,KAAL,CAAWmB,YAAZ,CADb;AAETF,MAAAA,MAAM,EAAE,IAAI5B,GAAG,CAACuC,WAAR,CAAoBX,MAApB;AAFC,KAAb;AAKH;;AACMY,EAAAA,yBAAP,GAAkC;AAC9B,SAAKC,QAAL,CAAc;AAACH,MAAAA,OAAO,EAAEnC,aAAa,CAAC,KAAKQ,KAAL,CAAWmB,YAAZ;AAAvB,KAAd;AACA,SAAKlB,MAAL,CAAY8B,OAAZ,CAAqBC,YAArB;AACH;;AACMC,EAAAA,kBAAP,GAA2B;AACvBC,IAAAA,UAAU,CAAC,MAAM;AACb,WAAKC,aAAL;AACH,KAFS,CAAV;AAGH;;AACMC,EAAAA,iBAAP,GAA2B;AACvB,UAAMC,UAAU,GAAG,KAAKjC,SAAL,CAAe2B,OAAf,CAAwBO,qBAAxB,GAAgDC,IAAnE;AACA,UAAMC,SAAS,GAAG,KAAKpC,SAAL,CAAe2B,OAAf,CAAwBO,qBAAxB,GAAgDG,GAAlE;AACA,SAAKtC,QAAL,CAAc4B,OAAd,CAAuBW,UAAvB,CAAkC;AAC9B5B,MAAAA,QAAQ,EAAE;AAAE6B,QAAAA,CAAC,EAAEN,UAAL;AAAiBO,QAAAA,CAAC,EAAEJ;AAApB,OADoB;AAE9BK,MAAAA,KAAK,EAAE,KAAKzC,SAAL,CAAe2B,OAAf,CAAwBO,qBAAxB,GAAgDO;AAFzB,KAAlC;AAIA,SAAK1C,QAAL,CAAc4B,OAAd,CAAuBe,KAAvB;AACH;;AAEM9B,EAAAA,MAAP,GAAgB;AACZ,WACI;AAAK,MAAA,GAAG,EAAE,KAAKZ,SAAf;AAA0B,MAAA,EAAE,EAAC,QAA7B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACA,oBAAC,OAAD;AAAU,MAAA,KAAK,EAAE,WAAjB;AAA8B,MAAA,QAAQ,EAAE,IAAxC;AAA8C,MAAA,OAAO,EAAE,IAAvD;AAA8D,MAAA,WAAW,EAAE,IAA3E;AACA,MAAA,aAAa,EAAE,KAAKC,aADpB;AACmC,MAAA,QAAQ,EAAE,IAD7C;AAEA,MAAA,MAAM,EAAE,KAAK0C,YAFb;AAE2B,MAAA,UAAU,EAAE,IAFvC;AAE6C,MAAA,yBAAyB,EAAE,IAFxE;AAGI,MAAA,KAAK,EAAE,MAHX;AAGmB,MAAA,MAAM,EAAEC,MAAM,CAACC,WAAP,GAAmB,GAH9C;AAGmD,MAAA,GAAG,EAAE,KAAKhD,MAH7D;AAII,MAAA,WAAW,EAAE,KAAKK,iBAJtB;AAIyC,MAAA,aAAa,EAAE,WAJxD;AAIqE,MAAA,eAAe,EAAE,KAJtF;AAKI,MAAA,qBAAqB,EAAE,KAL3B;AAKkC,MAAA,UAAU,EAAE,EAL9C;AAMI,MAAA,MAAM,EAAE,KAAKoB,KAAL,CAAWT,MANvB;AAM+B,MAAA,OAAO,EAAE,KAAKS,KAAL,CAAWC,OANnD;AAM4D,MAAA,aAAa,EAAE,IAN3E;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAOQ,oBAAC,SAAD;AAAW,MAAA,GAAG,EAAE,KAAKxB,QAArB;AAA+B,MAAA,KAAK,EAAE,KAAtC;AACA,MAAA,MAAM,EAAE6C,MAAM,CAACC,WAAP,GAAmB,GAD3B;AACgC,MAAA,SAAS,EAAE,KAD3C;AACkD,MAAA,SAAS,EAAE,KAD7D;AAEA,MAAA,OAAO,EAAE,IAFT;AAEe,MAAA,QAAQ,EAAE,KAFzB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAK,oBAAC,WAAD;AAAa,MAAA,EAAE,EAAE,KAAKjD,KAAL,CAAWmB,YAA5B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAL,CAHA,CAPR,CADA,CADJ;AAiBH;;AACOgB,EAAAA,aAAR,GAA8B;AAE1B,UAAMe,iBAAiB,GAAIC,KAAD,IAAiB,CAE1C,CAFD;;AAGA,UAAMC,eAAe,GAAID,KAAD,IAAiB;AACrC,WAAKhD,QAAL,CAAc4B,OAAd,CAAuBsB,IAAvB;AACH,KAFD;;AAGA,UAAMC,kBAAkB,GAAIH,KAAD,IAAiB;AACxC,WAAKhD,QAAL,CAAc4B,OAAd,CAAuBsB,IAAvB;AAEH,KAHD;;AAIAlE,IAAAA,QAAQ,CAAC6B,MAAT,CACI,oBAAC,SAAD;AAAW,MAAA,OAAO,EAAEsC,kBAApB;AAAwC,MAAA,KAAK,EAAE,WAA/C;AACI,MAAA,KAAK,EAAE,EADX;AACe,MAAA,MAAM,EAAE,EADvB;AAC2B,MAAA,KAAK,EAAE,EADlC;AACsC,MAAA,MAAM,EAAE,gCAD9C;AAEI,MAAA,WAAW,EAAE,QAFjB;AAE2B,MAAA,YAAY,EAAE,QAFzC;AAEmD,MAAA,iBAAiB,EAAE,iBAFtE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADJ,EAIIC,QAAQ,CAACC,cAAT,CAAwB,eAAxB,CAJJ;AAMArE,IAAAA,QAAQ,CAAC6B,MAAT,CACI,oBAAC,SAAD;AAAW,MAAA,OAAO,EAAEoC,eAApB;AAAqC,MAAA,KAAK,EAAE,WAA5C;AACI,MAAA,KAAK,EAAE,EADX;AACe,MAAA,MAAM,EAAE,EADvB;AAC2B,MAAA,KAAK,EAAE,EADlC;AACsC,MAAA,MAAM,EAAE,uBAD9C;AAEI,MAAA,WAAW,EAAE,QAFjB;AAE2B,MAAA,YAAY,EAAE,QAFzC;AAEmD,MAAA,iBAAiB,EAAE,iBAFtE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADJ,EAIIG,QAAQ,CAACC,cAAT,CAAwB,YAAxB,CAJJ;AAMArE,IAAAA,QAAQ,CAAC6B,MAAT,CACI,oBAAC,SAAD;AAAW,MAAA,OAAO,EAAEkC,iBAApB;AAAuC,MAAA,KAAK,EAAE,WAA9C;AACI,MAAA,KAAK,EAAE,EADX;AACe,MAAA,MAAM,EAAE,EADvB;AAC2B,MAAA,KAAK,EAAE,EADlC;AACsC,MAAA,MAAM,EAAE,uBAD9C;AAEI,MAAA,WAAW,EAAE,QAFjB;AAE2B,MAAA,YAAY,EAAE,QAFzC;AAEmD,MAAA,iBAAiB,EAAE,iBAFtE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADJ,EAIIK,QAAQ,CAACC,cAAT,CAAwB,cAAxB,CAJJ;AAQH;;AACOT,EAAAA,YAAR,CAAqBI,KAArB,EAAuC,CACtC;;AACO7C,EAAAA,iBAAR,CAA0B6C,KAA1B,EAA4C;AACxC,SAAKhD,QAAL,CAAc4B,OAAd,CAAuBsB,IAAvB;AAEH;;AA/GgE;;AAmHlE;;AAIH,IAAII,eAAe,GAAI/B,KAAK,IAAI;AAC5B,MAAGA,KAAK,CAACgC,WAAN,KAAsB,IAAzB,EAA8B;AAC1B,WAAO;AACHhC,MAAAA,KAAK,EAAEA,KADJ;AAEHP,MAAAA,YAAY,EAAEO,KAAK,CAACgC,WAAN,CAAkBvC;AAF7B,KAAP;AAIH,GALD,MAKK;AACD,WAAO;AACHO,MAAAA,KAAK,EAAEA,KADJ;AAEHP,MAAAA,YAAY,EAAE;AAFX,KAAP;AAIH;AACJ,CAZD;;AAaA,OAAO,MAAMwC,UAAU,GAAGtC,EAAE,KAAK;AAC7BuC,EAAAA,IAAI,EAAE,aADuB;AAE7BvC,EAAAA;AAF6B,CAAL,CAArB;;AAKL,MAAMwC,kBAAkB,GAAGC,QAAQ,KAAK;AACtCC,EAAAA,UAAU,EAAE1C,EAAE,IAAIyC,QAAQ,CAACH,UAAU,CAACtC,EAAD,CAAX;AADY,CAAL,CAAnC;;AAGF,eAAezB,OAAO,CAClB6D,eADkB,EAElBI,kBAFkB,CAAP,CAGVhE,UAHU,CAAf,C,CAIA","sourcesContent":["import * as React from 'react';\nimport * as ReactDOM from 'react-dom';\nimport JqxGrid, { IGridProps, jqx } from 'jqwidgets-scripts/jqwidgets-react-tsx/jqxgrid';\nimport {griddata} from \"./beverages\";\nimport JqxButton from 'jqwidgets-scripts/jqwidgets-react-tsx/jqxbuttons';\nimport {dvGridColumns,dvGridDataFields} from \"../DVComponents/ComponentData/GridList/index\"\nimport JqxWindow from 'jqwidgets-scripts/jqwidgets-react-tsx/jqxwindow';\nimport FormBuilder from '../DVControllers/FormBuilder';\nimport { withRouter } from \"react-router-dom\";\nimport { connect } from 'react-redux'\nimport { Dispatch } from \"redux\";\nimport { Router } from 'react-router-dom'\nimport { Provider } from 'react-redux'\nimport App from './DVApps/App';\nimport * as serviceWorker from './serviceWorker';\nimport createBrowserHistory from 'history/createBrowserHistory';\nimport  {persistor,store} from \"./DVReducers/Storeconfig\"\nimport { PersistGate } from 'redux-persist/lib/integration/react';\n\nclass DVDataGrid extends React.PureComponent<{}&any, IGridProps&any> {\n    private myGrid = React.createRef<JqxGrid>();\n    private myWindow = React.createRef<JqxWindow>();\n    private jqxWidget = React.createRef<HTMLDivElement>();\n    private  rendertoolbar:any;\n    constructor(props) {\n        super(props);\n        this.myGridOnRowSelect = this.myGridOnRowSelect.bind(this);\n        this.rendertoolbar = (statusbar: any): void => {\n            const style: React.CSSProperties = { float: 'left', marginLeft: '5px' };\n            const buttonsContainer = (\n                <div style={{ overflow: 'hidden', position: 'relative', margin: '5px' }}>\n                    <div id={'PreviewButton'} style={style} />\n                    <div id={'deleteButton'} style={style} />\n                    <div id={'EditButton'} style={style} />\n                </div>\n            );\n            ReactDOM.render(buttonsContainer, statusbar[0]);\n        }\n        const source: any =\n        {\n            datafields: dvGridDataFields[this.props.menuselected],\n            datatype: 'json',\n            id: 'id',\n            pagesize: 15,\n            localdata: griddata,\n            sortcolumn: 'name',\n            sortdirection: 'asc'\n        };\n        this.state = {\n            columns: dvGridColumns[this.props.menuselected],\n            source: new jqx.dataAdapter(source),\n        }\n\n    }\n    public componentWillReceiveProps(){\n        this.setState({columns: dvGridColumns[this.props.menuselected],})\n        this.myGrid.current!.renderWidget();\n    }\n    public componentDidUpdate(){\n        setTimeout(() => {\n            this.createButtons();\n        });  \n    }\n    public componentDidMount() {\n        const offsetLeft = this.jqxWidget.current!.getBoundingClientRect().left;\n        const offsetTop = this.jqxWidget.current!.getBoundingClientRect().top;\n        this.myWindow.current!.setOptions({\n            position: { x: offsetLeft, y: offsetTop},\n            width: this.jqxWidget.current!.getBoundingClientRect().width,\n        });\n        this.myWindow.current!.focus();  \n    }\n    \n    public render() {\n        return (\n            <div ref={this.jqxWidget} id=\"tempss\">\n            <JqxGrid  theme={'bootstrap'} sortable={true} altrows={true}  showtoolbar={true}\n            rendertoolbar={this.rendertoolbar} pageable={true}\n            onSort={this.myGridOnSort} filterable={true} autoshowcolumnsmenubutton={true}\n                width={'100%'} height={window.innerHeight-245} ref={this.myGrid}\n                onRowselect={this.myGridOnRowSelect} selectionmode={'singlerow'} showcolumnlines={false}\n                showcolumnheaderlines={false} rowsheight={50}\n                source={this.state.source} columns={this.state.columns} columnsresize={true} > \n                    <JqxWindow ref={this.myWindow} width={'70%'} \n                    height={window.innerHeight-245} resizable={false} draggable={false}\n                    isModal={true} autoOpen={false} >\n                    <div><FormBuilder Id={this.props.menuselected}/></div>\n                    </JqxWindow>\n                </JqxGrid>\n            </div>\n        );\n    }\n    private createButtons(): void {\n       \n        const deleteButtonClick = (event?: any) => {\n\n        };\n        const EditButtonClick = (event?: any) => {\n            this.myWindow.current!.open();\n        };\n        const PreviewButtonClick = (event?: any) => {\n            this.myWindow.current!.open();\n\n        };\n        ReactDOM.render(\n            <JqxButton onClick={PreviewButtonClick} theme={'bootstrap'}\n                width={35} height={25} value={''} imgSrc={'./../Assets/folder-preview.png'}\n                imgPosition={'center'} textPosition={'center'} textImageRelation={'imageBeforeText'} />,\n            document.getElementById('PreviewButton')\n        );\n        ReactDOM.render(\n            <JqxButton onClick={EditButtonClick} theme={'bootstrap'}\n                width={35} height={25} value={''} imgSrc={'./../Assets/YEdit.png'}\n                imgPosition={'center'} textPosition={'center'} textImageRelation={'imageBeforeText'} />,\n            document.getElementById('EditButton')\n        );\n        ReactDOM.render(\n            <JqxButton onClick={deleteButtonClick} theme={'bootstrap'}\n                width={35} height={25} value={''} imgSrc={'./../Assets/trash.png'}\n                imgPosition={'center'} textPosition={'center'} textImageRelation={'imageBeforeText'} />,\n            document.getElementById('deleteButton')\n        );\n        \n        \n    }\n    private myGridOnSort(event: any): void {\n    }\n    private myGridOnRowSelect(event: any): void {\n        this.myWindow.current!.open();\n\n    };\n}\nexport interface IStoreState {\n    type: string\n  };\ninterface NotesListState {\n    menuaction: (id) => (dispatch: Dispatch<IStoreState>) => Promise<void>;\n  }\nlet mapStateToProps =  state => {\n    if(state.rootReducer !== null){\n        return {\n            state: state,\n            menuselected: state.rootReducer.menuselected,\n        }\n    }else{\n        return {\n            state: state,\n            menuselected: \"Orders\",\n        }\n    }\n};\nexport const toggleTodo = id => ({\n    type: 'TOGGLE_TODO',\n    id\n  })\n\n  const mapDispatchToProps = dispatch => ({\n    menuaction: id => dispatch(toggleTodo(id))\n  })\nexport default connect(\n    mapStateToProps,\n    mapDispatchToProps\n  )((DVDataGrid));\n//export default ()"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"/*\r\njQWidgets v9.0.0 (2020-Jan)\r\nCopyright (c) 2011-2020 jQWidgets.\r\nLicense: https://jqwidgets.com/license/\r\n*/\n\n/* eslint-disable */\n(function ($) {\n  $.jqx.jqxWidget(\"jqxBarGauge\", \"\", {});\n  $.extend($.jqx._jqxBarGauge.prototype, {\n    defineInstance: function defineInstance() {\n      var settings = {\n        animationDuration: 300,\n        backgroundColor: \"#e0e0e0\",\n        barSpacing: 4,\n        baseValue: null,\n        colorScheme: \"scheme01\",\n        customColorScheme: null,\n        endAngle: -45,\n        disabled: false,\n        formatFunction: null,\n        geometry: {\n          startAngle: 225,\n          endAngle: -45\n        },\n        height: 400,\n        labels: null,\n        min: 0,\n        max: 100,\n        rendered: null,\n        relativeInnerRadius: 0.3,\n        startAngle: 225,\n        title: null,\n        tooltip: null,\n        values: [],\n        width: 400,\n        useGradient: true,\n        _intervalArray: [],\n        _drawnValues: [],\n        _drawnSlices: [],\n        _titleTemplate: {\n          text: \"\",\n          font: {\n            color: \"#232323\",\n            family: \"'Segoe UI', 'Helvetica Neue', 'Trebuchet MS', Verdana\",\n            opacity: 1,\n            size: 28,\n            weight: 100\n          },\n          horizontalAlignment: \"center\",\n          verticalAlignment: \"top\",\n          placeholderSize: null,\n          margin: {\n            bottom: 0,\n            left: 0,\n            right: 0,\n            top: 0\n          },\n          subtitle: {\n            text: \"\",\n            font: {\n              color: \"#232323\",\n              family: \"'Segoe UI', 'Helvetica Neue', 'Trebuchet MS', Verdana\",\n              opacity: 1,\n              size: 16,\n              weight: 100\n            }\n          }\n        },\n        _labelTemplate: {\n          connectorColor: null,\n          connectorWidth: 1,\n          formatFunction: function formatFunction(value) {\n            return value;\n          },\n          font: {\n            color: null,\n            family: \"'Segoe UI', 'Helvetica Neue', 'Trebuchet MS', Verdana\",\n            size: 16,\n            weight: 400\n          },\n          indent: 20,\n          precision: 2,\n          visible: true\n        },\n        _tooltipTemplate: {\n          classname: \"\",\n          formatFunction: function formatFunction(value) {\n            return value;\n          },\n          visible: false,\n          precision: 0\n        },\n        _colorSchemes: [{\n          name: \"scheme01\",\n          colors: [\"#307DD7\", \"#AA4643\", \"#89A54E\", \"#71588F\", \"#4198AF\"]\n        }, {\n          name: \"scheme02\",\n          colors: [\"#7FD13B\", \"#EA157A\", \"#FEB80A\", \"#00ADDC\", \"#738AC8\"]\n        }, {\n          name: \"scheme03\",\n          colors: [\"#E8601A\", \"#FF9639\", \"#F5BD6A\", \"#599994\", \"#115D6E\"]\n        }, {\n          name: \"scheme04\",\n          colors: [\"#D02841\", \"#FF7C41\", \"#FFC051\", \"#5B5F4D\", \"#364651\"]\n        }, {\n          name: \"scheme05\",\n          colors: [\"#25A0DA\", \"#309B46\", \"#8EBC00\", \"#FF7515\", \"#FFAE00\"]\n        }, {\n          name: \"scheme06\",\n          colors: [\"#0A3A4A\", \"#196674\", \"#33A6B2\", \"#9AC836\", \"#D0E64B\"]\n        }, {\n          name: \"scheme07\",\n          colors: [\"#CC6B32\", \"#FFAB48\", \"#FFE7AD\", \"#A7C9AE\", \"#888A63\"]\n        }, {\n          name: \"scheme08\",\n          colors: [\"#3F3943\", \"#01A2A6\", \"#29D9C2\", \"#BDF271\", \"#FFFFA6\"]\n        }, {\n          name: \"scheme09\",\n          colors: [\"#1B2B32\", \"#37646F\", \"#A3ABAF\", \"#E1E7E8\", \"#B22E2F\"]\n        }, {\n          name: \"scheme10\",\n          colors: [\"#5A4B53\", \"#9C3C58\", \"#DE2B5B\", \"#D86A41\", \"#D2A825\"]\n        }, {\n          name: \"scheme11\",\n          colors: [\"#993144\", \"#FFA257\", \"#CCA56A\", \"#ADA072\", \"#949681\"]\n        }, {\n          name: \"scheme12\",\n          colors: [\"#105B63\", \"#EEEAC5\", \"#FFD34E\", \"#DB9E36\", \"#BD4932\"]\n        }, {\n          name: \"scheme13\",\n          colors: [\"#BBEBBC\", \"#F0EE94\", \"#F5C465\", \"#FA7642\", \"#FF1E54\"]\n        }, {\n          name: \"scheme14\",\n          colors: [\"#60573E\", \"#F2EEAC\", \"#BFA575\", \"#A63841\", \"#BFB8A3\"]\n        }, {\n          name: \"scheme15\",\n          colors: [\"#444546\", \"#FFBB6E\", \"#F28D00\", \"#D94F00\", \"#7F203B\"]\n        }, {\n          name: \"scheme16\",\n          colors: [\"#583C39\", \"#674E49\", \"#948658\", \"#F0E99A\", \"#564E49\"]\n        }, {\n          name: \"scheme17\",\n          colors: [\"#142D58\", \"#447F6E\", \"#E1B65B\", \"#C8782A\", \"#9E3E17\"]\n        }, {\n          name: \"scheme18\",\n          colors: [\"#4D2B1F\", \"#635D61\", \"#7992A2\", \"#97BFD5\", \"#BFDCF5\"]\n        }, {\n          name: \"scheme19\",\n          colors: [\"#844341\", \"#D5CC92\", \"#BBA146\", \"#897B26\", \"#55591C\"]\n        }, {\n          name: \"scheme20\",\n          colors: [\"#56626B\", \"#6C9380\", \"#C0CA55\", \"#F07C6C\", \"#AD5472\"]\n        }, {\n          name: \"scheme21\",\n          colors: [\"#96003A\", \"#FF7347\", \"#FFBC7B\", \"#FF4154\", \"#642223\"]\n        }, {\n          name: \"scheme22\",\n          colors: [\"#5D7359\", \"#E0D697\", \"#D6AA5C\", \"#8C5430\", \"#661C0E\"]\n        }, {\n          name: \"scheme23\",\n          colors: [\"#16193B\", \"#35478C\", \"#4E7AC7\", \"#7FB2F0\", \"#ADD5F7\"]\n        }, {\n          name: \"scheme24\",\n          colors: [\"#7B1A25\", \"#BF5322\", \"#9DA860\", \"#CEA457\", \"#B67818\"]\n        }, {\n          name: \"scheme25\",\n          colors: [\"#0081DA\", \"#3AAFFF\", \"#99C900\", \"#FFEB3D\", \"#309B46\"]\n        }, {\n          name: \"scheme26\",\n          colors: [\"#0069A5\", \"#0098EE\", \"#7BD2F6\", \"#FFB800\", \"#FF6800\"]\n        }, {\n          name: \"scheme27\",\n          colors: [\"#FF6800\", \"#A0A700\", \"#FF8D00\", \"#678900\", \"#0069A5\"]\n        }],\n        _colors: [\"#307DD7\", \"#AA4643\", \"#89A54E\", \"#71588F\", \"#4198AF\"],\n        _colorNames: {\n          aliceblue: \"#f0f8ff\",\n          antiquewhite: \"#faebd7\",\n          aqua: \"#00ffff\",\n          aquamarine: \"#7fffd4\",\n          azure: \"#f0ffff\",\n          beige: \"#f5f5dc\",\n          bisque: \"#ffe4c4\",\n          black: \"#000000\",\n          blanchedalmond: \"#ffebcd\",\n          blue: \"#0000ff\",\n          blueviolet: \"#8a2be2\",\n          brown: \"#a52a2a\",\n          burlywood: \"#deb887\",\n          cadetblue: \"#5f9ea0\",\n          chartreuse: \"#7fff00\",\n          chocolate: \"#d2691e\",\n          coral: \"#ff7f50\",\n          cornflowerblue: \"#6495ed\",\n          cornsilk: \"#fff8dc\",\n          crimson: \"#dc143c\",\n          cyan: \"#00ffff\",\n          darkblue: \"#00008b\",\n          darkcyan: \"#008b8b\",\n          darkgoldenrod: \"#b8860b\",\n          darkgray: \"#a9a9a9\",\n          darkgreen: \"#006400\",\n          darkkhaki: \"#bdb76b\",\n          darkmagenta: \"#8b008b\",\n          darkolivegreen: \"#556b2f\",\n          darkorange: \"#ff8c00\",\n          darkorchid: \"#9932cc\",\n          darkred: \"#8b0000\",\n          darksalmon: \"#e9967a\",\n          darkseagreen: \"#8fbc8f\",\n          darkslateblue: \"#483d8b\",\n          darkslategray: \"#2f4f4f\",\n          darkturquoise: \"#00ced1\",\n          darkviolet: \"#9400d3\",\n          deeppink: \"#ff1493\",\n          deepskyblue: \"#00bfff\",\n          dimgray: \"#696969\",\n          dodgerblue: \"#1e90ff\",\n          firebrick: \"#b22222\",\n          floralwhite: \"#fffaf0\",\n          forestgreen: \"#228b22\",\n          fuchsia: \"#ff00ff\",\n          gainsboro: \"#dcdcdc\",\n          ghostwhite: \"#f8f8ff\",\n          gold: \"#ffd700\",\n          goldenrod: \"#daa520\",\n          gray: \"#808080\",\n          green: \"#008000\",\n          greenyellow: \"#adff2f\",\n          honeydew: \"#f0fff0\",\n          hotpink: \"#ff69b4\",\n          \"indianred \": \"#cd5c5c\",\n          indigo: \"#4b0082\",\n          ivory: \"#fffff0\",\n          khaki: \"#f0e68c\",\n          lavender: \"#e6e6fa\",\n          lavenderblush: \"#fff0f5\",\n          lawngreen: \"#7cfc00\",\n          lemonchiffon: \"#fffacd\",\n          lightblue: \"#add8e6\",\n          lightcoral: \"#f08080\",\n          lightcyan: \"#e0ffff\",\n          lightgoldenrodyellow: \"#fafad2\",\n          lightgrey: \"#d3d3d3\",\n          lightgreen: \"#90ee90\",\n          lightpink: \"#ffb6c1\",\n          lightsalmon: \"#ffa07a\",\n          lightseagreen: \"#20b2aa\",\n          lightskyblue: \"#87cefa\",\n          lightslategray: \"#778899\",\n          lightsteelblue: \"#b0c4de\",\n          lightyellow: \"#ffffe0\",\n          lime: \"#00ff00\",\n          limegreen: \"#32cd32\",\n          linen: \"#faf0e6\",\n          magenta: \"#ff00ff\",\n          maroon: \"#800000\",\n          mediumaquamarine: \"#66cdaa\",\n          mediumblue: \"#0000cd\",\n          mediumorchid: \"#ba55d3\",\n          mediumpurple: \"#9370d8\",\n          mediumseagreen: \"#3cb371\",\n          mediumslateblue: \"#7b68ee\",\n          mediumspringgreen: \"#00fa9a\",\n          mediumturquoise: \"#48d1cc\",\n          mediumvioletred: \"#c71585\",\n          midnightblue: \"#191970\",\n          mintcream: \"#f5fffa\",\n          mistyrose: \"#ffe4e1\",\n          moccasin: \"#ffe4b5\",\n          navajowhite: \"#ffdead\",\n          navy: \"#000080\",\n          oldlace: \"#fdf5e6\",\n          olive: \"#808000\",\n          olivedrab: \"#6b8e23\",\n          orange: \"#ffa500\",\n          orangered: \"#ff4500\",\n          orchid: \"#da70d6\",\n          palegoldenrod: \"#eee8aa\",\n          palegreen: \"#98fb98\",\n          paleturquoise: \"#afeeee\",\n          palevioletred: \"#d87093\",\n          papayawhip: \"#ffefd5\",\n          peachpuff: \"#ffdab9\",\n          peru: \"#cd853f\",\n          pink: \"#ffc0cb\",\n          plum: \"#dda0dd\",\n          powderblue: \"#b0e0e6\",\n          purple: \"#800080\",\n          red: \"#ff0000\",\n          rosybrown: \"#bc8f8f\",\n          royalblue: \"#4169e1\",\n          saddlebrown: \"#8b4513\",\n          salmon: \"#fa8072\",\n          sandybrown: \"#f4a460\",\n          seagreen: \"#2e8b57\",\n          seashell: \"#fff5ee\",\n          sienna: \"#a0522d\",\n          silver: \"#c0c0c0\",\n          skyblue: \"#87ceeb\",\n          slateblue: \"#6a5acd\",\n          slategray: \"#708090\",\n          snow: \"#fffafa\",\n          springgreen: \"#00ff7f\",\n          steelblue: \"#4682b4\",\n          tan: \"#d2b48c\",\n          teal: \"#008080\",\n          thistle: \"#d8bfd8\",\n          tomato: \"#ff6347\",\n          turquoise: \"#40e0d0\",\n          violet: \"#ee82ee\",\n          wheat: \"#f5deb3\",\n          white: \"#ffffff\",\n          whitesmoke: \"#f5f5f5\",\n          yellow: \"#ffff00\",\n          yellowgreen: \"#9acd32\"\n        },\n        _dimensions: {},\n        _ie: $.jqx.browser.msie,\n        _oldIEbrowser: $.jqx.browser.msie && $.jqx.browser.version <= 8,\n        _ie8: $.jqx.browser.msie && $.jqx.browser.version == 8,\n        _ie7: $.jqx.browser.msie && $.jqx.browser.version < 8,\n        _centerX: null,\n        _centerY: null,\n        _coordinatePlane: null,\n        _geometry: {\n          startAngle: -45,\n          baseAngle: -45,\n          fix: 0,\n          endAngle: 225\n        },\n        _userValues: [],\n        _valuesToDegrees: [],\n        _oldValues: [],\n        _oldValuesToDegrees: [],\n        _temporaryValuesToDegrees: [],\n        _temporaryValues: [],\n        _temporaryOldAngle: [],\n        _valuesLength: 0,\n        _oldValuesLength: 0,\n        _alignmentIE: null,\n        _title: {},\n        _backgroundColor: \"#e0e0e0\",\n        _label: {},\n        _tooltip: {},\n        _renderedValues: 0,\n        _barWidth: 35,\n        _barStartAt: 30,\n        _barGaugeSlices: [],\n        _barGaugeBackgroundSlices: [],\n        _barGaugeSlicesStrokeWidth: 0,\n        _barGaugeLabelLines: [],\n        _barGaugeLabelText: [],\n        _barGaugeTitle: null,\n        _barGaugeSubTitle: null,\n        _barGaugeTooltip: $(\"<div></div>\"),\n        _measuredText: $(\"<div class='jqx-bar-gauge-measure-text'></div>\"),\n        _measuredTextId: \"\",\n        renderer: null,\n        _barGaugeRadius: null,\n        _barGaugeFigureRadius: null,\n        _labelPositioningRadius: null,\n        _placeholderSize: 50,\n        _rendering: false,\n        _titleLines: 0,\n        _subTitleLines: 0,\n        _initialized: false,\n        _events: [\"initialized\", \"valueChanged\", \"tooltipOpen\", \"tooltipClose\", \"drawStart\", \"drawEnd\"]\n      };\n\n      if (this === $.jqx._jqxBarGauge.prototype) {\n        return settings;\n      }\n\n      $.extend(true, this, settings);\n      return settings;\n    },\n    createInstance: function createInstance() {\n      var that = this;\n\n      that._createBarGauge();\n    },\n    _createBarGauge: function _createBarGauge() {\n      var that = this;\n\n      that._getLiquidDimensions();\n\n      that._addIEPolyfills();\n\n      that._barGaugeTooltip.css({\n        display: \"none\"\n      });\n\n      $(that.host).empty();\n\n      that._attachCustomColors();\n\n      that.geometry.startAngle = that.startAngle;\n      that.geometry.endAngle = that.endAngle;\n\n      that._validateGeometry();\n\n      that._validateTitle();\n\n      that._validateLabel();\n\n      that._validateValues();\n\n      that._validateTooltip();\n\n      that._validateAnimationDuration();\n\n      that._transformValuesToAngles();\n\n      that._getColorScheme();\n\n      if (that.animationDuration === 0 || that._ie8 || that._ie7) {\n        that._drawStaticBarGauge();\n      } else {\n        that._drawDynamicBarGauge();\n      }\n\n      that._raiseEvent(\"4\");\n\n      that._createTooltip();\n\n      that._addCSS();\n\n      if (that._ie) {\n        that._removeBarGaugeTitle();\n\n        that._removeBarGaugeSubTitle();\n\n        that._drawBarGaugeTitle();\n      }\n\n      that._addEventHandlers();\n    },\n    _initRenderer: function _initRenderer(host) {\n      if (!$.jqx.createRenderer) {\n        throw \"jqxBarGauge: Please include a reference to jqxdraw.js\";\n      }\n\n      return $.jqx.createRenderer(this, host);\n    },\n    _validateValues: function _validateValues() {\n      var that = this;\n      var valuesLength, maxBarSpacing;\n\n      if (that._userValues.length === 0) {\n        that._userValues = that.values.slice();\n      }\n\n      if (that._oldValues.length === 0) {\n        that._oldValues = that.values.slice();\n      }\n\n      that._valuesLength = that.values.length;\n\n      for (var i = 0; i < that._valuesLength; i++) {\n        that.values[i] = parseFloat(that.values[i]);\n\n        if (that.values[i] < that.startValue || isNaN(that.values[i])) {\n          that.values[i] = that.startValue;\n        } else {\n          if (that.values[i] > that.max) {\n            that.values[i] = that.max;\n          }\n        }\n\n        that._drawnValues[i] = false;\n        that._drawnSlices[i] = false;\n      }\n\n      if (that.baseValue <= that.startValue || that.baseValue === null) {\n        that.baseValue = that.min;\n      } else {\n        if (that.baseValue > that.max) {\n          that.baseValue = that.max;\n        }\n      }\n\n      if (that.relativeInnerRadius >= 1) {\n        that.relativeInnerRadius = 0.99;\n      } else {\n        if (that.relativeInnerRadius < 0) {\n          that.relativeInnerRadius = 0;\n        }\n      }\n\n      that._calculateBarGaugeRadius();\n\n      valuesLength = that._valuesLength || 1;\n      maxBarSpacing = that._barGaugeRadius * (1 - that.relativeInnerRadius) / valuesLength - 0.01;\n\n      if (that.barSpacing > maxBarSpacing) {\n        that.barSpacing = maxBarSpacing;\n      }\n\n      that._backgroundColor = that._validateColor(that.backgroundColor, that._backgroundColor);\n    },\n    _attachCustomColors: function _attachCustomColors() {\n      var that = this;\n      var colorSchemesLength = that._colorSchemes.length;\n      var colorSchemeInSchemes = false;\n\n      if (that.customColorScheme !== null && that.customColorScheme.colors !== null && that.customColorScheme.name !== null) {\n        for (var i = 0; i < colorSchemesLength; i++) {\n          if (that.customColorScheme.name === that._colorSchemes[i].name) {\n            that._colorSchemes[i].colors = that.customColorScheme.colors.slice();\n            colorSchemeInSchemes = true;\n          }\n        }\n\n        if (!colorSchemeInSchemes) {\n          that._colorSchemes.push(that.customColorScheme);\n        }\n      }\n    },\n    _getLiquidDimensions: function _getLiquidDimensions() {\n      var that = this;\n\n      if ($.isEmptyObject(that._dimensions)) {\n        that._dimensions.width = that.width;\n        that._dimensions.height = that.height;\n      }\n\n      if (typeof that._dimensions.width === \"string\" && that._dimensions.width.indexOf(\"%\") !== -1) {\n        that.width = parseInt(that._dimensions.width, 10) / 100 * $(\"#\" + that.element.id).parent().width();\n      }\n\n      if (typeof that._dimensions.height === \"string\" && that._dimensions.height.indexOf(\"%\") !== -1) {\n        that.height = parseInt(that._dimensions.height, 10) / 100 * $(\"#\" + that.element.id).parent().height();\n      }\n    },\n    _getLongestValue: function _getLongestValue() {\n      var that = this;\n      var valuesCount = that.values.length,\n          longestValue = \"\",\n          longestValueLength = 0;\n\n      for (var i = 0; i < valuesCount; i++) {\n        if (that.values[i].toString().length > longestValueLength) {\n          longestValue = that.values[i];\n          longestValueLength = longestValue.toString().length;\n        }\n      }\n\n      longestValue = that._calculatePrecision(that._label.precision, longestValue);\n\n      if (that._label.formatFunction !== undefined && that._label.formatFunction !== null && typeof that._label.formatFunction === \"function\") {\n        longestValue = that._label.formatFunction(longestValue);\n      }\n\n      longestValue = longestValue.toUpperCase();\n      return longestValue;\n    },\n    _validateGeometry: function _validateGeometry() {\n      var that = this;\n      var startAngle = parseFloat(that.geometry.startAngle);\n      var endAngle = parseFloat(that.geometry.endAngle);\n\n      if (Math.abs(startAngle) >= 360) {\n        startAngle = startAngle % 360;\n      }\n\n      if (startAngle < 0) {\n        startAngle = 360 + startAngle;\n      }\n\n      if (Math.abs(endAngle) >= 360) {\n        endAngle = endAngle % 360;\n      }\n\n      if (endAngle < 0) {\n        endAngle = 360 + endAngle;\n      }\n\n      that.geometry.startAngle = startAngle;\n      that.geometry.endAngle = endAngle;\n    },\n    _validateColor: function _validateColor(color, defaultColor) {\n      var that = this;\n      var validatedColor;\n\n      if (color === undefined || color === null) {\n        validatedColor = defaultColor;\n      } else {\n        if (/(^#[0-9A-F]{6}$)|(^#[0-9A-F]{3}$)/i.test(color)) {\n          validatedColor = color;\n        } else {\n          if (/(^[0-9A-F]{6}$)|(^[0-9A-F]{3}$)/i.test(color)) {\n            validatedColor = \"#\" + color;\n          } else {\n            if (typeof that._colorNames[color.toLowerCase()] !== \"undefined\") {\n              validatedColor = that._colorNames[color.toLowerCase()];\n            } else {\n              validatedColor = \"transparent\";\n            }\n          }\n        }\n      }\n\n      return validatedColor;\n    },\n    _validateTooltip: function _validateTooltip() {\n      var that = this;\n\n      if (that.tooltip === undefined || that.tooltip === null || typeof that.tooltip !== \"object\") {\n        that._tooltip = that._tooltipTemplate;\n      } else {\n        that._tooltip.visible = that.tooltip.visible === false ? false : that.tooltip.visible || that._tooltipTemplate.visible;\n        that._tooltip.classname = that.tooltip.classname || that._tooltipTemplate.classname;\n\n        if (typeof that.tooltip.formatFunction === \"function\") {\n          that._tooltip.formatFunction = that.tooltip.formatFunction;\n        } else {\n          that._tooltip.formatFunction = that._tooltipTemplate.formatFunction;\n        }\n\n        if (that.tooltip.precision === null || that.tooltip.precision === undefined) {\n          that._tooltip.precision = that._tooltipTemplate.precision;\n        } else {\n          if (parseInt(that.tooltip.precision, 10) <= 0) {\n            that._tooltip.precision = 0;\n          } else {\n            that._tooltip.precision = parseInt(that.tooltip.precision, 10);\n          }\n        }\n      }\n    },\n    _validateTitle: function _validateTitle() {\n      var that = this;\n      that._title = that._titleTemplate;\n      that._measuredTextId = that.element.id + \"measuredText\";\n\n      if (typeof that.title === \"string\") {\n        that._title.text = that.title;\n      } else {\n        if (typeof that.title === \"number\") {\n          that._title.text = String(that.title);\n        } else {\n          if (typeof that.title === \"object\" && that.title !== undefined && that.title !== null) {\n            that._title.text = that.title.text || that._titleTemplate.text;\n            that._title.horizontalAlignment = that.title.horizontalAlignment || that._titleTemplate.horizontalAlignment;\n            that._title.verticalAlignment = that.title.verticalAlignment || that._titleTemplate.verticalAlignment;\n          }\n        }\n      }\n\n      if (that.title === undefined || that.title === null || that.title.font === undefined || that.title.font === null) {\n        that._title.font = that._titleTemplate.font;\n      } else {\n        that._title.font.family = that.title.font.family || that._titleTemplate.font.family;\n        that._title.font.opacity = that.title.font.opacity || that._titleTemplate.font.opacity;\n        that._title.font.size = that.title.font.size || that._titleTemplate.font.size;\n        that._title.font.weight = that.title.font.weight || that._titleTemplate.font.weight;\n\n        if ((that._ie7 || that._ie8) && that._title.font.weight > 100) {\n          that._title.font.weight = \"bold\";\n        }\n\n        that._title.font.color = that._validateColor(that.title.font.color, that._titleTemplate.font.color);\n      }\n\n      if (that.title === undefined || that.title === null || that.title.margin === undefined || that.title.margin === null) {\n        that._title.margin = that._titleTemplate.margin;\n      } else {\n        if (typeof that.title.margin !== \"object\") {\n          var margin = parseInt(that.title.margin, 10);\n          that._title.margin.top = margin;\n          that._title.margin.right = margin;\n          that._title.margin.bottom = margin;\n          that._title.margin.left = margin;\n        } else {\n          that._title.margin.top = that.title.margin.top === 0 ? 0 : that.title.margin.top || that._titleTemplate.margin.top;\n          that._title.margin.right = that.title.margin.right === 0 ? 0 : that.title.margin.right || that._titleTemplate.margin.right;\n          that._title.margin.bottom = that.title.margin.bottom === 0 ? 0 : that.title.margin.bottom || that._titleTemplate.margin.bottom;\n          that._title.margin.left = that.title.margin.left === 0 ? 0 : that.title.margin.left || that._titleTemplate.margin.left;\n        }\n      }\n\n      if (that.title === undefined || that.title === null || that.title.subtitle === undefined || that.title.subtitle === null) {\n        that._title.subtitle.text = that._titleTemplate.subtitle.text;\n        that._title.subtitle.font = that._titleTemplate.subtitle.font;\n      } else {\n        if (typeof that.title.subtitle !== \"object\") {\n          that._title.subtitle.text = String(that.title.subtitle);\n          that._title.subtitle.font = that._titleTemplate.subtitle.font;\n        } else {\n          if (typeof that.title.subtitle.font === \"undefined\" || that.title.subtitle.font === null) {\n            that._title.subtitle.text = String(that.title.subtitle.text);\n            that._title.subtitle.font = that._titleTemplate.subtitle.font;\n          } else {\n            that._title.subtitle.text = String(that.title.subtitle.text);\n            that._title.subtitle.font.color = that.title.subtitle.font.color || that._titleTemplate.subtitle.font.color;\n            that._title.subtitle.font.family = that.title.subtitle.font.family || that._titleTemplate.subtitle.font.family;\n            that._title.subtitle.font.opacity = that.title.subtitle.font.opacity || that._titleTemplate.subtitle.font.opacity;\n            that._title.subtitle.font.size = that.title.subtitle.font.size || that._titleTemplate.subtitle.font.size;\n            that._title.subtitle.font.weight = that.title.subtitle.font.weight || that._titleTemplate.subtitle.font.weight;\n\n            if ((that._ie7 || that._ie8) && that._title.subtitle.font.weight > 100) {\n              that._title.subtitle.font.weight = \"bold\";\n            }\n          }\n        }\n      }\n\n      var calculatedPlaceholderSize;\n\n      if (that._title.text === \"\") {\n        calculatedPlaceholderSize = 0;\n      } else {\n        if (that._title.subtitle.text === \"\" || that._title.subtitle.text === undefined || that._title.subtitle.text === null) {\n          that._titleLines = that._title.text.match(/<br>/g) !== null ? that._title.text.match(/<br>/g).length + 1 : 1;\n          calculatedPlaceholderSize = that._title.font.size * that._titleLines + that._title.margin.top + that._title.margin.bottom;\n        } else {\n          that._titleLines = that._title.text.match(/<br>/g) !== null ? that._title.text.match(/<br>/g).length + 1 : 1;\n          that._subTitleLines = that._title.subtitle.text.match(/<br>/g) !== null ? that._title.text.match(/<br>/g).length + 1 : 1;\n          calculatedPlaceholderSize = that._title.font.size * that._titleLines + that._title.subtitle.font.size * that._subTitleLines + that._title.margin.top + that._title.margin.bottom;\n        }\n      }\n\n      if (that.title === undefined || that.title === null || that.title.placeholderSize === null || that.title.placeholderSize === undefined) {\n        that._title.placeholderSize = calculatedPlaceholderSize || that.height * 0.05;\n      } else {\n        that._title.placeholderSize = that.title.placeholderSize;\n      }\n    },\n    _validateLabel: function _validateLabel() {\n      var that = this;\n\n      if (that.labels === null || that.labels === undefined || typeof that.labels !== \"object\") {\n        that._label = that._labelTemplate;\n      } else {\n        that._label.connectorColor = that._validateColor(that.labels.connectorColor, that._labelTemplate.connectorColor);\n        that._label.connectorWidth = that.labels.connectorWidth || that._labelTemplate.connectorWidth;\n        that._label.formatFunction = that.labels.formatFunction || that._labelTemplate.formatFunction;\n\n        if (that.labels.precision === undefined || that.labels.precision === null || typeof that.labels.precision !== \"number\") {\n          that._label.precision = that._labelTemplate.precision;\n        } else {\n          that._label.precision = that.labels.precision;\n        }\n\n        if (that._label.precision > 15) {\n          that._label.precision = 15;\n        } else {\n          if (that._label.precision < 0) {\n            that._label.precision = 0;\n          }\n        }\n\n        if (that.labels.visible === undefined || that.labels.visible === null) {\n          that._label.visible = that._labelTemplate.visible;\n        } else {\n          if (that.labels.visible === false) {\n            that._label.visible = false;\n          } else {\n            that._label.visible = true;\n          }\n        }\n\n        if (typeof that.labels.indent !== \"number\" && typeof that.labels.indent !== \"string\" || that.labels.indent <= 0) {\n          that._label.indent = 0;\n        } else {\n          if (typeof that.labels.indent !== \"number\" && typeof that.labels.indent !== \"string\" || that.labels.indent <= 0) {\n            that._label.indent = 0;\n          } else {\n            that._label.indent = that.labels.indent;\n          }\n        }\n\n        if (that.labels.font === null || that.labels.font === undefined || typeof that.labels.font !== \"object\") {\n          that._label.font = that._labelTemplate.font;\n        } else {\n          that._label.font = {};\n          that._label.font.color = that._validateColor(that.labels.font.color, that._labelTemplate.font.color);\n          that._label.font.family = that.labels.font.family || that._labelTemplate.font.family;\n          that._label.font.size = that.labels.font.size || that._labelTemplate.font.size;\n          that._label.font.weight = that.labels.font.weight || that._labelTemplate.font.weight;\n\n          if ((that._ie7 || that._ie8) && that._label.font.weight > 100) {\n            that._label.font.weight = \"bold\";\n          }\n        }\n      }\n    },\n    _validateAnimationDuration: function _validateAnimationDuration() {\n      var that = this;\n      var animationDurationToInt = parseInt(that.animationDuration, 10);\n      var animationDuration = animationDurationToInt > 0 ? animationDurationToInt : 0;\n\n      if (that._oldIEbrowser) {\n        that.animationDuration = 0;\n      } else {\n        that.animationDuration = animationDuration;\n      }\n    },\n    _transformValuesToAngles: function _transformValuesToAngles() {\n      var that = this;\n      var barGaugeAngle, longestValue, textSize, barGaugeFigureRadius;\n      that._placeholderSize = that._title.placeholderSize || that._placeholderSize;\n\n      if (that.geometry.endAngle < that.geometry.startAngle) {\n        that._geometry.startAngle = parseFloat(that.geometry.endAngle) % 360;\n        that._geometry.endAngle = parseFloat(that.geometry.startAngle) % 360;\n      } else {\n        that._geometry.startAngle = parseFloat(that.geometry.endAngle) % 360 - 360;\n        that._geometry.endAngle = parseFloat(that.geometry.startAngle) % 360;\n      }\n\n      barGaugeAngle = that._geometry.endAngle - that._geometry.startAngle;\n\n      if (barGaugeAngle > 360) {\n        that._geometry.startAngle = that._geometry.startAngle + (barGaugeAngle - 360);\n      }\n\n      if (that.baseValue !== undefined && that.baseValue !== null && that.baseValue >= that.min && that.baseValue <= that.max) {\n        that._geometry.baseAngle = (that.baseValue - that.min) * (that._geometry.endAngle - that._geometry.startAngle) / (that.max - that.min) + that._geometry.startAngle;\n        that._geometry.fix = that.geometry.startAngle + that.geometry.endAngle - 180;\n      }\n\n      longestValue = that._getLongestValue();\n      textSize = that._measureText(longestValue, that._label.font.size, that._label.font.family, that._label.font.weight);\n      barGaugeFigureRadius = that._barGaugeRadius - that._label.indent * 1.2 - textSize.height * 1.2;\n\n      if (barGaugeFigureRadius + textSize.width + that._label.indent * 1.2 > that.width / 2) {\n        barGaugeFigureRadius = that._barGaugeRadius - that._label.indent * 1.2 - textSize.width;\n      }\n\n      if (that._label.visible === false) {\n        barGaugeFigureRadius = that._barGaugeRadius;\n      }\n\n      barGaugeFigureRadius = barGaugeFigureRadius * 0.98;\n\n      if (barGaugeFigureRadius < 0) {\n        barGaugeFigureRadius = 0;\n      }\n\n      that._barGaugeFigureRadius = barGaugeFigureRadius;\n      that._barWidth = barGaugeFigureRadius * (1 - that.relativeInnerRadius) / that._valuesLength - that.barSpacing;\n      that._barStartAt = barGaugeFigureRadius * that.relativeInnerRadius;\n      that._labelPositioningRadius = that._barStartAt + that._valuesLength * (that._barWidth + that.barSpacing) - that.barSpacing + that._label.indent;\n\n      for (var i = 0; i < that._valuesLength; i++) {\n        that._valuesToDegrees[i] = (that.values[i] - that.min) / (that.max - that.min) * (that._geometry.endAngle - that._geometry.startAngle) + that._geometry.startAngle;\n      }\n\n      $(that.host).width(that.width);\n      $(that.host).height(that.height);\n\n      if (!that._initialized) {\n        that._initRenderer(that.host);\n\n        that._initialized = true;\n      }\n    },\n    _measureRadius: function _measureRadius() {\n      var that = this;\n\n      var longestValue = that._getLongestValue();\n\n      var textSize = that._measureText(longestValue, that._label.font.size, that._label.font.family, that._label.font.weight);\n\n      var barGaugeFigureRadius = that._barGaugeRadius - that._label.indent * 1.2 - textSize.height * 1.2;\n\n      if (barGaugeFigureRadius + textSize.width + that._label.indent * 1.2 > that.width / 2) {\n        barGaugeFigureRadius = that._barGaugeRadius - that._label.indent * 1.2 - textSize.width;\n      }\n\n      if (that._label.visible === false) {\n        barGaugeFigureRadius = that._barGaugeRadius;\n      }\n\n      barGaugeFigureRadius = barGaugeFigureRadius * 0.98;\n\n      if (barGaugeFigureRadius < 0) {\n        barGaugeFigureRadius = 0;\n      }\n\n      that._barWidth = barGaugeFigureRadius * (1 - that.relativeInnerRadius) / that._valuesLength - that.barSpacing;\n      that._barStartAt = barGaugeFigureRadius * that.relativeInnerRadius;\n      that._labelPositioningRadius = that._barStartAt + that._valuesLength * (that._barWidth + that.barSpacing) - that.barSpacing + that._label.indent;\n    },\n    _drawEmptyBarGauge: function _drawEmptyBarGauge() {\n      var that = this;\n      var emptyBarGaugeRadius, backgroundSliceId;\n      var gaugeLayerStart = that._barStartAt;\n      var gaugeLayerEnd = gaugeLayerStart + that._barWidth;\n\n      if (that._title.text === \"\") {\n        emptyBarGaugeRadius = that._barGaugeRadius;\n      } else {\n        emptyBarGaugeRadius = that._barGaugeFigureRadius;\n      }\n\n      gaugeLayerStart = that.relativeInnerRadius * emptyBarGaugeRadius;\n      gaugeLayerEnd = emptyBarGaugeRadius;\n      that._barGaugeBackgroundSlices[0] = that.renderer.pieslice(that._centerX, that._centerY, gaugeLayerStart, gaugeLayerEnd, that._geometry.startAngle, that._geometry.endAngle, 0, {\n        fill: that._backgroundColor,\n        stroke: that._backgroundColor,\n        \"stroke-width\": that._barGaugeSlicesStrokeWidth\n      });\n      backgroundSliceId = that.element.id + \"BackgroundSlice0\";\n      that.renderer.attr(that._barGaugeBackgroundSlices[0], {\n        id: backgroundSliceId\n      });\n      that.renderer.attr(that._barGaugeBackgroundSlices[0], {\n        \"class\": \"jqx-bar-gauge-background-slice\"\n      });\n\n      that._rendered();\n\n      that._oldValuesLength = 0;\n      that._oldValues.length = 0;\n    },\n    _drawBarGaugeLayout: function _drawBarGaugeLayout() {\n      var that = this;\n      var backgroundSliceId;\n      var gaugeLayerStart = that._barStartAt;\n      var gaugeLayerEnd = gaugeLayerStart + that._barWidth;\n      that._barGaugeSlicesStrokeWidth = 0;\n      that._centerX = that.width / 2;\n\n      if (that._title.text === \"\") {\n        that._centerY = that.height / 2;\n      } else {\n        if (that._title.verticalAlignment === \"top\") {\n          that._centerY = (that.height + that._title.placeholderSize) / 2;\n        } else {\n          that._centerY = (that.height - that._title.placeholderSize) / 2;\n        }\n      }\n\n      if (that._valuesLength > 0) {\n        for (var i = 0; i < that._valuesLength; i++) {\n          that._barGaugeBackgroundSlices[i] = that.renderer.pieslice(that._centerX, that._centerY, gaugeLayerStart, gaugeLayerEnd, that._geometry.startAngle, that._geometry.endAngle, 0, {\n            fill: that._backgroundColor,\n            stroke: that._backgroundColor,\n            \"stroke-width\": that._barGaugeSlicesStrokeWidth\n          });\n          backgroundSliceId = that.element.id + \"BackgroundSlice\" + i;\n          that.renderer.attr(that._barGaugeBackgroundSlices[i], {\n            id: backgroundSliceId\n          });\n          that.renderer.attr(that._barGaugeBackgroundSlices[i], {\n            \"class\": \"jqx-bar-gauge-background-slice\"\n          });\n          gaugeLayerStart = gaugeLayerEnd + that.barSpacing;\n          gaugeLayerEnd = gaugeLayerStart + that._barWidth;\n        }\n      } else {\n        that._drawEmptyBarGauge();\n      }\n    },\n    _drawBarGaugeElementsWithBase: function _drawBarGaugeElementsWithBase() {\n      var that = this;\n      var sliceId, gaugeLayerStart, gaugeLayerEnd, changeContition;\n      var change = 180 - that._geometry.baseAngle + that._geometry.fix;\n      that._renderedValues = 0;\n      gaugeLayerStart = that._barStartAt;\n      gaugeLayerEnd = gaugeLayerStart + that._barWidth;\n      var baseValues = [];\n\n      for (var i = 0; i < that._valuesLength; i++) {\n        baseValues[i] = that.baseValue;\n        var drawColor = that._colors[i];\n\n        if (that.formatFunction) {\n          drawColor = that.formatFunction(that.values[i], i, drawColor);\n        }\n\n        if (that._ie7 || that._ie8) {\n          var updatedAngle = that._valuesToDegrees[i];\n          change = 180 - updatedAngle + that._geometry.fix;\n\n          if (that._valuesToDegrees[i] > that._geometry.baseAngle) {\n            that._barGaugeSlices[i] = that.renderer.pieslice(that._centerX, that._centerY, gaugeLayerStart, gaugeLayerEnd, 180 - that._geometry.baseAngle + that._geometry.fix, change, 0, {\n              fill: drawColor,\n              stroke: drawColor,\n              \"stroke-width\": that._barGaugeSlicesStrokeWidth\n            });\n          } else {\n            that._barGaugeSlices[i] = that.renderer.pieslice(that._centerX, that._centerY, gaugeLayerStart, gaugeLayerEnd, change, 180 - that._geometry.baseAngle + that._geometry.fix, 0, {\n              fill: drawColor,\n              stroke: drawColor,\n              \"stroke-width\": that._barGaugeSlicesStrokeWidth\n            });\n          }\n\n          sliceId = that.element.id + \"Slice\" + i;\n          that.renderer.attr(that._barGaugeSlices[i], {\n            id: sliceId\n          });\n          that.renderer.attr(that._barGaugeSlices[i], {\n            \"class\": \"jqx-bar-gauge-slice\"\n          });\n          that._drawnSlices[i] = true;\n\n          if (that._label.visible === true) {\n            that._drawLabelsLine(gaugeLayerStart, change, i);\n\n            that._drawLabelsText(change, i);\n          }\n\n          that._rendered();\n        } else {\n          if (that.useGradient) {\n            var stops = [[0, 1.4], [100, 1]];\n            drawColor = that.renderer._toLinearGradient(drawColor, true, stops);\n          }\n\n          that._barGaugeSlices[i] = that.renderer.pieslice(that._centerX, that._centerY, gaugeLayerStart, gaugeLayerEnd, change + 0.01, change, 0, {\n            fill: drawColor,\n            stroke: drawColor,\n            \"stroke-width\": that._barGaugeSlicesStrokeWidth\n          });\n          sliceId = that.element.id + \"Slice\" + i;\n          that.renderer.attr(that._barGaugeSlices[i], {\n            id: sliceId\n          });\n          that.renderer.attr(that._barGaugeSlices[i], {\n            \"class\": \"jqx-bar-gauge-slice\"\n          });\n          that._drawnSlices[i] = true;\n        }\n\n        that.renderer.attr(that._barGaugeSlices[i], {\n          id: that.element.id + \"Slice\" + i\n        });\n        that.renderer.attr(that._barGaugeSlices[i], {\n          \"class\": \"jqx-bar-gauge-slice\"\n        });\n        gaugeLayerStart = gaugeLayerEnd + that.barSpacing;\n        gaugeLayerEnd = gaugeLayerStart + that._barWidth;\n      }\n\n      that._oldValues = baseValues;\n      that._temporaryValues = baseValues.slice(0);\n      that._oldValuesToDegrees.length = 0;\n\n      for (var i = 0; i < that.values.length; i++) {\n        that._oldValuesToDegrees[i] = that._geometry.baseAngle;\n        that._temporaryValuesToDegrees[i] = that._geometry.baseAngle;\n      }\n\n      that._rendering = true;\n\n      that._redrawWithNewValuesArray(that.values, that._oldValues);\n    },\n    _drawBarGaugeElementWithBase: function _drawBarGaugeElementWithBase(gaugeLayerStart, change, amount, changeContition, valueIndex) {\n      var that = this;\n      var newPieSlicePath, angleStepPercent, angleDiff, valueStep;\n\n      var animation = that._calculateAnimationInterval(valueIndex, false);\n\n      var gaugeLayerEnd = gaugeLayerStart + that._barWidth;\n      var updatedItem = that._barGaugeSlices[valueIndex];\n      var updatedAngle = that._valuesToDegrees[valueIndex];\n\n      if (that.animationDuration === 0) {\n        change = 180 - updatedAngle + that._geometry.fix;\n      }\n\n      angleDiff = Math.abs(that._geometry.baseAngle - updatedAngle);\n\n      if (angleDiff === 0) {\n        angleDiff = 0.01;\n      }\n\n      angleStepPercent = Math.abs(amount / animation.smoothCoef / angleDiff);\n      valueStep = angleStepPercent * Math.abs(that.baseValue - that.values[valueIndex]);\n\n      if (isNaN(that._temporaryValues[valueIndex])) {\n        that._temporaryValues[valueIndex] = that.values[valueIndex];\n      }\n\n      if (isNaN(that._temporaryValuesToDegrees[valueIndex])) {\n        that._temporaryValuesToDegrees[valueIndex] = that._valuesToDegrees[valueIndex];\n      }\n\n      that._intervalArray[valueIndex] = setInterval(function () {\n        calculateNewPieSlicePath();\n\n        if (eval(changeContition) && !that.disabled) {\n          that.renderer.attr(updatedItem, {\n            d: newPieSlicePath\n          });\n          change += amount / animation.smoothCoef;\n          that._temporaryValuesToDegrees[valueIndex] = (180 - change + that._geometry.fix) % 360;\n          that._temporaryValues[valueIndex] = that._temporaryValues[valueIndex] + amount * valueStep;\n        } else {\n          change = 180 - updatedAngle + that._geometry.fix;\n          that._temporaryValuesToDegrees[valueIndex] = updatedAngle % 360;\n          that._temporaryValues[valueIndex] = that.values[valueIndex];\n          calculateNewPieSlicePath();\n          that.renderer.attr(updatedItem, {\n            d: newPieSlicePath\n          });\n          clearInterval(that._intervalArray[valueIndex]);\n          that._renderedValues++;\n\n          if (that._renderedValues === that.values.length) {\n            that._rendered();\n          }\n        }\n      }, animation.interval / animation.smoothCoef);\n\n      function calculateNewPieSlicePath() {\n        if (amount === -1) {\n          newPieSlicePath = $.jqx.commonRenderer.pieSlicePath(that._centerX, that._centerY, gaugeLayerStart, gaugeLayerEnd, change, 180 - that._geometry.baseAngle + that._geometry.fix, 0);\n        } else {\n          newPieSlicePath = $.jqx.commonRenderer.pieSlicePath(that._centerX, that._centerY, gaugeLayerStart, gaugeLayerEnd, 180 - that._geometry.baseAngle + that._geometry.fix, change, 0);\n        }\n      }\n    },\n    _drawStaticBarGaugeElementsWithBase: function _drawStaticBarGaugeElementsWithBase() {\n      var that = this;\n      var gaugeLayerStart, gaugeLayerEnd, change, updatedAngle, sliceId;\n      gaugeLayerStart = that._barStartAt;\n      gaugeLayerEnd = gaugeLayerStart + that._barWidth;\n\n      for (var i = 0; i < that._valuesLength; i++) {\n        updatedAngle = that._valuesToDegrees[i] || that._geometry.baseAngle;\n        that._oldValues[i] = that.values[i] || that.baseValue;\n        change = 180 - updatedAngle + that._geometry.fix;\n        var drawColor = that._colors[i];\n\n        if (that.useGradient) {\n          var stops = [[0, 1.4], [100, 1]];\n          drawColor = that.renderer._toLinearGradient(drawColor, true, stops);\n        }\n\n        if (that._valuesToDegrees[i] < that._geometry.baseAngle) {\n          that._barGaugeSlices[i] = that.renderer.pieslice(that._centerX, that._centerY, gaugeLayerStart, gaugeLayerEnd, 180 - that._geometry.baseAngle + that._geometry.fix, change, 0, {\n            fill: drawColor,\n            stroke: drawColor,\n            \"stroke-width\": that._barGaugeSlicesStrokeWidth\n          });\n        } else {\n          that._barGaugeSlices[i] = that.renderer.pieslice(that._centerX, that._centerY, gaugeLayerStart, gaugeLayerEnd, change, 180 - that._geometry.baseAngle + that._geometry.fix, 0, {\n            fill: drawColor,\n            stroke: drawColor,\n            \"stroke-width\": that._barGaugeSlicesStrokeWidth\n          });\n        }\n\n        sliceId = that.element.id + \"Slice\" + i;\n        that.renderer.attr(that._barGaugeSlices[i], {\n          id: sliceId\n        });\n        that.renderer.attr(that._barGaugeSlices[i], {\n          \"class\": \"jqx-bar-gauge-slice\"\n        });\n        that._drawnSlices[i] = true;\n        gaugeLayerStart = gaugeLayerEnd + that.barSpacing;\n        gaugeLayerEnd = gaugeLayerStart + that._barWidth;\n      }\n\n      that._removeLabels();\n\n      that._addLabels();\n    },\n    _addLabels: function _addLabels(valuesToDegrees, values, index) {\n      var that = this;\n      var change, valueIndex, i;\n      var gaugeLayerStart = that._barStartAt;\n      var gaugeLayerEnd = gaugeLayerStart + that._barWidth;\n\n      if (!valuesToDegrees) {\n        valuesToDegrees = that._valuesToDegrees;\n      }\n\n      for (i = 0; i < that._valuesLength; i++) {\n        valueIndex = i;\n\n        if (index != undefined && i !== index) {\n          gaugeLayerStart = gaugeLayerEnd + that.barSpacing;\n          gaugeLayerEnd = gaugeLayerStart + that._barWidth;\n          continue;\n        }\n\n        change = 180 - valuesToDegrees[valueIndex] + that._geometry.fix;\n\n        if (that._label.visible === true && that.disabled === false) {\n          that._drawLabelsLine(gaugeLayerStart, change, valueIndex);\n\n          if (values && values[valueIndex] !== undefined) {\n            that._drawLabelsText(change, valueIndex, values[valueIndex]);\n          } else {\n            that._drawLabelsText(change, valueIndex);\n          }\n        }\n\n        gaugeLayerStart = gaugeLayerEnd + that.barSpacing;\n        gaugeLayerEnd = gaugeLayerStart + that._barWidth;\n      }\n    },\n    _removeLabels: function _removeLabels(index) {\n      var that = this;\n\n      for (var i = 0; i < that._barGaugeLabelText.length; i++) {\n        if (index != undefined && i != index) {\n          continue;\n        }\n\n        $(that._barGaugeLabelLines[i]).remove();\n        $(that._barGaugeLabelText[i]).remove();\n        that._barGaugeLabelLines[i] = null;\n        that._barGaugeLabelText[i] = null;\n      }\n    },\n    _removeBarGaugeSlices: function _removeBarGaugeSlices() {\n      var that = this;\n\n      that._removeBarGaugeBackgroundSlices();\n\n      that._removeBarGaugeForegroundSlices();\n    },\n    _removeBarGaugeBackgroundSlices: function _removeBarGaugeBackgroundSlices() {\n      var that = this;\n      var valuesToRemoveCount = Math.max(that._valuesLength, that._oldValuesLength);\n\n      for (var i = 0; i < valuesToRemoveCount; i++) {\n        if (that._oldIEbrowser) {\n          $(that._barGaugeBackgroundSlices[i]).remove();\n        }\n\n        that._barGaugeBackgroundSlices[i] = null;\n        that._drawnSlices[i] = false;\n      }\n\n      $(\"#\" + that.element.id + \" .jqx-bar-gauge-background-slice\").remove();\n    },\n    _removeBarGaugeForegroundSlices: function _removeBarGaugeForegroundSlices() {\n      var that = this;\n      var valuesToRemoveCount = Math.max(that._valuesLength, that._oldValuesLength);\n\n      for (var i = 0; i < valuesToRemoveCount; i++) {\n        if (that._drawnSlices[i] === true) {\n          if (that._oldIEbrowser) {\n            $(that._barGaugeSlices[i]).remove();\n          }\n\n          that._barGaugeSlices[i] = null;\n          that._drawnSlices[i] = false;\n        }\n      }\n\n      $(\"#\" + that.element.id + \" .jqx-bar-gauge-slice\").remove();\n    },\n    _removeBarGaugeTitle: function _removeBarGaugeTitle() {\n      var that = this;\n\n      if (that._oldIEbrowser && !!that._barGaugeTitle) {\n        $(that._barGaugeTitle).remove();\n      }\n\n      $(\"#\" + that.element.id + \" .jqx-bar-gauge-title\").remove();\n    },\n    _removeBarGaugeSubTitle: function _removeBarGaugeSubTitle() {\n      var that = this;\n\n      if (that._oldIEbrowser && !!that._barGaugeSubTitle) {\n        $(that._barGaugeSubTitle).remove();\n      }\n\n      $(\"#\" + that.element.id + \" .jqx-bar-gauge-subtitle\").remove();\n    },\n    _renderElements: function _renderElements() {\n      var that = this;\n      var gaugeLayerStart, gaugeLayerEnd, sliceId, condition, updatedAngle, change, i;\n      var afterZeroBaseAngle = 180 - that._geometry.baseAngle + that._geometry.fix;\n      gaugeLayerStart = that._barStartAt;\n      gaugeLayerEnd = gaugeLayerStart + that._barWidth;\n      that._rendering = true;\n      that._renderedValues = 0;\n      that._renderingValues = 0;\n      var rendering = false;\n\n      if (!that.disabled) {\n        gaugeLayerStart = that._barStartAt;\n        gaugeLayerEnd = gaugeLayerStart + that._barWidth;\n\n        for (i = 0; i < that._valuesLength; i++) {\n          if (that.values[i] >= that.baseValue) {\n            if (that.values[i] > that._oldValues[i]) {\n              condition = \"(oldAngle < newAngle)\";\n\n              that._renderElement(gaugeLayerStart, gaugeLayerEnd, 1, condition, i, true);\n\n              rendering = true;\n            } else {\n              if (that.values[i] < that._oldValues[i]) {\n                condition = \"(oldAngle > newAngle)\";\n\n                that._renderElement(gaugeLayerStart, gaugeLayerEnd, -1, condition, i, false);\n\n                rendering = true;\n              }\n            }\n          } else {\n            if (that.values[i] > that._oldValues[i]) {\n              condition = \"(oldAngle < newAngle)\";\n\n              that._renderElement(gaugeLayerStart, gaugeLayerEnd, 1, condition, i, true);\n\n              rendering = true;\n            } else {\n              if (that.values[i] < that._oldValues[i]) {\n                condition = \"(oldAngle > newAngle)\";\n\n                that._renderElement(gaugeLayerStart, gaugeLayerEnd, -1, condition, i, false);\n\n                rendering = true;\n              }\n            }\n          }\n\n          gaugeLayerStart = gaugeLayerEnd + that.barSpacing;\n          gaugeLayerEnd = gaugeLayerStart + that._barWidth;\n        }\n      }\n\n      if (!rendering) {\n        that._rendered();\n      }\n    },\n    clearIntervals: function clearIntervals() {\n      var that = this;\n      var intervalsArrayLength = that._intervalArray.length;\n\n      for (var i = 0; i < intervalsArrayLength; i++) {\n        clearInterval(that._intervalArray[i]);\n      }\n\n      that._intervalArray.length = 0;\n    },\n    _renderElement: function _renderElement(gaugeLayerStart, gaugeLayerEnd, amount, condition, valueIndex, lessThan) {\n      var that = this;\n      that._renderingValues++;\n      var newPieSlicePath, angleTo;\n      var oldValue = that._oldValues[valueIndex];\n      var newValue = that.values[valueIndex];\n      var newAngle = that._valuesToDegrees[valueIndex];\n      var oldAngle = that._oldValuesToDegrees[valueIndex];\n      var updatedItem = that._barGaugeSlices[valueIndex];\n\n      var animation = that._calculateAnimationInterval(valueIndex, true);\n\n      var angleDiff = Math.abs(newAngle - oldAngle);\n      var angleStepPercent = Math.abs(amount / animation.smoothCoef / angleDiff);\n      var valueStep = angleStepPercent * Math.abs(newValue - oldValue);\n      var animationInterval = animation.interval / animation.smoothCoef;\n\n      if (isNaN(that._temporaryValues[valueIndex])) {\n        that._temporaryValues[valueIndex] = oldValue;\n      }\n\n      if (isNaN(that._temporaryValuesToDegrees[valueIndex])) {\n        that._temporaryValuesToDegrees[valueIndex] = (180 - oldAngle + that._geometry.fix) % 360;\n      }\n\n      if (isNaN(that._temporaryOldAngle[valueIndex])) {\n        that._temporaryOldAngle[valueIndex] = oldAngle;\n      }\n\n      var update = function update() {\n        var newValue = that.values[valueIndex];\n        var newAngle = that._valuesToDegrees[valueIndex];\n        angleTo = 180 - oldAngle + that._geometry.fix;\n        calculateNewPieSlicePath();\n        var newCondition = false;\n\n        if (lessThan && oldAngle < newAngle) {\n          newCondition = true;\n        }\n\n        if (!lessThan && oldAngle > newAngle) {\n          newCondition = true;\n        }\n\n        var updateLabels = function updateLabels() {\n          that._removeLabels(valueIndex);\n\n          var degrees = [];\n\n          for (var m = 0; m < that._valuesToDegrees.length; m++) {\n            if (that._temporaryOldAngle[m] != undefined) {\n              degrees[m] = that._temporaryOldAngle[m];\n            } else {\n              degrees[m] = that._valuesToDegrees[m];\n            }\n          }\n\n          that._addLabels(degrees, that._temporaryValues, valueIndex);\n        };\n\n        if (newCondition && that.disabled === false && that.animationDuration != 0) {\n          updateLabels();\n          that.renderer.attr(updatedItem, {\n            d: newPieSlicePath\n          });\n\n          if (that.formatFunction) {\n            var drawColor = that._colors[valueIndex];\n            drawColor = that.formatFunction(that.values[valueIndex], valueIndex, drawColor);\n            that.renderer.attr(updatedItem, {\n              fill: drawColor,\n              stroke: drawColor\n            });\n          }\n\n          oldAngle += amount / animation.smoothCoef;\n          that._temporaryOldAngle[valueIndex] = oldAngle;\n          that._temporaryValuesToDegrees[valueIndex] = (180 - oldAngle + that._geometry.fix) % 360;\n          that._temporaryValues[valueIndex] = that._temporaryValues[valueIndex] + amount * valueStep;\n          return false;\n        } else {\n          oldAngle = newAngle;\n          angleTo = 180 - newAngle + that._geometry.fix;\n          that._temporaryOldAngle[valueIndex] = newAngle;\n          that._temporaryValuesToDegrees[valueIndex] = newAngle % 360;\n          that._temporaryValues[valueIndex] = that.values[valueIndex];\n          updateLabels();\n          createFinalPieSlicePath(angleTo, 180 - that._geometry.baseAngle + that._geometry.fix);\n          that.renderer.attr(updatedItem, {\n            d: newPieSlicePath\n          });\n\n          if (that.formatFunction) {\n            var drawColor = that._colors[valueIndex];\n            drawColor = that.formatFunction(that.values[valueIndex], valueIndex, drawColor);\n            that.renderer.attr(updatedItem, {\n              fill: drawColor,\n              stroke: drawColor\n            });\n          }\n\n          clearInterval(that._intervalArray[valueIndex]);\n          that._renderedValues++;\n\n          if (that._renderedValues === that._renderingValues) {\n            that._rendered();\n          }\n\n          return true;\n        }\n      };\n\n      if (that.animationDuration == 0) {\n        update();\n      } else {\n        var intervalFunction = function intervalFunction() {\n          clearInterval(that._intervalArray[valueIndex]);\n          var result = update();\n\n          if (!that._rendering || result) {\n            return;\n          }\n\n          var oldValue = that._oldValues[valueIndex];\n          var newValue = that.values[valueIndex];\n          var newAngle = that._valuesToDegrees[valueIndex];\n          var oldAngle = that._oldValuesToDegrees[valueIndex];\n          var updatedItem = that._barGaugeSlices[valueIndex];\n\n          var animation = that._calculateAnimationInterval(valueIndex, true);\n\n          var angleDiff = Math.abs(newAngle - oldAngle);\n          var angleStepPercent = Math.abs(amount / animation.smoothCoef / angleDiff);\n          var valueStep = angleStepPercent * Math.abs(newValue - oldValue);\n          var animationInterval = animation.interval / animation.smoothCoef;\n          that._intervalArray[valueIndex] = setInterval(intervalFunction, animationInterval);\n        };\n\n        if (!that._intervalArray[valueIndex]) {\n          that._intervalArray[valueIndex] = setInterval(intervalFunction, animationInterval);\n        }\n      }\n\n      function calculateNewPieSlicePath() {\n        var angleA = angleTo;\n        var angleB = 180 - that._geometry.baseAngle + that._geometry.fix;\n\n        if (amount === 1) {\n          if (lessThan) {\n            if (that._geometry.baseAngle < oldAngle) {\n              newPieSlicePath = $.jqx.commonRenderer.pieSlicePath(that._centerX, that._centerY, gaugeLayerStart, gaugeLayerEnd, angleA, angleB, 0);\n            } else {\n              newPieSlicePath = $.jqx.commonRenderer.pieSlicePath(that._centerX, that._centerY, gaugeLayerStart, gaugeLayerEnd, angleB, angleA, 0);\n            }\n          }\n        } else {\n          if (!lessThan) {\n            if (that._geometry.baseAngle < oldAngle) {\n              newPieSlicePath = $.jqx.commonRenderer.pieSlicePath(that._centerX, that._centerY, gaugeLayerStart, gaugeLayerEnd, angleA, angleB, 0);\n            } else {\n              newPieSlicePath = $.jqx.commonRenderer.pieSlicePath(that._centerX, that._centerY, gaugeLayerStart, gaugeLayerEnd, angleB, angleA, 0);\n            }\n          }\n        }\n      }\n\n      function createFinalPieSlicePath(angleA, angleB) {\n        if (angleA <= angleB) {\n          newPieSlicePath = $.jqx.commonRenderer.pieSlicePath(that._centerX, that._centerY, gaugeLayerStart, gaugeLayerEnd, angleA - 0.0001, angleB, 0);\n        } else {\n          newPieSlicePath = $.jqx.commonRenderer.pieSlicePath(that._centerX, that._centerY, gaugeLayerStart, gaugeLayerEnd, angleB, angleA, 0);\n        }\n      }\n    },\n    _calculateAnimationInterval: function _calculateAnimationInterval(valueIndex, redraw) {\n      var that = this;\n      var animation = {};\n      var duration = that.animationDuration;\n      var animationISeconds = duration / 1000;\n      var intervalPer1000ms = 0;\n\n      var easeInOutSine = function easeInOutSine(t, b, c, d) {\n        return -c / 2 * (Math.cos(Math.PI * t / d) - 1) + b;\n      };\n\n      if (redraw) {\n        if (that._oldValues[valueIndex] - that.values[valueIndex] !== 0) {\n          intervalPer1000ms = 1000 / Math.abs((that._oldValues[valueIndex] - that.values[valueIndex]) / (that.max - that.min) * (that._geometry.endAngle - that._geometry.startAngle));\n        }\n      } else {\n        if (that.baseValue - that.values[valueIndex] !== 0) {\n          intervalPer1000ms = 1000 / Math.abs((that.baseValue - that.values[valueIndex]) / (that.max - that.min) * (that._geometry.endAngle - that._geometry.startAngle));\n        }\n      }\n\n      animation.smoothCoef = animationISeconds || 1;\n      animation.interval = intervalPer1000ms * animationISeconds;\n      return animation;\n    },\n    _calculateLabelOffset: function _calculateLabelOffset(angle, fontSize, textWidth) {\n      var koefX, koefY;\n      var offset = {};\n\n      if (angle >= 270) {\n        koefY = -(270 - angle) / 180;\n      } else {\n        if (angle <= 90) {\n          koefY = (90 + angle) / 180;\n        } else {\n          koefY = (270 - angle) / 180;\n        }\n      }\n\n      if (angle <= 180) {\n        koefX = angle / 180;\n      } else {\n        koefX = (360 - angle) / 180;\n      }\n\n      offset.y = koefY * fontSize;\n      offset.x = koefX * textWidth;\n      return offset;\n    },\n    _drawCoordinatePlane: function _drawCoordinatePlane() {\n      var that = this;\n      var startY, endY;\n\n      if (that._title.verticalAlignment === \"top\") {\n        startY = that._title.placeholderSize;\n        endY = that.height;\n      } else {\n        startY = 0;\n        endY = that.height - that._title.placeholderSize;\n      }\n\n      if (that._coordinatePlane !== null) {\n        $(\"#\" + that.element.id + \" .jqx-bar-gauge-coordinate-plane\").remove();\n      }\n\n      that._coordinatePlane = {};\n      that._coordinatePlane.x = that.renderer.line(0, that._centerY, that.width, that._centerY, {\n        fill: \"gray\",\n        stroke: \"gray\",\n        \"stroke-width\": 1,\n        \"stroke-opacity\": 0.1\n      });\n      that._coordinatePlane.y = that.renderer.line(that._centerX, startY, that._centerX, endY, {\n        fill: \"gray\",\n        stroke: \"gray\",\n        \"stroke-width\": 1,\n        \"stroke-opacity\": 0.1\n      });\n      that.renderer.attr(that._coordinatePlane.x, {\n        \"class\": \"jqx-bar-gauge-coordinate-plane\"\n      });\n      that.renderer.attr(that._coordinatePlane.y, {\n        \"class\": \"jqx-bar-gauge-coordinate-plane\"\n      });\n    },\n    _getColorScheme: function _getColorScheme() {\n      var that = this;\n      var newColorSchemeIndex, i;\n      var colorSchemesLength = that._colorSchemes.length;\n      var totalColors = that.values.length || 1;\n      var colorSchemesCombinations = Math.floor(totalColors / that._colorSchemes[0].colors.length);\n      var colorSchemeIndex = 0;\n\n      for (i = 0; i < colorSchemesLength; i++) {\n        if (that.colorScheme === that._colorSchemes[i].name) {\n          colorSchemeIndex = i;\n        }\n      }\n\n      that._colors = that._colorSchemes[colorSchemeIndex].colors;\n\n      if (colorSchemesCombinations > 0) {\n        for (i = 0; i < colorSchemesCombinations; i++) {\n          newColorSchemeIndex = (colorSchemeIndex + i + 1) % colorSchemesLength;\n          that._colors = that._colors.concat(that._colorSchemes[newColorSchemeIndex].colors);\n        }\n      }\n    },\n    _drawLabelsLine: function _drawLabelsLine(radiusXY1, angle, valueIndex) {\n      var that = this;\n      var x1, y1, x2, y2, angleInRad, radiusXY2, color, labelLineId;\n\n      if (angle < 0) {\n        angle = 360 + angle;\n      } else {\n        if (angle > 360) {\n          angle = angle % 360;\n        }\n      }\n\n      angleInRad = (360 - angle) * Math.PI / 180;\n      radiusXY2 = radiusXY1 + that._barWidth + (that._valuesLength - valueIndex - 1) * (that._barWidth + that.barSpacing) + that._label.indent;\n      x1 = that._centerX + radiusXY1 * Math.cos(angleInRad);\n      y1 = that._centerY + radiusXY1 * Math.sin(angleInRad);\n      x2 = that._centerX + radiusXY2 * Math.cos(angleInRad);\n      y2 = that._centerY + radiusXY2 * Math.sin(angleInRad);\n      color = that._label.connectorColor || that._colors[valueIndex];\n\n      if (that.formatFunction) {\n        color = that.formatFunction(that.values[valueIndex], valueIndex, color);\n      }\n\n      if (that._ie7 || that._ie8) {\n        x1 = parseInt(x1, 10);\n        y1 = parseInt(y1, 10);\n        x2 = parseInt(x2, 10);\n        y2 = parseInt(y2, 10);\n      }\n\n      if (that._label.visible === true && that.disabled === false) {\n        that._barGaugeLabelLines[valueIndex] = that.renderer.line(x1, y1, x2, y2, {\n          fill: color,\n          stroke: color,\n          \"stroke-width\": that._label.connectorWidth\n        });\n      }\n\n      labelLineId = that.element.id + \"LabelLine\" + valueIndex;\n      that.renderer.attr(that._barGaugeLabelLines[valueIndex], {\n        id: labelLineId\n      });\n      that.renderer.attr(that._barGaugeLabelLines[valueIndex], {\n        \"class\": \"jqx-bar-gauge-label-line\"\n      });\n    },\n    _drawLabelsText: function _drawLabelsText(angle, valueIndex, text) {\n      var that = this;\n      var textSize, angleInRadians, xText, yText, offset, labelId;\n      var color = that._label.font.color || that._colors[valueIndex];\n\n      if (that.formatFunction) {\n        color = that.formatFunction(that.values[valueIndex], valueIndex, color);\n      }\n\n      var value = that._calculatePrecision(that._label.precision, that.values[valueIndex]);\n\n      if (text !== undefined) {\n        value = new Number(text).toFixed(that._label.precision);\n        value = that._calculatePrecision(that._label.precision, value);\n      }\n\n      if (that._label.formatFunction !== undefined && that._label.formatFunction !== null && typeof that._label.formatFunction === \"function\") {\n        value = that._label.formatFunction(value, valueIndex);\n      }\n\n      if (!that._cachedMeasurements) {\n        that._cachedMeasurements = [];\n      }\n\n      if (!that._cachedMeasurements[value.length]) {\n        textSize = that._measureText(value, that._label.font.size, that._label.font.family, that._label.font.weight);\n        that._cachedMeasurements[value.length] = textSize;\n      } else {\n        textSize = that._cachedMeasurements[value.length];\n      }\n\n      if (angle < 0) {\n        angle = 360 + angle;\n      } else {\n        if (angle > 360) {\n          angle = angle % 360;\n        }\n      }\n\n      angleInRadians = (360 - angle) * Math.PI / 180;\n      xText = that._centerX + (that._labelPositioningRadius + textSize.height * 0.3) * Math.cos(angleInRadians);\n      yText = that._centerY + (that._labelPositioningRadius + textSize.height * 0.3) * Math.sin(angleInRadians);\n      offset = that._calculateLabelOffset(angle, textSize.height, textSize.width);\n\n      if (that._label.visible === true && that.disabled === false) {\n        that._barGaugeLabelText[valueIndex] = that.renderer.text(value, xText - offset.x, yText - offset.y, undefined, undefined, 0, {\n          \"class\": \"jqx-bargauge-label\",\n          fill: color,\n          \"font-size\": that._label.font.size + \"px\",\n          \"font-family\": that._label.font.family,\n          \"font-weight\": that._label.font.weight\n        }, false, \"left\", \"top\", \"lefttop\");\n      }\n\n      labelId = that.element.id + \"Label\" + valueIndex;\n      that.renderer.attr(that._barGaugeLabelText[valueIndex], {\n        id: labelId\n      });\n      that.renderer.attr(that._barGaugeLabelText[valueIndex], {\n        \"class\": \"jqx-bar-gauge-label-text\"\n      });\n\n      if (that._ie7 || that._ie8) {\n        $(\"#\" + labelId + \" .jqx-bargauge-label\").css({\n          color: color,\n          \"white-space\": \"nowrap\",\n          \"font-size\": that._label.font.size + \"px\",\n          \"font-family\": that._label.font.family,\n          \"font-weight\": that._label.font.weight\n        });\n      }\n    },\n    _calculatePrecision: function _calculatePrecision(precisionBase, value) {\n      var precision;\n      precision = precisionBase + Math.abs(value).toString().split(\".\")[0].length;\n      precision = precision > 15 ? 15 : precision;\n      value = parseFloat(value).toPrecision(precision);\n      return value;\n    },\n    _createTooltip: function _createTooltip() {\n      var that = this;\n      var tooltipId = that.element.id + \"tooltip\";\n\n      that._barGaugeTooltip.attr(\"id\", tooltipId);\n\n      $(that._barGaugeTooltip).addClass(that.toThemeProperty(\"jqx-bar-gauge-tooltip\"));\n\n      if (that._tooltip.classname.length > 0) {\n        $(that._barGaugeTooltip).addClass(that.toThemeProperty(that._tooltip.classname));\n      }\n\n      $(document.body).append(that._barGaugeTooltip);\n\n      if (that._tooltip.visible === true && that.disabled === false && that._valuesLength > 0) {\n        that._addTooltipHandlers();\n      }\n    },\n    _refreshTooltipHandlers: function _refreshTooltipHandlers() {\n      var that = this;\n\n      if (that._tooltip.visible === true && that.disabled === false) {\n        that._removeTooltipHandlers();\n\n        that._addTooltipHandlers();\n      }\n    },\n    _addTooltipHandlers: function _addTooltipHandlers() {\n      var that = this;\n      var id, tooltipText;\n      that.addHandler($(\"#\" + that.element.id + \" .jqx-bar-gauge-slice\"), \"mouseenter\", function () {\n        if (that._tooltip.visible === true && that._valuesLength > 0) {\n          id = that.renderer.getAttr(this, \"id\").substr(that.element.id.length + 5);\n          tooltipText = that._calculatePrecision(that._tooltip.precision, that.values[id]);\n\n          that._barGaugeTooltip.css({\n            display: \"block\",\n            color: that._colors[id],\n            \"border-color\": that._colors[id]\n          });\n\n          if (that._tooltip.formatFunction !== undefined && that._tooltip.formatFunction !== null && typeof that._tooltip.formatFunction === \"function\") {\n            tooltipText = that._tooltip.formatFunction(tooltipText, parseInt(id));\n          }\n\n          that._barGaugeTooltip.html(tooltipText);\n\n          that._raiseEvent(\"2\", {\n            layer: id\n          });\n        }\n      });\n      that.addHandler($(\"#\" + that.element.id + \" .jqx-bar-gauge-slice\"), \"mouseleave\", function () {\n        that._barGaugeTooltip.css({\n          display: \"none\"\n        });\n\n        that._raiseEvent(\"3\", {\n          layer: id\n        });\n      });\n      that.addHandler($(\"#\" + that.element.id + \" .jqx-bar-gauge-slice\"), \"mouseup\", function () {\n        that._barGaugeTooltip.css({\n          display: \"none\"\n        });\n      });\n\n      if ($(\"#\" + that.element.id + \" .jqx-bar-gauge-slice\").length > 0) {\n        that.addHandler($(\"#\" + that.element.id + \" .jqx-bar-gauge-slice\"), \"mousemove\", function () {\n          if (that._tooltip.visible === true && that._valuesLength > 0) {\n            id = that.renderer.getAttr(this, \"id\").substr(that.element.id.length + 5);\n            tooltipText = that._calculatePrecision(that._tooltip.precision, that.values[id]);\n\n            that._barGaugeTooltip.css({\n              display: \"block\",\n              color: that._colors[id],\n              \"border-color\": that._colors[id]\n            });\n\n            if (that._tooltip.formatFunction !== undefined && that._tooltip.formatFunction !== null && typeof that._tooltip.formatFunction === \"function\") {\n              tooltipText = that._tooltip.formatFunction(tooltipText, parseInt(id));\n            }\n\n            that._barGaugeTooltip.html(tooltipText);\n          }\n        });\n      }\n\n      that.addHandler($(that.host), \"mousemove\", function (event) {\n        that._barGaugeTooltip.css({\n          top: event.pageY - 10 + \"px\",\n          left: event.pageX + 15 + \"px\"\n        });\n      });\n    },\n    _removeTooltipHandlers: function _removeTooltipHandlers() {\n      var that = this;\n\n      if (that._barGaugeSlices.length > 0) {\n        that.removeHandler($(that._barGaugeSlices), \"mouseenter\");\n        that.removeHandler($(that._barGaugeSlices), \"mouseleave\");\n        that.removeHandler($(that._barGaugeSlices), \"mouseup\");\n        that.removeHandler($(that._barGaugeSlices), \"mousemove\");\n        that.removeHandler($(\"#\" + that.element.id + \" .jqx-bar-gauge-slice\"), \"mouseenter mouseleave mouseup mousemove\");\n      }\n\n      that.removeHandler($(that.host), \"mousemove\");\n    },\n    _drawBarGaugeTitle: function _drawBarGaugeTitle() {\n      var that = this;\n      that._alignmentIE = that._alignmentIE || that._title.horizontalAlignment;\n      var drawn = 0;\n      var coefY = 0;\n      var titleParts, subTitleParts, titleTextSize, subTitleTextSize, subTitleText, titleText, subTitleId, titleId, i;\n\n      if (that._ie7 || that._ie8) {\n        that._title.horizontalAlignment = \"left\";\n      }\n\n      if (that._titleLines > 1) {\n        titleParts = that._title.text.split(\"<br>\");\n\n        for (i = 0; i < that._titleLines; i++) {\n          titleTextSize = that._measureText(titleParts[i] + \"_\", that._title.font.size, that._title.font.family, that._title.font.weight);\n          titleText = titleParts[i];\n\n          while (titleTextSize.width > that.width) {\n            titleText = titleText.slice(0, -1);\n            titleParts[i] = titleText + \"...\";\n            titleTextSize = that._measureText(titleParts[i] + \"_\", that._title.font.size, that._title.font.family, that._title.font.weight);\n          }\n        }\n\n        that._title.text = titleParts.join(\"<br>\");\n      } else {\n        titleTextSize = that._measureText(that._title.text + \"_\", that._title.font.size, that._title.font.family, that._title.font.weight);\n        titleText = that._title.text;\n\n        while (titleTextSize.width > that.width) {\n          titleText = titleText.slice(0, -1);\n          that._title.text = titleText + \"...\";\n          titleTextSize = that._measureText(that._title.text + \"_\", that._title.font.size, that._title.font.family, that._title.font.weight);\n        }\n      }\n\n      if (that._title.verticalAlignment === \"bottom\") {\n        coefY = that.height - that._title.placeholderSize;\n      }\n\n      if (that.title !== null && that.title !== undefined && that._title.text !== \"\") {\n        that._barGaugeTitle = that.renderer.text(that._title.text, that._title.margin.left, coefY + that._title.margin.top, that.width - that._title.margin.right, 0, undefined, {\n          fill: that._title.font.color,\n          \"fill-opacity\": that._title.font.opacity,\n          \"font-size\": that._title.font.size,\n          \"font-family\": that._title.font.family,\n          \"font-weight\": that._title.font.weight\n        }, false, that._title.horizontalAlignment, that._title.verticalAlignment, \"centertop\");\n        titleId = that.element.id + \"Title\";\n        that.renderer.attr(that._barGaugeTitle, {\n          id: titleId\n        });\n        that.renderer.attr(that._barGaugeTitle, {\n          \"class\": \"jqx-bar-gauge-title\"\n        });\n\n        if (that._ie7 || that._ie8) {\n          $(\"#\" + titleId + \" textbox\").css({\n            width: that.width + \"px !important\",\n            \"padding-left\": \"10px\",\n            position: \"relative\"\n          });\n          var titleLeftMargin = 0;\n\n          if (titleTextSize.width < that.width) {\n            if (that._alignmentIE === \"center\") {\n              titleLeftMargin = (that.width - titleTextSize.width) / 2;\n            } else {\n              if (that._alignmentIE === \"right\") {\n                titleLeftMargin = that.width - titleTextSize.width;\n              }\n            }\n          }\n\n          $(\"#\" + titleId + \" span\").css({\n            color: that._title.font.color,\n            \"margin-left\": titleLeftMargin + \"px\",\n            \"white-space\": \"nowrap\",\n            \"text-align\": \"center\",\n            \"font-size\": that._title.font.size + \"px\",\n            \"font-family\": that._title.font.family,\n            \"font-weight\": that._title.font.weight\n          });\n          drawn++;\n        }\n\n        if (that._title.subtitle.text !== \"\" && that._title.subtitle.text !== undefined) {\n          if (that._subTitleLines > 1) {\n            subTitleParts = that._title.subtitle.text.split(\"<br>\");\n\n            for (i = 0; i < that._subTitleLines; i++) {\n              subTitleTextSize = that._measureText(subTitleParts[i] + \"_\", that._title.subtitle.font.size, that._title.subtitle.font.family, that._title.subtitle.font.weight);\n              subTitleText = subTitleParts[i];\n\n              while (subTitleTextSize.width > that.width) {\n                subTitleText = subTitleText.slice(0, -1);\n                subTitleParts[i] = subTitleText + \"...\";\n                subTitleTextSize = that._measureText(subTitleParts[i] + \"_\", that._title.subtitle.font.size, that._title.subtitle.font.family, that._title.subtitle.font.weight);\n              }\n            }\n\n            that._title.subtitle.text = subTitleParts.join(\"<br>\");\n          } else {\n            subTitleTextSize = that._measureText(that._title.subtitle.text + \"_\", that._title.subtitle.font.size, that._title.subtitle.font.family, that._title.subtitle.font.weight);\n            subTitleText = that._title.subtitle.text;\n\n            while (subTitleTextSize.width > that.width) {\n              subTitleText = subTitleText.slice(0, -1);\n              that._title.subtitle.text = subTitleText + \"...\";\n              subTitleTextSize = that._measureText(that._title.subtitle.text + \"_\", that._title.subtitle.font.size, that._title.subtitle.font.family, that._title.subtitle.font.weight);\n            }\n          }\n\n          that._barGaugeSubTitle = that.renderer.text(that._title.subtitle.text, that._title.margin.left, coefY + that._title.font.size * that._titleLines + that._title.margin.top, that.width - that._title.margin.right, 0, undefined, {\n            fill: that._title.subtitle.font.color,\n            \"fill-opacity\": that._title.subtitle.font.opacity,\n            \"font-size\": that._title.subtitle.font.size,\n            \"font-family\": that._title.subtitle.font.family,\n            \"font-weight\": that._title.subtitle.font.weight,\n            \"margin-top\": that._title.margin.top\n          }, false, that._title.horizontalAlignment, that._title.verticalAlignment, \"centertop\");\n          subTitleId = that.element.id + \"SubTitle\";\n          that.renderer.attr(that._barGaugeSubTitle, {\n            id: subTitleId\n          });\n          that.renderer.attr(that._barGaugeSubTitle, {\n            \"class\": \"jqx-bar-gauge-subtitle\"\n          });\n\n          if (that._ie7 || that._ie8) {\n            var subTitleLeftMargin = 0;\n\n            if (subTitleTextSize.width < that.width) {\n              if (that._alignmentIE === \"center\") {\n                subTitleLeftMargin = (that.width - subTitleTextSize.width) / 2;\n              } else {\n                if (that._alignmentIE === \"right\") {\n                  subTitleLeftMargin = that.width - subTitleTextSize.width;\n                }\n              }\n            }\n\n            $(\"#\" + subTitleId + \" textbox\").css({\n              width: that.width + \"px !important\",\n              left: subTitleLeftMargin + \"px !important\",\n              position: \"relative\"\n            });\n            $(\"#\" + subTitleId + \" span\").css({\n              width: \"100%\",\n              color: that._title.subtitle.font.color,\n              \"margin-left\": subTitleLeftMargin + \"px\",\n              \"white-space\": \"nowrap\",\n              \"text-align\": \"center\",\n              \"font-size\": that._title.subtitle.font.size + \"px\",\n              \"font-family\": that._title.subtitle.font.family,\n              \"font-weight\": that._title.subtitle.font.weight\n            });\n          }\n        }\n      }\n    },\n    _measureText: function _measureText(text, fontSize, fontFamily, fontWeight) {\n      var that = this;\n      var measuredTextProperties = {};\n\n      if (!$(\"#\" + that._measuredTextId).length) {\n        that._measuredText.attr(\"id\", that._measuredTextId);\n\n        $(that.host).append(that._measuredText);\n\n        that._measuredText.css({\n          \"z-index\": -999999,\n          \"white-space\": \"nowrap\",\n          \"font-size\": fontSize + \"px\",\n          \"font-family\": fontFamily,\n          \"font-weight\": fontWeight\n        });\n      }\n\n      if (that._measuredText[0].style.fontSize != fontSize + \"px\") {\n        that._measuredText[0].style.fontSize = fontSize + \"px\";\n      }\n\n      if (that._measuredText[0].style.fontFamily != fontFamily + \"px\") {\n        that._measuredText[0].style.fontFamily = fontFamily;\n      }\n\n      if (that._measuredText[0].style.fontWeight != fontWeight) {\n        that._measuredText[0].style.fontWeight = fontWeight + \"px\";\n      }\n\n      that._measuredText.text(text);\n\n      measuredTextProperties.width = that._measuredText[0].offsetWidth;\n      measuredTextProperties.height = that._measuredText[0].offsetHeight;\n      return measuredTextProperties;\n    },\n    _calculateBarGaugeRadius: function _calculateBarGaugeRadius() {\n      var that = this;\n\n      if (that.width > that.height - that._title.placeholderSize) {\n        that._barGaugeRadius = (that.height - that._title.placeholderSize) / 2;\n      } else {\n        that._barGaugeRadius = that.width / 2;\n      }\n    },\n    _addCSS: function _addCSS() {\n      var that = this;\n      $(that.host).addClass(that.toThemeProperty(\"jqx-widget\"));\n      $(that.host).addClass(that.toThemeProperty(\"jqx-bar-gauge\"));\n      $(that.host).addClass(that.toThemeProperty(\"jqx-widget-content\"));\n\n      if (that.disabled) {\n        $(that.host).addClass(that.toThemeProperty(\"jqx-fill-state-disabled\"));\n      }\n    },\n    _rendered: function _rendered() {\n      var that = this;\n\n      if (that._rendering === true) {\n        if (that.rendered !== null && typeof that.rendered === \"function\") {\n          that.rendered();\n        }\n\n        that._rendering = false;\n        that.clearIntervals();\n        that._temporaryOldAngle.length = 0;\n        that._temporaryValuesToDegrees.length = 0;\n        that._temporaryValues.length = 0;\n\n        that._raiseEvent(\"0\");\n\n        that._raiseEvent(\"5\");\n      }\n    },\n    _render: function _render() {\n      var that = this;\n\n      that._removeAllGraphicElements();\n\n      if (that.values.length > 0) {\n        if (that.animationDuration === 0 || that._ie8 || that._ie7) {\n          that._drawStaticBarGauge();\n        } else {\n          that._drawDynamicBarGauge();\n        }\n      } else {\n        that._getLiquidDimensions();\n\n        that.host.width(that.width);\n        that.host.height(that.height);\n\n        that._validateValues();\n\n        that._transformValuesToAngles();\n\n        that._drawStaticBarGauge();\n      }\n    },\n    render: function render() {\n      var that = this;\n      that.clearIntervals();\n\n      that._getLiquidDimensions();\n\n      that.host.width(that.width);\n      that.host.height(that.height);\n\n      that._validateValues();\n\n      that._transformValuesToAngles();\n\n      that._getColorScheme();\n\n      if (that._rendering !== true) {\n        that._render();\n      } else {\n        that._staticRefresh();\n\n        that._render();\n      }\n    },\n    refresh: function refresh(initialRefresh) {\n      var that = this;\n\n      if (initialRefresh !== true) {\n        that.render();\n      }\n    },\n    _removeAllGraphicElements: function _removeAllGraphicElements() {\n      var that = this;\n\n      that._removeLabels();\n\n      that._removeBarGaugeSlices();\n\n      that._removeBarGaugeTitle();\n\n      that._removeBarGaugeSubTitle();\n    },\n    _drawStaticBarGauge: function _drawStaticBarGauge() {\n      var that = this;\n      that._rendering = true;\n\n      that._drawBarGaugeTitle();\n\n      that._drawBarGaugeLayout();\n\n      if (!that.disabled) {\n        that._getLiquidDimensions();\n\n        that.host.width(that.width);\n        that.host.height(that.height);\n\n        that._validateValues();\n\n        that._measureRadius();\n\n        that._drawStaticBarGaugeElementsWithBase();\n\n        that._rendered();\n      } else {\n        that._rendered();\n      }\n    },\n    _drawDynamicBarGauge: function _drawDynamicBarGauge() {\n      var that = this;\n\n      that._drawBarGaugeTitle();\n\n      that._drawBarGaugeLayout();\n\n      if (!that.disabled) {\n        that._drawBarGaugeElementsWithBase();\n      } else {\n        that._rendered();\n      }\n    },\n    val: function val(newValues) {\n      var that = this;\n\n      if (newValues !== null && newValues !== undefined && typeof newValues === \"object\" && Object.keys(newValues).length > 0) {\n        that._raiseEvent(\"4\", \"api\");\n\n        if (newValues.length != that.values.length) {\n          that.values = newValues;\n          that.render();\n        } else {\n          that._redrawWithNewValuesArray(newValues, that.values);\n        }\n      } else {\n        if (newValues !== null && newValues !== undefined && typeof newValues === \"object\" && newValues.length === 0) {\n          that._raiseEvent(\"4\");\n\n          that._removeLabels();\n\n          that._removeBarGaugeSlices();\n\n          that._transformValuesToAngles();\n\n          that._drawEmptyBarGauge();\n\n          that._removeLabels();\n\n          that.values.length = 0;\n\n          that._refreshTooltipHandlers();\n        }\n      }\n\n      return that.values;\n    },\n    _redrawWithNewValuesArray: function _redrawWithNewValuesArray(newValues, oldValues) {\n      var that = this;\n      var val, i;\n\n      if (that._rendering === false) {\n        that._userValues = newValues.slice();\n\n        if (!!oldValues) {\n          that._oldValues = oldValues.slice();\n        } else {\n          that._oldValues = that.values.slice();\n        }\n\n        that._oldValuesToDegrees = that._valuesToDegrees.slice();\n        that._oldValuesLength = that._valuesLength;\n\n        if (Object.keys(newValues).length > 1) {\n          that.values = newValues.slice();\n        } else {\n          if (newValues[0] === null || newValues[0] === undefined) {\n            that.values = [];\n          } else {\n            that.values = [];\n            that.values[0] = parseFloat(newValues);\n          }\n        }\n\n        that._lastChange = new Date();\n      } else {\n        if (that._rendering === true) {\n          that._userValues = newValues.slice();\n          that._oldValues.length = 0;\n          that._oldValuesToDegrees.length = 0;\n\n          for (i = 0; i < that.values.length; i++) {\n            that._oldValues[i] = that._temporaryValues[i] != undefined ? that._temporaryValues[i] : that.values[i];\n            that._oldValuesToDegrees[i] = that._temporaryValuesToDegrees[i] != undefined ? that._temporaryValuesToDegrees[i] : that._valuesToDegrees[i];\n          }\n\n          that._oldValuesLength = that.values.length;\n\n          if (newValues.length > 1) {\n            that.values = newValues.slice();\n          } else {\n            if (newValues[0] === null || newValues[0] === undefined) {\n              that.values = [];\n            } else {\n              that.values = [];\n              that.values[0] = parseFloat(newValues);\n            }\n          }\n        } else {\n          if (newValues === null || newValues === undefined) {\n            that.values = [];\n          } else {\n            if (typeof newValues === \"string\" || typeof newValues === \"number\") {\n              that.values = [];\n              that.values[0] = parseFloat(newValues);\n            } else {\n              return that.values;\n            }\n          }\n        }\n      }\n\n      that._valuesLength = that.values.length;\n\n      that._getColorScheme();\n\n      if (that._valuesLength > that._oldValuesLength) {\n        for (var v = that._oldValuesLength; v < that._valuesLength; v++) {\n          that._oldValuesToDegrees[v] = that._geometry.baseAngle;\n          that._oldValues[v] = that.baseValue;\n        }\n      }\n\n      for (i = 0; i < that._valuesLength; i++) {\n        if (that.values[i] < that.min) {\n          that.values[i] = that.min;\n        } else {\n          if (that.values[i] > that.max) {\n            that.values[i] = that.max;\n          }\n        }\n\n        var res = that.values[i];\n\n        if (res == 0) {\n          res = 0.03;\n        }\n\n        val = (res - that.min) / (that.max - that.min) * (that._geometry.endAngle - that._geometry.startAngle) + that._geometry.startAngle;\n        that._valuesToDegrees[i] = val % 360;\n      }\n\n      that._renderElements();\n\n      that._refreshTooltipHandlers();\n\n      that._raiseEvent(\"1\");\n    },\n    _staticRefresh: function _staticRefresh() {\n      var that = this;\n      var animationDuration = that.animationDuration;\n\n      if (typeof that.width === \"string\" && that.width.indexOf(\"%\") !== -1) {\n        that._dimensions.width = that.width;\n      }\n\n      if (typeof that.height === \"string\" && that.height.indexOf(\"%\") !== -1) {\n        that._dimensions.height = that.height;\n      }\n\n      that._getLiquidDimensions();\n\n      that.host.width(that.width);\n      that.host.height(that.height);\n      $(\"#\" + that.element.id + \" .chartContainer\").width(that.width);\n      $(\"#\" + that.element.id + \" .chartContainer\").height(that.height);\n\n      that._removeBarGaugeTitle();\n\n      that._removeBarGaugeSubTitle();\n\n      that._validateGeometry();\n\n      that._validateTitle();\n\n      that._validateLabel();\n\n      that._validateValues();\n\n      that._validateTooltip();\n\n      that._measureRadius();\n\n      that.animationDuration = 0;\n\n      that._render();\n\n      that.animationDuration = animationDuration;\n    },\n    propertyChangedHandler: function propertyChangedHandler(object, key, oldvalue, value) {\n      var that = object;\n      var animationDuration, i;\n      that._cachedMeasurements = [];\n\n      if (object.isInitialized === undefined || object.isInitialized === null || object.isInitialized === false) {\n        return;\n      }\n\n      if (!that.ie7 && object.batchUpdate && object.batchUpdate.width && object.batchUpdate.height && Object.keys(object.batchUpdate).length === 2) {\n        return;\n      }\n\n      if (value !== oldvalue || key === \"colorScheme\" || key === \"tooltip\") {\n        animationDuration = that.animationDuration;\n        that._titleTemplate = that._title;\n        that._labelTemplate = that._label;\n        that._tooltipTemplate = that._tooltip;\n\n        switch (key) {\n          case \"width\":\n          case \"height\":\n            that._staticRefresh();\n\n            break;\n\n          case \"values\":\n            that.values = oldvalue;\n            that.val(value);\n            break;\n\n          case \"animationDuration\":\n            break;\n\n          case \"disabled\":\n            if (that.disabled) {\n              $(that.host).addClass(that.toThemeProperty(\"jqx-fill-state-disabled\"));\n            } else {\n              $(that.host).removeClass(that.toThemeProperty(\"jqx-fill-state-disabled\"));\n            }\n\n            that._render();\n\n            break;\n\n          case \"geometry\":\n          case \"min\":\n          case \"baseValue\":\n          case \"max\":\n          case \"barSpacing\":\n          case \"startAngle\":\n          case \"endAngle\":\n          case \"relativeInnerRadius\":\n            that.geometry.startAngle = that.startAngle;\n            that.geometry.endAngle = that.endAngle;\n            that.values = that._userValues.slice();\n\n            that._validateValues();\n\n            that._transformValuesToAngles();\n\n            that._render();\n\n            break;\n\n          case \"tooltip\":\n            that._validateTooltip();\n\n            break;\n\n          case \"rendered\":\n            break;\n\n          case \"backgroundColor\":\n            that._backgroundColor = that._validateColor(that.backgroundColor, that._backgroundColor);\n\n            if (that._ie7 || that._ie8) {\n              for (i = 0; i < that._valuesLength; i++) {\n                that.renderer.attr(that._barGaugeBackgroundSlices[i], {\n                  fillcolor: that._backgroundColor,\n                  strokecolor: that._backgroundColor,\n                  \"stroke-width\": that._barGaugeSlicesStrokeWidth\n                });\n              }\n            } else {\n              $(\"#\" + that.element.id + \" .jqx-bar-gauge-background-slice\").attr({\n                fill: that._backgroundColor,\n                stroke: that._backgroundColor,\n                \"stroke-width\": that._barGaugeSlicesStrokeWidth\n              });\n            }\n\n            break;\n\n          case \"customColorScheme\":\n            that._attachCustomColors();\n\n            break;\n\n          case \"colorScheme\":\n            var connectorColor, labelColor;\n\n            that._getColorScheme();\n\n            for (i = 0; i < that._valuesLength; i++) {\n              connectorColor = that._label.connectorColor || that._colors[i];\n              labelColor = that._label.font.color || that._colors[i];\n              var drawColor = that._colors[i];\n\n              if (that.useGradient) {\n                var stops = [[0, 1.4], [100, 1]];\n                drawColor = that.renderer._toLinearGradient(drawColor, true, stops);\n              }\n\n              that.renderer.attr(that._barGaugeSlices[i], {\n                fill: drawColor\n              });\n              that.renderer.attr(that._barGaugeLabelLines[i], {\n                fill: connectorColor,\n                stroke: connectorColor\n              });\n              that.renderer.attr(that._barGaugeLabelText[i], {\n                fill: labelColor\n              });\n\n              if (that._ie7 || that._ie8) {\n                that.renderer.attr(that._barGaugeSlices[i], {\n                  fillcolor: that._colors[i],\n                  strokecolor: that._colors[i],\n                  \"stroke-width\": that._barGaugeSlicesStrokeWidth\n                });\n                that.renderer.attr(that._barGaugeLabelLines[i], {\n                  fillcolor: connectorColor,\n                  strokecolor: connectorColor\n                });\n                var labelId = that.element.id + \"Label\" + i;\n                $(\"#\" + labelId + \" .jqx-bargauge-label\").css({\n                  color: labelColor\n                });\n              }\n            }\n\n            break;\n\n          default:\n            that._staticRefresh();\n\n            break;\n        }\n      }\n    },\n    _compareArrays: function _compareArrays(arr1, arr2) {\n      var arr1Length = arr1.length,\n          arr2Length = arr2.length;\n\n      if (arr1Length !== arr2Length) {\n        return false;\n      } else {\n        for (var i = 0; i < arr1Length; i++) {\n          if (arr1[i] !== arr2[i]) {\n            return false;\n          }\n        }\n      }\n\n      return true;\n    },\n    _addIEPolyfills: function _addIEPolyfills() {\n      if (!Object.keys) {\n        Object.keys = function () {\n          var hasOwnPropertyLocal = Object.prototype.hasOwnProperty,\n              hasDontEnumBug = !{\n            toString: null\n          }.propertyIsEnumerable(\"toString\"),\n              dontEnums = [\"toString\", \"toLocaleString\", \"valueOf\", \"hasOwnProperty\", \"isPrototypeOf\", \"propertyIsEnumerable\", \"constructor\"],\n              dontEnumsLength = dontEnums.length;\n          return function (obj) {\n            if (typeof obj !== \"object\" && (typeof obj !== \"function\" || obj === null)) {\n              throw new TypeError(\"Object.keys called on non-object\");\n            }\n\n            var result = [],\n                prop,\n                i;\n\n            for (prop in obj) {\n              if (hasOwnPropertyLocal.call(obj, prop)) {\n                result.push(prop);\n              }\n            }\n\n            if (hasDontEnumBug) {\n              for (i = 0; i < dontEnumsLength; i++) {\n                if (hasOwnPropertyLocal.call(obj, dontEnums[i])) {\n                  result.push(dontEnums[i]);\n                }\n              }\n            }\n\n            return result;\n          };\n        }();\n      }\n    },\n    destroy: function destroy() {\n      var that = this;\n      $(\"#\" + that._measuredTextId).remove();\n      that.renderer.clear();\n      that.renderer = null;\n\n      that._removeEventHandlers();\n\n      that._removeTooltipHandlers();\n\n      that.host.children().remove();\n      that.host.removeData();\n      that.host.removeClass();\n      that.host.remove();\n      that.host = null;\n      that.element = null;\n      delete that.element;\n      delete that.host;\n    },\n    _addEventHandlers: function _addEventHandlers() {\n      var that = this;\n      that.addHandler($(that.host), \"drawStart\", function () {});\n      that.addHandler($(that.host), \"drawEnd\", function () {\n        that._refreshTooltipHandlers();\n      });\n      that.addHandler($(window), \"resize.jqxBarGauge\" + that.host[0].id, function () {\n        var isPercentage = false;\n\n        if (that._dimensions.width && that._dimensions.width.toString().indexOf(\"%\") >= 0) {\n          isPercentage = true;\n        }\n\n        if (that._dimensions.height && that._dimensions.height.toString().indexOf(\"%\") >= 0) {\n          isPercentage = true;\n        }\n\n        if (isPercentage) {\n          that._staticRefresh();\n        }\n      });\n    },\n    _removeEventHandlers: function _removeEventHandlers() {\n      var that = this;\n      that.removeHandler($(that.host), \"drawStart\");\n      that.removeHandler($(that.host), \"drawEnd\");\n      that.removeHandler($(window), \"resize.jqxBarGauge\" + that.host[0].id);\n    },\n    _refreshEventHandlers: function _refreshEventHandlers() {\n      var that = this;\n\n      that._removeEventHandlers();\n\n      that._addEventHandlers();\n    },\n    _raiseEvent: function _raiseEvent(eventId, data) {\n      var that = this;\n      var event = $.Event(that._events[eventId]);\n      event.args = data;\n      return that.host.trigger(event);\n    },\n    _getEvent: function _getEvent(event) {\n      var that = this;\n\n      if (that._isTouchDevice) {\n        return that._touchEvents[event];\n      } else {\n        return event;\n      }\n    }\n  });\n})(jqxBaseFramework);","map":null,"metadata":{},"sourceType":"script"}
{"ast":null,"code":"/*\r\njQWidgets v9.0.0 (2020-Jan)\r\nCopyright (c) 2011-2020 jQWidgets.\r\nLicense: https://jqwidgets.com/license/\r\n*/\n\n/* eslint-disable */\n(function (b) {\n  var a = 0;\n  b.jqx.jqxWidget(\"jqxScrollView\", \"\", {});\n  b.extend(b.jqx._jqxScrollView.prototype, {\n    defineInstance: function defineInstance() {\n      var c = {\n        width: 320,\n        height: 320,\n        buttonsOffset: [0, 0],\n        moveThreshold: 0.5,\n        currentPage: 0,\n        animationDuration: 300,\n        showButtons: true,\n        bounceEnabled: true,\n        slideShow: false,\n        slideDuration: 3000,\n        disabled: false,\n        _mouseDown: false,\n        _movePermited: false,\n        _startX: -1,\n        _startOffset: -1,\n        _lastOffset: -1,\n        _events: [\"pageChanged\"],\n        _eventsMap: {\n          mousedown: b.jqx.mobile.getTouchEventName(\"touchstart\"),\n          mouseup: b.jqx.mobile.getTouchEventName(\"touchend\"),\n          mousemove: b.jqx.mobile.getTouchEventName(\"touchmove\")\n        }\n      };\n\n      if (this === b.jqx._jqxScrollView.prototype) {\n        return c;\n      }\n\n      b.extend(true, this, c);\n      return c;\n    },\n    createInstance: function createInstance() {\n      a += 1;\n      this._instanceId = a;\n      this._isTouchDevice = b.jqx.mobile.isTouchDevice();\n      var c = this;\n      b.jqx.utilities.resize(this.host, function () {\n        c.refresh();\n      });\n    },\n    resize: function resize(d, c) {\n      this.width = d;\n      this.height = c;\n      this.refresh();\n    },\n    refresh: function refresh() {\n      this.host.width(this.width);\n      this.host.height(this.height);\n\n      this._render();\n\n      this._performLayout();\n\n      if (this.moveThreshold.toString().indexOf(\"%\") >= 0) {\n        this.moveThreshold = parseInt(this.moveThreshold, 10) / 100;\n      }\n\n      this._refreshPages();\n\n      this._refreshButtons();\n\n      this._removeEventListeners();\n\n      this._addEventListeners();\n\n      this._changePage(this.currentPage, false, 0);\n\n      if (this.slideShow) {\n        var c = this;\n        this.slideShowTimer = setInterval(function () {\n          if (c.currentPage >= c._pages.length - 1) {\n            c._changePage(0, true, c.animationDuration);\n          } else {\n            c._changePage(c.currentPage + 1, true, c.animationDuration);\n          }\n        }, this.slideDuration);\n      } else {\n        if (this.slideShowTimer != undefined) {\n          clearInterval(this.slideShowTimer);\n        }\n      }\n    },\n    destroy: function destroy() {\n      this.host.remove();\n    },\n    _getEvent: function _getEvent(c) {\n      if (this._isTouchDevice) {\n        return this._eventsMap[c];\n      }\n\n      return c;\n    },\n    _eventNamespace: function _eventNamespace() {\n      return \".scrollview\" + this._instanceId;\n    },\n    _removeEventListeners: function _removeEventListeners() {\n      this.removeHandler(this._innerWrapper);\n      this.removeHandler(this.host, this._getEvent(\"mousemove\") + this._eventNamespace());\n      this.removeHandler(b(document), this._getEvent(\"mouseup\") + this._eventNamespace());\n    },\n    _getCoordinate: function _getCoordinate(c, d) {\n      if (this._isTouchDevice) {\n        var e = b.jqx.position(c);\n\n        if (d == \"pageX\") {\n          return e.left;\n        }\n\n        if (d == \"pageY\") {\n          return e.top;\n        }\n\n        if (c.originalEvent.touches) {\n          return c.originalEvent.touches[0][d];\n        }\n      }\n\n      return c[d];\n    },\n    _draggedRight: function _draggedRight() {\n      if (this.currentPage > 0) {\n        var e = this.currentPage - 1,\n            d = b(this._pages[e]),\n            c = d.offset().left + d.outerWidth(),\n            f = c - this.host.offset().left;\n\n        if (f >= this.host.width() * this.moveThreshold) {\n          this.changePage(e);\n          return true;\n        }\n      }\n\n      return false;\n    },\n    _draggedLeft: function _draggedLeft() {\n      if (this.currentPage + 1 < this._pages.length) {\n        var d = this.currentPage + 1,\n            c = b(this._pages[d]),\n            e = this.host.width() - (c.offset().left - this.host.offset().left);\n\n        if (e >= this.host.width() * this.moveThreshold) {\n          this.changePage(d);\n          return true;\n        }\n      }\n\n      return false;\n    },\n    _dropTarget: function _dropTarget() {\n      var c;\n\n      if (this._movedLeft) {\n        c = this._draggedLeft();\n      } else {\n        c = this._draggedRight();\n      }\n\n      if (!c) {\n        this.changePage(this.currentPage, false);\n      }\n    },\n    _scrollEnabled: function _scrollEnabled(c) {\n      if (!this._mouseDown) {\n        return false;\n      }\n\n      if (!this._movePermited) {\n        if (Math.abs(this._getCoordinate(c, \"pageX\") - this._startX) >= 15) {\n          this._movePermited = true;\n        }\n      }\n\n      return this._movePermited;\n    },\n    _setMoveDirection: function _setMoveDirection(c) {\n      if (this._lastOffset > c) {\n        this._movedLeft = true;\n      } else {\n        this._movedLeft = false;\n      }\n    },\n    _getBounceOffset: function _getBounceOffset(d) {\n      var c = -(this._innerWrapper.width() - this.host.width());\n\n      if (d > 0) {\n        d = 0;\n      } else {\n        if (d < c) {\n          d = c;\n        }\n      }\n\n      return d;\n    },\n    _addEventListeners: function _addEventListeners() {\n      var c = this;\n      this.addHandler(this._innerWrapper, this._getEvent(\"mousedown\") + this._eventNamespace(), function (g) {\n        c._mouseDown = true;\n        c._startX = c._getCoordinate(g, \"pageX\");\n        c._startOffset = c._lastOffset = parseInt(c._innerWrapper.css(\"margin-left\"), 10);\n      });\n      this.addHandler(this.host, \"dragstart\", function () {\n        return false;\n      });\n      this.addHandler(this.host, this._getEvent(\"mousemove\") + this._eventNamespace(), function (g) {\n        if (c._scrollEnabled(g)) {\n          var h = c._startOffset + c._getCoordinate(g, \"pageX\") - c._startX;\n\n          if (!c.bounceEnabled) {\n            h = c._getBounceOffset(h);\n          }\n\n          c._innerWrapper.css(\"margin-left\", h);\n\n          c._setMoveDirection(h);\n\n          c._lastOffset = h;\n          g.preventDefault();\n          return false;\n        }\n\n        return true;\n      });\n      this.addHandler(b(document), this._getEvent(\"mouseup\") + this._eventNamespace(), function (g) {\n        if (c._movePermited) {\n          c._dropTarget();\n        }\n\n        c._movePermited = false;\n        c._mouseDown = false;\n      });\n\n      try {\n        if (document.referrer != \"\" || window.frameElement) {\n          if (window.top != null) {\n            if (window.parent && document.referrer) {\n              var f = document.referrer;\n            }\n          }\n\n          if (f.indexOf(document.location.host) != -1) {\n            var e = function e(g) {\n              if (c._movePermited) {\n                c._dropTarget();\n              }\n\n              c._movePermited = false;\n              c._mouseDown = false;\n            };\n\n            if (window.top.document.addEventListener) {\n              window.top.document.addEventListener(\"mouseup\", e, false);\n            } else {\n              if (window.top.document.attachEvent) {\n                window.top.document.attachEvent(\"onmouseup\", e);\n              }\n            }\n          }\n        }\n      } catch (d) {}\n    },\n    _render: function _render() {\n      this.host.addClass(this.toThemeProperty(\"jqx-scrollview\"));\n      this.host.css({\n        overflow: \"hidden\",\n        position: \"relative\"\n      });\n    },\n    _performLayout: function _performLayout() {\n      this.host.css({\n        width: this.width,\n        height: this.height\n      });\n    },\n    _renderPages: function _renderPages() {\n      if (!this._innerWrapper) {\n        this._innerWrapper = b(\"<div/>\");\n        this.host.wrapInner(this._innerWrapper);\n        this._innerWrapper = this.host.children().first();\n      }\n\n      this._innerWrapper.addClass(this.toThemeProperty(\"jqx-scrollview-inner-wrapper\"));\n\n      this._innerWrapper.height(this.host.height());\n    },\n    _refreshPage: function _refreshPage(c) {\n      c.addClass(this.toThemeProperty(\"jqx-scrollview-page\"));\n\n      this._performPageLayout(c);\n    },\n    _refreshPages: function _refreshPages() {\n      var c = this,\n          d = 0;\n\n      this._renderPages();\n\n      this._pages = this._innerWrapper.children();\n\n      this._pages.each(function () {\n        c._refreshPage(b(this));\n\n        d += b(this).outerWidth(true);\n      });\n\n      this._innerWrapper.width(d);\n    },\n    _performPageLayout: function _performPageLayout(c) {\n      c.css(\"float\", \"left\");\n      c.width(this.host.width());\n      c.height(this.host.height());\n    },\n    _refreshButtons: function _refreshButtons() {\n      this._renderButtons();\n\n      this._removeButtonsEventListeners();\n\n      this._addButtonsEventListeners();\n\n      this._performButtonsLayout();\n    },\n    _removeButtonsEventListeners: function _removeButtonsEventListeners() {\n      var c = this;\n\n      this._buttonsContainer.children().each(function () {\n        c.removeHandler(b(this));\n      });\n    },\n    _addButtonsEventListeners: function _addButtonsEventListeners() {\n      var c = this;\n\n      this._buttonsContainer.children().each(function (d) {\n        c.addHandler(b(this), \"click\", function () {\n          c.changePage(d);\n        });\n      });\n    },\n    _performButtonsLayout: function _performButtonsLayout() {\n      var d = (this.host.width() - this._buttonsContainer.width()) / 2;\n      var c = this._buttonsContainer.outerHeight() != 0 ? this._buttonsContainer.outerHeight() : 14;\n\n      this._buttonsContainer.css({\n        position: \"absolute\",\n        left: d + parseInt(this.buttonsOffset[0], 10),\n        top: this.host.height() - 2 * c + parseInt(this.buttonsOffset[1], 10) - 1\n      });\n    },\n    _renderButtons: function _renderButtons() {\n      if (this._buttonsContainer) {\n        this._buttonsContainer.remove();\n      }\n\n      var e, d;\n      this._buttons = [];\n      this._buttonsContainer = b(\"<span/>\");\n\n      for (var c = 0; c < this._pages.length; c += 1) {\n        d = b('<span class=\"' + this.toThemeProperty(\"jqx-scrollview-button\") + \" \" + this.toThemeProperty(\"jqx-fill-state-normal\") + '\"></span>');\n\n        this._buttonsContainer.append(d);\n\n        this._buttons[c] = d;\n      }\n\n      this._buttonsContainer.appendTo(this.host);\n\n      if (!this.showButtons) {\n        this._buttonsContainer.hide();\n      }\n    },\n    _raiseEvent: function _raiseEvent(c, e) {\n      var d = new b.Event(this._events[c]);\n      d.args = e;\n      return this.host.trigger(d);\n    },\n    _swapButtons: function _swapButtons(c, d) {\n      this._buttons[c].removeClass(this.toThemeProperty(\"jqx-scrollview-button-selected\"));\n\n      this._buttons[c].removeClass(this.toThemeProperty(\"jqx-fill-state-pressed\"));\n\n      this._buttons[d].addClass(this.toThemeProperty(\"jqx-scrollview-button-selected\"));\n\n      this._buttons[d].addClass(this.toThemeProperty(\"jqx-fill-state-pressed\"));\n    },\n    _changePage: function _changePage(d, f, i) {\n      if (this.disabled) {\n        return;\n      }\n\n      var h = b(this._pages[d]),\n          g = (this.host.width() - h.width()) / 2,\n          e = h.offset().left - this._innerWrapper.offset().left - g,\n          j = this.currentPage,\n          c = this;\n\n      if (typeof i === \"undefined\") {\n        i = this.animationDuration;\n      }\n\n      this._innerWrapper.stop();\n\n      this._swapButtons(this.currentPage, d);\n\n      this.currentPage = d;\n\n      this._innerWrapper.animate({\n        marginLeft: -e\n      }, i, function () {\n        if (f) {\n          c._raiseEvent(0, {\n            currentPage: d,\n            oldPage: j\n          });\n        }\n      });\n    },\n    propertyChangedHandler: function propertyChangedHandler(c, d, f, e) {\n      if (d === \"currentPage\") {\n        c.currentPage = f;\n        c.changePage(e);\n      } else {\n        if (/(buttonsOffset|width|height)/.test(d)) {\n          c.refresh();\n        } else {\n          if (d === \"showButtons\") {\n            if (!e) {\n              c._buttonsContainer.css(\"display\", \"none\");\n            } else {\n              c._buttonsContainer.css(\"display\", \"block\");\n            }\n\n            return;\n          } else {\n            if (d == \"slideShow\") {\n              c.refresh();\n            }\n          }\n        }\n      }\n    },\n    changePage: function changePage(c) {\n      if (c >= this._pages.length || c < 0) {\n        throw new Error(\"Invalid index!\");\n      }\n\n      this._changePage(c, true);\n    },\n    forward: function forward() {\n      if (this.currentPage + 1 < this._pages.length) {\n        this.changePage(this.currentPage + 1);\n      }\n    },\n    back: function back() {\n      if (this.currentPage - 1 >= 0) {\n        this.changePage(this.currentPage - 1);\n      }\n    }\n  });\n})(jqxBaseFramework);","map":null,"metadata":{},"sourceType":"script"}
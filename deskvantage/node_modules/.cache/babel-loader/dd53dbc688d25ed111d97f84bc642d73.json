{"ast":null,"code":"\"use strict\";\n\nvar __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar lodash_1 = require(\"lodash\");\n\nvar React = require(\"react\");\n\nvar ReactDOM = require(\"react-dom\");\n\nvar uuid_1 = require(\"uuid\");\n\nvar CanvasContext_1 = require(\"../Canvas/CanvasContext\");\n\nvar Port_default_1 = require(\"./Port.default\");\n/** Construct the composed path by traversing parentElements */\n\n\nvar composedPath = function (el) {\n  var path = [];\n\n  while (el) {\n    path.push(el);\n    el = el.parentElement;\n  }\n\n  return path;\n};\n\nvar PortWrapper =\n/** @class */\nfunction (_super) {\n  __extends(PortWrapper, _super);\n\n  function PortWrapper() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n\n    _this.nodeRef = React.createRef();\n\n    _this.onMouseDown = function (startEvent) {\n      var _a = _this.props,\n          offset = _a.offset,\n          node = _a.node,\n          port = _a.port,\n          onLinkStart = _a.onLinkStart,\n          onLinkCancel = _a.onLinkCancel,\n          onLinkComplete = _a.onLinkComplete,\n          onLinkMove = _a.onLinkMove,\n          config = _a.config;\n      var linkId = uuid_1.v4();\n      var fromNodeId = node.id;\n      var fromPortId = port.id; // Create the move handler\n      // This will update the position as the mouse moves\n\n      var mouseMoveHandler = function (e) {\n        var _a = _this.context,\n            offsetX = _a.offsetX,\n            offsetY = _a.offsetY;\n        onLinkMove({\n          config: config,\n          linkId: linkId,\n          startEvent: startEvent,\n          fromNodeId: fromNodeId,\n          fromPortId: fromPortId,\n          toPosition: {\n            x: e.clientX - offsetX - offset.x,\n            y: e.clientY - offsetY - offset.y\n          }\n        });\n      }; // Create and bind the mouse up handler\n      // This is used to check if the link is complete or cancelled\n\n\n      var mouseUpHandler = function (e) {\n        // We traverse up the event path until we find an element with 'data-port-id' and data-node-id'\n        // e.toElement cannot be used because it may be a child element of the port\n        var path = composedPath(e.target);\n        var portEl = path.find(function (el) {\n          var toPortId = el.getAttribute && el.getAttribute('data-port-id');\n          var toNodeId = el.getAttribute && el.getAttribute('data-node-id');\n          return !!(toPortId && toNodeId);\n        }); // If both node-id and port-id are defined as data attributes, we are mouse-upping\n        // on another port. Run the success handler\n\n        if (portEl) {\n          var toPortId = portEl.getAttribute('data-port-id');\n          var toNodeId = portEl.getAttribute('data-node-id');\n          onLinkComplete({\n            config: config,\n            linkId: linkId,\n            startEvent: startEvent,\n            fromNodeId: fromNodeId,\n            fromPortId: fromPortId,\n            toNodeId: toNodeId,\n            toPortId: toPortId\n          });\n        } else {\n          onLinkCancel({\n            config: config,\n            linkId: linkId,\n            startEvent: startEvent,\n            fromNodeId: fromNodeId,\n            fromPortId: fromPortId\n          });\n        } // Remove the listeners if the link is complete or canceled\n\n\n        window.removeEventListener('mouseup', mouseUpHandler, false);\n        window.removeEventListener('mousemove', mouseMoveHandler, false);\n      }; // Add listeners\n\n\n      window.addEventListener('mouseup', mouseUpHandler, false);\n      window.addEventListener('mousemove', mouseMoveHandler, false); // Notify state of link start\n\n      onLinkStart({\n        config: config,\n        linkId: linkId,\n        startEvent: startEvent,\n        fromNodeId: fromNodeId,\n        fromPortId: fromPortId\n      }); // Prevent default and stop propagation to prevent text selection\n\n      startEvent.preventDefault();\n      startEvent.stopPropagation();\n    };\n\n    return _this;\n  }\n\n  PortWrapper.prototype.componentDidUpdate = function (prevProps) {\n    // Update port position after a re-render if node.size has changed\n    if (!lodash_1.isEqual(this.props.node.size, prevProps.node.size)) {\n      var el = ReactDOM.findDOMNode(this.nodeRef.current);\n\n      if (el) {\n        // Ports component should be positions absolute\n        // Factor this in so we get position relative to the node\n        var nodesEl = el.parentElement ? el.parentElement : {\n          offsetLeft: 0,\n          offsetTop: 0\n        }; // update port position after node size has been determined\n\n        this.props.onPortPositionChange({\n          config: this.props.config,\n          node: this.props.node,\n          port: this.props.port,\n          el: el,\n          nodesEl: nodesEl\n        });\n      }\n    }\n  };\n\n  PortWrapper.prototype.render = function () {\n    var _a = this.props,\n        selected = _a.selected,\n        selectedLink = _a.selectedLink,\n        hovered = _a.hovered,\n        hoveredLink = _a.hoveredLink,\n        style = _a.style,\n        port = _a.port,\n        node = _a.node,\n        _b = _a.Component,\n        Component = _b === void 0 ? Port_default_1.PortDefault : _b,\n        config = _a.config;\n    return React.createElement(\"div\", {\n      \"data-port-id\": port.id,\n      \"data-node-id\": node.id,\n      onMouseDown: this.onMouseDown,\n      ref: this.nodeRef,\n      style: style\n    }, React.createElement(Component, {\n      config: config,\n      port: port,\n      isSelected: !!selected && selected.type === 'port' && selected.id === port.id,\n      isHovered: !!hovered && hovered.type === 'port' && hovered.id === port.id,\n      isLinkSelected: selectedLink ? selectedLink.from.portId === port.id && selectedLink.from.nodeId === node.id || selectedLink.to.portId === port.id && selectedLink.to.nodeId === node.id : false,\n      isLinkHovered: hoveredLink ? hoveredLink.from.portId === port.id && hoveredLink.from.nodeId === node.id || hoveredLink.to.portId === port.id && hoveredLink.to.nodeId === node.id : false\n    }));\n  };\n\n  PortWrapper.contextType = CanvasContext_1.default;\n  return PortWrapper;\n}(React.Component);\n\nexports.PortWrapper = PortWrapper;","map":{"version":3,"sources":["../../../../src/components/Port/Port.wrapper.tsx"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar lodash_1 = require(\"lodash\");\nvar React = require(\"react\");\nvar ReactDOM = require(\"react-dom\");\nvar uuid_1 = require(\"uuid\");\nvar CanvasContext_1 = require(\"../Canvas/CanvasContext\");\nvar Port_default_1 = require(\"./Port.default\");\n/** Construct the composed path by traversing parentElements */\nvar composedPath = function (el) {\n    var path = [];\n    while (el) {\n        path.push(el);\n        el = el.parentElement;\n    }\n    return path;\n};\nvar PortWrapper = /** @class */ (function (_super) {\n    __extends(PortWrapper, _super);\n    function PortWrapper() {\n        var _this = _super !== null && _super.apply(this, arguments) || this;\n        _this.nodeRef = React.createRef();\n        _this.onMouseDown = function (startEvent) {\n            var _a = _this.props, offset = _a.offset, node = _a.node, port = _a.port, onLinkStart = _a.onLinkStart, onLinkCancel = _a.onLinkCancel, onLinkComplete = _a.onLinkComplete, onLinkMove = _a.onLinkMove, config = _a.config;\n            var linkId = uuid_1.v4();\n            var fromNodeId = node.id;\n            var fromPortId = port.id;\n            // Create the move handler\n            // This will update the position as the mouse moves\n            var mouseMoveHandler = function (e) {\n                var _a = _this.context, offsetX = _a.offsetX, offsetY = _a.offsetY;\n                onLinkMove({\n                    config: config,\n                    linkId: linkId, startEvent: startEvent, fromNodeId: fromNodeId, fromPortId: fromPortId,\n                    toPosition: {\n                        x: e.clientX - offsetX - offset.x,\n                        y: e.clientY - offsetY - offset.y,\n                    },\n                });\n            };\n            // Create and bind the mouse up handler\n            // This is used to check if the link is complete or cancelled\n            var mouseUpHandler = function (e) {\n                // We traverse up the event path until we find an element with 'data-port-id' and data-node-id'\n                // e.toElement cannot be used because it may be a child element of the port\n                var path = composedPath(e.target);\n                var portEl = path.find(function (el) {\n                    var toPortId = el.getAttribute && el.getAttribute('data-port-id');\n                    var toNodeId = el.getAttribute && el.getAttribute('data-node-id');\n                    return !!(toPortId && toNodeId);\n                });\n                // If both node-id and port-id are defined as data attributes, we are mouse-upping\n                // on another port. Run the success handler\n                if (portEl) {\n                    var toPortId = portEl.getAttribute('data-port-id');\n                    var toNodeId = portEl.getAttribute('data-node-id');\n                    onLinkComplete({ config: config, linkId: linkId, startEvent: startEvent, fromNodeId: fromNodeId, fromPortId: fromPortId, toNodeId: toNodeId, toPortId: toPortId });\n                }\n                else {\n                    onLinkCancel({ config: config, linkId: linkId, startEvent: startEvent, fromNodeId: fromNodeId, fromPortId: fromPortId });\n                }\n                // Remove the listeners if the link is complete or canceled\n                window.removeEventListener('mouseup', mouseUpHandler, false);\n                window.removeEventListener('mousemove', mouseMoveHandler, false);\n            };\n            // Add listeners\n            window.addEventListener('mouseup', mouseUpHandler, false);\n            window.addEventListener('mousemove', mouseMoveHandler, false);\n            // Notify state of link start\n            onLinkStart({ config: config, linkId: linkId, startEvent: startEvent, fromNodeId: fromNodeId, fromPortId: fromPortId });\n            // Prevent default and stop propagation to prevent text selection\n            startEvent.preventDefault();\n            startEvent.stopPropagation();\n        };\n        return _this;\n    }\n    PortWrapper.prototype.componentDidUpdate = function (prevProps) {\n        // Update port position after a re-render if node.size has changed\n        if (!lodash_1.isEqual(this.props.node.size, prevProps.node.size)) {\n            var el = ReactDOM.findDOMNode(this.nodeRef.current);\n            if (el) {\n                // Ports component should be positions absolute\n                // Factor this in so we get position relative to the node\n                var nodesEl = el.parentElement\n                    ? el.parentElement\n                    : { offsetLeft: 0, offsetTop: 0 };\n                // update port position after node size has been determined\n                this.props.onPortPositionChange({ config: this.props.config, node: this.props.node, port: this.props.port, el: el, nodesEl: nodesEl });\n            }\n        }\n    };\n    PortWrapper.prototype.render = function () {\n        var _a = this.props, selected = _a.selected, selectedLink = _a.selectedLink, hovered = _a.hovered, hoveredLink = _a.hoveredLink, style = _a.style, port = _a.port, node = _a.node, _b = _a.Component, Component = _b === void 0 ? Port_default_1.PortDefault : _b, config = _a.config;\n        return (React.createElement(\"div\", { \"data-port-id\": port.id, \"data-node-id\": node.id, onMouseDown: this.onMouseDown, ref: this.nodeRef, style: style },\n            React.createElement(Component, { config: config, port: port, isSelected: !!selected && selected.type === 'port' && selected.id === port.id, isHovered: !!hovered && hovered.type === 'port' && hovered.id === port.id, isLinkSelected: selectedLink\n                    ? ((selectedLink.from.portId === port.id && selectedLink.from.nodeId === node.id) ||\n                        (selectedLink.to.portId === port.id && selectedLink.to.nodeId === node.id))\n                    : false, isLinkHovered: hoveredLink\n                    ? ((hoveredLink.from.portId === port.id && hoveredLink.from.nodeId === node.id) ||\n                        (hoveredLink.to.portId === port.id && hoveredLink.to.nodeId === node.id))\n                    : false })));\n    };\n    PortWrapper.contextType = CanvasContext_1.default;\n    return PortWrapper;\n}(React.Component));\nexports.PortWrapper = PortWrapper;\n//# sourceMappingURL=Port.wrapper.js.map"]},"metadata":{},"sourceType":"script"}
{"ast":null,"code":"/*\r\njQWidgets v9.0.0 (2020-Jan)\r\nCopyright (c) 2011-2020 jQWidgets.\r\nLicense: https://jqwidgets.com/license/\r\n*/\n\n/* eslint-disable */\n(function (a) {\n  a.extend(a.jqx._jqxChart.prototype, {\n    _moduleAnnotations: true,\n    _renderAnnotation: function _renderAnnotation(f, g, c) {\n      var j = this.seriesGroups[f];\n      var q = this.renderer;\n\n      if (isNaN(f)) {\n        return;\n      }\n\n      var l = this._get([this.getXAxisDataPointOffset(g.xValue, f), g.x]);\n\n      var k = this._get([this.getValueAxisDataPointOffset(g.yValue, f), g.y]);\n\n      var v = this._get([this.getXAxisDataPointOffset(g.xValue2, f), g.x2]);\n\n      var e = this._get([this.getValueAxisDataPointOffset(g.yValue2, f), g.y2]);\n\n      if (j.polar || j.spider) {\n        var r = this.getPolarDataPointOffset(g.xValue, g.yValue, f);\n\n        if (r && !isNaN(r.x) && !isNaN(r.y)) {\n          l = r.x;\n          k = r.y;\n        } else {\n          l = g.x;\n          k = g.y;\n        }\n      }\n\n      if (isNaN(k) || isNaN(l)) {\n        return false;\n      }\n\n      if (j.orientation == \"horizontal\") {\n        var w = l;\n        l = k;\n        k = w;\n        w = v;\n        v = e;\n        e = w;\n      }\n\n      if (g.offset) {\n        if (!isNaN(g.offset.x)) {\n          l += g.offset.x;\n          v += g.offset.x;\n        }\n\n        if (!isNaN(g.offset.y)) {\n          k += g.offset.y;\n          e += g.offset.y;\n        }\n      }\n\n      var p = this._get([g.width, v - l]);\n\n      var o = this._get([g.height, e - k]);\n\n      var d;\n\n      switch (g.type) {\n        case \"rect\":\n          d = q.rect(l, k, p, o);\n          break;\n\n        case \"circle\":\n          d = q.rect(l, k, g.radius);\n          break;\n\n        case \"line\":\n          d = q.rect(l, k, v, e);\n          break;\n\n        case \"path\":\n          d = q.path(g.path);\n          break;\n      }\n\n      q.attr(d, {\n        fill: g.fillColor,\n        stroke: g.lineColor,\n        opacity: this._get([g.fillOpacity, g.opacity]),\n        \"stroke-opacity\": this._get([g.lineOpacity, g.opacity]),\n        \"stroke-width\": g.lineWidth,\n        \"stroke-dasharray\": g.dashStyle || \"none\"\n      });\n      var u;\n\n      if (g.text) {\n        var m = g.text;\n        var z = 0,\n            h = 0;\n\n        if (m.offset) {\n          if (!isNaN(m.offset.x)) {\n            z += m.offset.x;\n          }\n\n          if (!isNaN(m.offset.y)) {\n            h += m.offset.y;\n          }\n        }\n\n        u = q.text(m.value, l + z, k + h, NaN, NaN, m.angle, {}, m.clip === true, m.horizontalAlignment || \"center\", m.verticalAlignment || \"center\", m.rotationPoint || \"centermiddle\");\n        q.attr(u, {\n          fill: m.fillColor,\n          stroke: m.lineColor,\n          \"class\": m[\"class\"]\n        });\n      }\n\n      var b = [\"click\", \"mouseenter\", \"mouseleave\"];\n      var n = this;\n\n      for (var t = 0; t < b.length; t++) {\n        var s = this._getEvent(b[t]) || b[t];\n\n        if (d) {\n          this.renderer.addHandler(d, s, function () {\n            n._raiseAnnotationEvent(g, s);\n          });\n        }\n\n        if (u) {\n          this.renderer.addHandler(u, s, function () {\n            n._raiseAnnotationEvent(g, s);\n          });\n        }\n      }\n    },\n    _raiseAnnotationEvent: function _raiseAnnotationEvent(b, c) {\n      this._raiseEvent(\"annotation_\" + c, {\n        annotation: b\n      });\n    }\n  });\n})(jqxBaseFramework);","map":null,"metadata":{},"sourceType":"script"}
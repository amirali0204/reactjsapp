{"ast":null,"code":"/*\r\njQWidgets v9.0.0 (2020-Jan)\r\nCopyright (c) 2011-2020 jQWidgets.\r\nLicense: https://jqwidgets.com/license/\r\n*/\n\n/* eslint-disable */\n(function (a) {\n  a.jqx.jqxWidget(\"jqxSplitter\", \"\", {});\n  a.extend(a.jqx._jqxSplitter.prototype, {\n    defineInstance: function defineInstance() {\n      var b = {\n        width: 300,\n        height: 300,\n        panels: [],\n        orientation: \"vertical\",\n        disabled: false,\n        splitBarSize: 5,\n        touchSplitBarSize: 15,\n        panel1: null,\n        panel2: null,\n        _eventsMap: {\n          mousedown: a.jqx.mobile.getTouchEventName(\"touchstart\"),\n          mouseup: a.jqx.mobile.getTouchEventName(\"touchend\"),\n          mousemove: a.jqx.mobile.getTouchEventName(\"touchmove\"),\n          mouseenter: \"mouseenter\",\n          mouseleave: \"mouseleave\"\n        },\n        _isTouchDevice: false,\n        _isNested: false,\n        resizable: true,\n        touchMode: \"auto\",\n        showSplitBar: true,\n        initContent: null,\n        _events: [\"resize\", \"expanded\", \"collapsed\", \"resizeStart\", \"layout\"]\n      };\n\n      if (this === a.jqx._jqxSplitter.prototype) {\n        return b;\n      }\n\n      a.extend(true, this, b);\n      return b;\n    },\n    createInstance: function createInstance() {\n      this.render();\n    },\n    _initOverlay: function _initOverlay(b) {\n      if (this.overlay || b == \"undefined\") {\n        this.overlay.remove();\n        this.overlay = null;\n      } else {\n        if (b == true) {\n          this.overlay = a(\"<div style='z-index: 100; background: #fff;'></div>\");\n          this.overlay.css(\"opacity\", 0.01);\n          this.overlay.css(\"position\", \"absolute\");\n          this.overlay.appendTo(a(document.body));\n          var c = this.host.coord();\n          this.overlay.css(\"left\", \"0px\");\n          this.overlay.css(\"top\", \"0px\");\n          this.overlay.width(a(window).width());\n          this.overlay.height(a(window).height());\n          this.overlay.addClass(\"jqx-disableselect\");\n\n          if (this.orientation == \"horizontal\") {\n            this.overlay.css(\"cursor\", \"row-resize\");\n          } else {\n            this.overlay.css(\"cursor\", \"col-resize\");\n          }\n        }\n      }\n    },\n    _startDrag: function _startDrag(b) {\n      if (b.target == this.splitBarButton[0] || this.disabled) {\n        return true;\n      }\n\n      if (this.panels[0].collapsed || this.panels[1].collapsed || !this.resizable) {\n        return true;\n      }\n\n      if (this.overlay == null) {\n        this._dragging = true;\n\n        this._initOverlay(true);\n\n        this._dragStart = a.jqx.position(b);\n        return false;\n      }\n\n      return true;\n    },\n    _drag: function _drag(b) {\n      if (this.panels[0].collapsed || this.panels[1].collapsed || this.disabled) {\n        return true;\n      }\n\n      if (!this._dragging) {\n        return true;\n      }\n\n      var i = this.orientation == \"horizontal\" ? \"top\" : \"left\";\n      var k = this.orientation == \"vertical\" ? \"width\" : \"height\";\n      this._position = a.jqx.position(b);\n\n      if (this.overlay && !this._splitBarClone) {\n        if (Math.abs(this._position[i] - this._dragStart[i]) >= 3) {\n          var m = this.splitBar.coord();\n          this._cloneStart = {\n            left: m.left,\n            top: m.top\n          };\n          this._splitBarClone = this._createSplitBarClone();\n\n          this._raiseEvent(3, {\n            panels: this.panels\n          });\n\n          return;\n        }\n      }\n\n      if (this._splitBarClone) {\n        var j, c;\n        var n = this.host[k]();\n        var d = n / 100;\n        var f = 1 / d;\n        var h = 0;\n        var l = this._splitBarClone[k]() + 2;\n        var g = parseInt(this.host.coord()[i]);\n        var e = this._position[i] - this._dragStart[i] + this._cloneStart[i] - g;\n\n        if (h > e) {\n          e = h;\n        }\n\n        if (e > n + h - l) {\n          e = n + h - l;\n        }\n\n        j = this.panels[0].min;\n        c = this.panels[1].min;\n\n        if (c.toString().indexOf(\"%\") != -1) {\n          c = parseFloat(c) * d;\n        }\n\n        if (j.toString().indexOf(\"%\") != -1) {\n          j = parseFloat(j) * d;\n        }\n\n        this._splitBarClone.removeClass(this.toThemeProperty(\"jqx-splitter-splitbar-invalid\"));\n\n        if (e < j) {\n          this._splitBarClone.addClass(this.toThemeProperty(\"jqx-splitter-splitbar-invalid\"));\n\n          e = j;\n        }\n\n        if (e > n + h - l - c) {\n          this._splitBarClone.addClass(this.toThemeProperty(\"jqx-splitter-splitbar-invalid\"));\n\n          e = n + h - l - c;\n        }\n\n        this._splitBarClone.css(i, e);\n\n        if (b.preventDefault) {\n          b.preventDefault();\n        }\n\n        if (b.stopPropagation) {\n          b.stopPropagation();\n        }\n\n        return false;\n      }\n\n      return true;\n    },\n    resize: function resize(c, b) {\n      this.width = c;\n      this.height = b;\n\n      this._arrange();\n    },\n    _resize: function _resize() {\n      var h = this.orientation == \"horizontal\" ? \"height\" : \"width\";\n      var f = this.orientation == \"horizontal\" ? \"top\" : \"left\";\n\n      var c = this._splitBarClone.css(f);\n\n      var b = this.host[h]();\n      var e = b / 100;\n      var d = 1 / e;\n      var g = this.panels[0].size;\n\n      if (g.toString().indexOf(\"%\") != -1) {\n        this.panels[0].size = parseFloat(c) * d + \"%\";\n        this.panels[1].size = 100 - parseFloat(c) * d + \"%\";\n      } else {\n        this.panels[0].size = parseFloat(c);\n        this.panels[1].size = b - parseFloat(c);\n      }\n\n      this._layoutPanels();\n\n      this._raiseEvent(0, {\n        panels: this.panels\n      });\n    },\n    _stopDrag: function _stopDrag() {\n      if (this._dragging) {\n        this._initOverlay();\n      }\n\n      this._dragging = false;\n\n      if (this._splitBarClone) {\n        if (this.panels[0].collapsed || this.panels[1].collapsed || this.disabled) {\n          return true;\n        }\n\n        this._resize();\n\n        this._splitBarClone.remove();\n\n        this._splitBarClone = null;\n      }\n    },\n    _createSplitBarClone: function _createSplitBarClone() {\n      var b = this.splitBar.clone();\n      b.fadeTo(0, 0.7);\n      b.css(\"z-index\", 99999);\n\n      if (this.orientation == \"vertical\") {\n        b.css(\"cursor\", \"col-resize\");\n      } else {\n        b.css(\"cursor\", \"row-resize\");\n      }\n\n      this.host.append(b);\n      return b;\n    },\n    _eventName: function _eventName(b) {\n      if (this._isTouchDevice) {\n        return this._eventsMap[b];\n      } else {\n        return b;\n      }\n    },\n    _addHandlers: function _addHandlers() {\n      var c = this;\n      a.jqx.utilities.resize(this.host, function () {\n        c._layoutPanels();\n      });\n      this.addHandler(this.splitBar, \"dragstart.\" + this.element.id, function (e) {\n        return false;\n      });\n\n      if (this.splitBarButton) {\n        this.addHandler(this.splitBarButton, \"click.\" + this.element.id, function () {\n          var e = function e(f) {\n            if (!f.collapsed) {\n              c.collapse();\n            } else {\n              c.expand();\n            }\n          };\n\n          if (c.panels[0].collapsible) {\n            e(c.panels[0]);\n          } else {\n            if (c.panels[1].collapsible) {\n              e(c.panels[1]);\n            }\n          }\n        });\n        this.addHandler(this.splitBarButton, this._eventName(\"mouseenter\"), function () {\n          c.splitBarButton.addClass(c.toThemeProperty(\"jqx-splitter-collapse-button-hover\"));\n          c.splitBarButton.addClass(c.toThemeProperty(\"jqx-fill-state-hover\"));\n        });\n        this.addHandler(this.splitBarButton, this._eventName(\"mouseleave\"), function () {\n          c.splitBarButton.removeClass(c.toThemeProperty(\"jqx-splitter-collapse-button-hover\"));\n          c.splitBarButton.removeClass(c.toThemeProperty(\"jqx-fill-state-hover\"));\n        });\n      }\n\n      this.addHandler(a(document), this._eventName(\"mousemove\") + \".\" + this.element.id, function (e) {\n        return c._drag(e);\n      });\n      this.addHandler(a(document), this._eventName(\"mouseup\") + \".\" + this.element.id, function () {\n        return c._stopDrag();\n      });\n      this.addHandler(this.splitBar, this._eventName(\"mousedown\"), function (e) {\n        return c._startDrag(e);\n      });\n      this.addHandler(this.splitBar, this._eventName(\"mouseenter\"), function () {\n        if (c.resizable && !c.disabled) {\n          c.splitBar.addClass(c.toThemeProperty(\"jqx-splitter-splitbar-hover\"));\n          c.splitBar.addClass(c.toThemeProperty(\"jqx-fill-state-hover\"));\n        }\n      });\n      this.addHandler(this.splitBar, this._eventName(\"mouseleave\"), function () {\n        if (c.resizable && !c.disabled) {\n          c.splitBar.removeClass(c.toThemeProperty(\"jqx-splitter-splitbar-hover\"));\n          c.splitBar.removeClass(c.toThemeProperty(\"jqx-fill-state-hover\"));\n        }\n      });\n\n      if (document.referrer != \"\" || window.frameElement) {\n        if (window.top != null && window.top != window.self) {\n          var d = null;\n\n          if (window.parent && document.referrer) {\n            d = document.referrer;\n          }\n\n          if (d && d.indexOf(document.location.host) != -1) {\n            var b = function b(e) {\n              c._stopDrag();\n            };\n\n            if (window.top.document.addEventListener) {\n              window.top.document.addEventListener(\"mouseup\", b, false);\n            } else {\n              if (window.top.document.attachEvent) {\n                window.top.document.attachEvent(\"onmouseup\", b);\n              }\n            }\n          }\n        }\n      }\n    },\n    _removeHandlers: function _removeHandlers() {\n      this.removeHandler(a(window), \"resize.\" + this.element.id);\n\n      if (this.splitBarButton) {\n        this.removeHandler(this.splitBarButton, \"click.\" + this.element.id);\n        this.removeHandler(this.splitBarButton, this._eventName(\"mouseenter\"));\n        this.removeHandler(this.splitBarButton, this._eventName(\"mouseleave\"));\n      }\n\n      this.removeHandler(a(document), this._eventName(\"mousemove\") + \".\" + this.element.id);\n      this.removeHandler(a(document), this._eventName(\"mouseup\") + \".\" + this.element.id);\n\n      if (this.splitBar) {\n        this.removeHandler(this.splitBar, \"dragstart.\" + this.element.id);\n        this.removeHandler(this.splitBar, this._eventName(\"mousedown\"));\n        this.removeHandler(this.splitBar, this._eventName(\"mouseenter\"));\n        this.removeHandler(this.splitBar, this._eventName(\"mouseleave\"));\n      }\n    },\n    render: function render() {\n      if (this.splitBar) {\n        this.splitBar.remove();\n      }\n\n      var c = this.host.children();\n\n      if (c.length != 2) {\n        throw \"Invalid HTML Structure! jqxSplitter requires 1 container DIV tag and 2 nested DIV tags.\";\n      }\n\n      if (c.length == 2) {\n        var e = c[0].className.split(\" \");\n        var b = c[1].className.split(\" \");\n\n        if (e.indexOf(\"jqx-reset\") != -1 && e.indexOf(\"jqx-splitter\") != -1 && e.indexOf(\"jqx-widget\") != -1) {\n          throw \"Invalid HTML Structure! Nested jqxSplitter cannot be initialized from a Splitter Panel. You need to add a new DIV tag inside the Splitter Panel and initialize the nested jqxSplitter from it!\";\n        }\n\n        if (b.indexOf(\"jqx-reset\") != -1 && b.indexOf(\"jqx-splitter\") != -1 && b.indexOf(\"jqx-widget\") != -1) {\n          throw \"Invalid HTML Structure! Nested jqxSplitter cannot be initialized from a Splitter Panel. You need to add a new DIV tag inside the Splitter Panel and initialize the nested jqxSplitter from it!\";\n        }\n      }\n\n      if (this.host.parent().length > 0 && this.host.parent()[0].className.indexOf(\"jqx-splitter\") != -1) {\n        if (this.element.className.indexOf(\"jqx-splitter-panel\") != -1) {\n          throw \"Invalid HTML Structure! Nested jqxSplitter cannot be initialized from a Splitter Panel. You need to add a new DIV tag inside the Splitter Panel and initialize the nested jqxSplitter from it!\";\n        }\n\n        this._isNested = true;\n\n        if (this.width == 300) {\n          this.width = \"100%\";\n        }\n\n        if (this.height == 300) {\n          this.height = \"100%\";\n        }\n\n        if (this.width == \"100%\" && this.height == \"100%\") {\n          this.host.addClass(\"jqx-splitter-nested\");\n\n          if (this.host.parent()[0].className.indexOf(\"jqx-splitter-panel\") != -1) {\n            this.host.parent().addClass(\"jqx-splitter-panel-nested\");\n          }\n        }\n      }\n\n      this._hasBorder = this.host.hasClass(\"jqx-hideborder\") == false || this.element.style.borderTopWidth != \"\";\n\n      this._removeHandlers();\n\n      this._isTouchDevice = a.jqx.mobile.isTouchDevice();\n\n      this._validate();\n\n      this.panel1.css(\"left\", \"0px\");\n      this.panel1.css(\"top\", \"0px\");\n      this.panel2.css(\"left\", \"0px\");\n      this.panel2.css(\"top\", \"0px\");\n      this.splitBar = a(\"<div><div></div></div>\");\n\n      if (!this.resizable) {\n        this.splitBar.css(\"cursor\", \"default\");\n      }\n\n      this.splitBarButton = this.splitBar.find(\"div:last\");\n\n      this._setTheme();\n\n      this.splitBar.insertAfter(this.panel1);\n\n      this._arrange();\n\n      if (this.panels[0].collapsible == false && this.panels[1].collapsible == false) {\n        this.splitBarButton.hide();\n      }\n\n      var d = this;\n\n      this._addHandlers();\n\n      if (this.initContent) {\n        this.initContent();\n      }\n\n      if (this.disabled) {\n        this.disable();\n      }\n    },\n    _hiddenParent: function _hiddenParent() {\n      return a.jqx.isHidden(this.host);\n    },\n    _setTheme: function _setTheme() {\n      this.panel1.addClass(this.toThemeProperty(\"jqx-widget-content\"));\n      this.panel2.addClass(this.toThemeProperty(\"jqx-widget-content\"));\n      this.panel1.addClass(this.toThemeProperty(\"jqx-splitter-panel\"));\n      this.panel2.addClass(this.toThemeProperty(\"jqx-splitter-panel\"));\n      this.panel1.addClass(this.toThemeProperty(\"jqx-reset\"));\n      this.panel2.addClass(this.toThemeProperty(\"jqx-reset\"));\n      this.host.addClass(this.toThemeProperty(\"jqx-reset\"));\n      this.host.addClass(this.toThemeProperty(\"jqx-splitter\"));\n      this.host.addClass(this.toThemeProperty(\"jqx-widget\"));\n      this.host.addClass(this.toThemeProperty(\"jqx-widget-content\"));\n      this.splitBar.addClass(this.toThemeProperty(\"jqx-splitter-splitbar-\" + this.orientation));\n      this.splitBar.addClass(this.toThemeProperty(\"jqx-fill-state-normal\"));\n      this.splitBarButton.addClass(this.toThemeProperty(\"jqx-splitter-collapse-button-\" + this.orientation));\n      this.splitBarButton.addClass(this.toThemeProperty(\"jqx-fill-state-pressed\"));\n    },\n    _validate: function _validate() {\n      var b = this.host.children();\n\n      if (b.length != 2) {\n        throw \"Invalid HTML Structure! jqxSplitter requires two nested DIV tags!\";\n      }\n\n      if (this.panels && !this.panels[1]) {\n        if (!this.panels[0]) {\n          this.panels = [{\n            size: \"50%\"\n          }, {\n            size: \"50%\"\n          }];\n        } else {\n          this.panels[1] = {};\n        }\n      } else {\n        if (this.panels == undefined) {\n          this.panels = [{\n            size: \"50%\"\n          }, {\n            size: \"50%\"\n          }];\n        }\n      }\n\n      var b = this.host.children();\n      this.panel1 = this.panels[0].element = a(b[0]);\n      this.panel2 = this.panels[1].element = a(b[1]);\n      this.panel1[0].style.minWidth = \"\";\n      this.panel1[0].style.maxWidth = \"\";\n      this.panel2[0].style.minWidth = \"\";\n      this.panel2[0].style.maxWidth = \"\";\n      a.each(this.panels, function () {\n        if (this.min == undefined) {\n          this.min = 0;\n        }\n\n        if (this.size == undefined) {\n          this.size = 0;\n        }\n\n        if (this.size < 0) {\n          this.size = 0;\n        }\n\n        if (this.min < 0) {\n          this.min = 0;\n        }\n\n        if (this.collapsible == undefined) {\n          this.collapsible = true;\n        }\n\n        if (this.collapsed == undefined) {\n          this.collapsed = false;\n        }\n\n        if (this.size != 0) {\n          if (this.size.toString().indexOf(\"px\") != -1) {\n            this.size = parseInt(this.size);\n          }\n\n          if (this.size.toString().indexOf(\"%\") == -1) {\n            if (parseInt(this.min) > parseInt(this.size)) {\n              this.min = this.size;\n            }\n          } else {\n            if (this.min.toString().indexOf(\"%\") != -1) {\n              if (parseInt(this.min) > parseInt(this.size)) {\n                this.min = this.size;\n              }\n            }\n          }\n        }\n      });\n    },\n    _arrange: function _arrange() {\n      if (this.width != null) {\n        var d = this.width;\n\n        if (typeof d != \"string\") {\n          d = parseInt(this.width) + \"px\";\n        }\n\n        this.host.css(\"width\", d);\n      }\n\n      if (this.height != null) {\n        var b = this.height;\n\n        if (typeof b != \"string\") {\n          b = parseInt(this.height) + \"px\";\n        }\n\n        this.host.css(\"height\", b);\n      }\n\n      this._splitBarSize = !this._isTouchDevice ? this.splitBarSize : this.touchSplitBarSize;\n\n      if (!this.showSplitBar) {\n        this._splitBarSize = 0;\n        this.splitBar.hide();\n      }\n\n      var c = this.orientation == \"horizontal\" ? \"width\" : \"height\";\n      this.splitBar.css(c, \"100%\");\n      this.panel1.css(c, \"100%\");\n      this.panel2.css(c, \"100%\");\n\n      if (this.orientation == \"horizontal\") {\n        this.splitBar.height(this._splitBarSize);\n      } else {\n        this.splitBar.width(this._splitBarSize);\n      }\n\n      if (this.orientation === \"vertical\") {\n        this.splitBarButton.width(this._splitBarSize);\n        this.splitBarButton.height(45);\n      } else {\n        this.splitBarButton.height(this._splitBarSize);\n        this.splitBarButton.width(45);\n      }\n\n      this.splitBarButton.css(\"position\", \"relative\");\n\n      if (this.orientation === \"vertical\") {\n        this.splitBarButton.css(\"top\", \"50%\");\n        this.splitBarButton.css(\"left\", \"0\");\n        this.splitBarButton.css(\"margin-top\", \"-23px\");\n        this.splitBarButton.css(\"margin-left\", \"-0px\");\n      } else {\n        this.splitBarButton.css(\"left\", \"50%\");\n        this.splitBarButton.css(\"top\", \"0\");\n        this.splitBarButton.css(\"margin-left\", \"-23px\");\n        this.splitBarButton.css(\"margin-top\", \"-0px\");\n      }\n\n      this._layoutPanels();\n    },\n    collapse: function collapse() {\n      if (this.disabled) {\n        return;\n      }\n\n      var b = -1;\n      this.panels[0].collapsed = this.panels[1].collapsed = false;\n      this.panels[0].element[0].style.visibility = \"inherit\";\n      this.panels[1].element[0].style.visibility = \"inherit\";\n\n      if (this.panels[0].collapsible) {\n        b = 0;\n      } else {\n        if (this.panels[1].collapsible) {\n          b = 1;\n        }\n      }\n\n      if (b != -1) {\n        this.panels[b].collapsed = true;\n        this.panels[b].element[0].style.visibility = \"hidden\";\n        this.splitBar.addClass(this.toThemeProperty(\"jqx-splitter-splitbar-collapsed\"));\n\n        this._layoutPanels();\n\n        this._raiseEvent(2, {\n          index: b,\n          panels: this.panels\n        });\n\n        this._raiseEvent(0, {\n          panels: this.panels\n        });\n      }\n    },\n    expand: function expand() {\n      if (this.disabled) {\n        return;\n      }\n\n      var b = -1;\n      this.panels[0].collapsed = this.panels[1].collapsed = false;\n      this.panels[0].element[0].style.visibility = \"inherit\";\n      this.panels[1].element[0].style.visibility = \"inherit\";\n\n      if (this.panels[0].collapsible) {\n        b = 0;\n      } else {\n        if (this.panels[1].collapsible) {\n          b = 1;\n        }\n      }\n\n      if (b != -1) {\n        this.panels[b].collapsed = false;\n        this.panels[b].element[0].style.visibility = \"inherit\";\n        this.splitBar.removeClass(this.toThemeProperty(\"jqx-splitter-splitbar-collapsed\"));\n\n        this._layoutPanels();\n\n        this._raiseEvent(1, {\n          index: b,\n          panels: this.panels\n        });\n\n        this._raiseEvent(0, {\n          panels: this.panels\n        });\n      }\n    },\n    disable: function disable() {\n      this.disabled = true;\n      this.host.addClass(this.toThemeProperty(\"jqx-fill-state-disabled\"));\n      this.splitBar.addClass(this.toThemeProperty(\"jqx-splitter-splitbar-collapsed\"));\n      this.splitBarButton.addClass(this.toThemeProperty(\"jqx-splitter-splitbar-collapsed\"));\n    },\n    enable: function enable() {\n      this.disabled = false;\n      this.host.removeClass(this.toThemeProperty(\"jqx-fill-state-disabled\"));\n      this.splitBar.removeClass(this.toThemeProperty(\"jqx-splitter-splitbar-collapsed\"));\n      this.splitBarButton.removeClass(this.toThemeProperty(\"jqx-splitter-splitbar-collapsed\"));\n    },\n    refresh: function refresh(b) {\n      if (b != true) {\n        this._arrange();\n      }\n    },\n    propertyChangedHandler: function propertyChangedHandler(b, c, e, d) {\n      if (c === \"panels\" || c === \"orientation\" || c === \"showSplitBar\") {\n        b.render();\n        return;\n      }\n\n      if (c === \"touchMode\") {\n        b._isTouchDevice = d;\n      }\n\n      if (c === \"disabled\") {\n        if (d) {\n          b.disable();\n        } else {\n          b.enable();\n        }\n      } else {\n        if (c === \"theme\") {\n          a.jqx.utilities.setTheme(e, d, b.host);\n        } else {\n          b.refresh();\n        }\n      }\n    },\n    _layoutPanels: function _layoutPanels() {\n      var j = this;\n      var q = this.orientation == \"horizontal\" ? \"height\" : \"width\";\n      var t = this.orientation == \"horizontal\" ? \"top\" : \"left\";\n      var l, r, e, u;\n      var m = parseInt(this._splitBarSize) + 2;\n\n      if (!this.showSplitBar) {\n        m = 0;\n      }\n\n      var i = this.host[q]();\n      var k = i / 100;\n      var s = 1 / k;\n      var p = s * m;\n      var h = this.panel1;\n      var g = this.panel2;\n      var n = this.panels[0].size;\n\n      if (this.panels[0].collapsed) {\n        e = true;\n      }\n\n      if (this.panels[1].collapsed) {\n        u = true;\n      }\n\n      l = this.panels[0].min;\n      r = this.panels[1].min;\n\n      if (r.toString().indexOf(\"%\") != -1) {\n        r = parseFloat(r) * k;\n      }\n\n      if (l.toString().indexOf(\"%\") != -1) {\n        l = parseFloat(l) * k;\n      }\n\n      if (this._isNested && this._isTouchDevice) {\n        if (this.orientation == \"horizontal\") {\n          h.width(this.host.width());\n          g.width(this.host.width());\n        } else {\n          h.height(this.host.height());\n          g.height(this.host.height());\n        }\n      }\n\n      var f = function f() {\n        var w = j.panel1[q]();\n\n        if (j.splitBar[0].style[t] != w + \"px\") {\n          var x = w;\n\n          if (j.orientation == \"vertical\") {\n            j.splitBar[0].style.borderLeftColor = \"\";\n            j.splitBar[0].style.borderRightColor = \"\";\n            j.splitBarButton[0].style.width = parseInt(j._splitBarSize) + \"px\";\n            j.splitBarButton[0].style.left = \"0px\";\n          } else {\n            j.splitBar[0].style.borderTopColor = \"\";\n            j.splitBar[0].style.borderBottomColor = \"\";\n            j.splitBarButton[0].style.height = parseInt(j._splitBarSize) + \"px\";\n            j.splitBarButton[0].style.top = \"0px\";\n          }\n\n          if (j._hasBorder) {\n            if (i - m == w) {\n              if (j.orientation == \"vertical\") {\n                j.splitBar[0].style.borderRightColor = \"transparent\";\n                j.splitBarButton[0].style.width = parseInt(j._splitBarSize + 1) + \"px\";\n              } else {\n                j.splitBar[0].style.borderBottomColor = \"transparent\";\n                j.splitBarButton[0].style.height = parseInt(j._splitBarSize + 1) + \"px\";\n              }\n            } else {\n              if (w == 0) {\n                if (j.orientation == \"vertical\") {\n                  j.splitBar[0].style.borderLeftColor = \"transparent\";\n                  j.splitBarButton[0].style.width = parseInt(j._splitBarSize + 1) + \"px\";\n                  j.splitBarButton[0].style.left = \"-1px\";\n                } else {\n                  j.splitBar[0].style.borderTopColor = \"transparent\";\n                  j.splitBarButton[0].style.height = parseInt(j._splitBarSize + 1) + \"px\";\n                  j.splitBarButton[0].style.top = \"-1px\";\n                }\n              }\n            }\n          }\n\n          j.splitBar[0].style[t] = x + \"px\";\n        }\n\n        if (j.panel2[0].style[t] != w + m + \"px\") {\n          j.panel2[0].style[t] = w + m + \"px\";\n        }\n      };\n\n      if (e) {\n        var b = Math.max(r, i - m);\n        h[q](0);\n        g[q](b);\n      } else {\n        if (u) {\n          var b = Math.max(l, i - m);\n          g[q](0);\n          h[q](b);\n        } else {\n          if (n.toString().indexOf(\"%\") != -1) {\n            var c = 100 - parseFloat(n);\n            h.css(q, parseFloat(n) + \"%\");\n            c -= p;\n            g.css(q, c + \"%\");\n            var d = g[q]();\n\n            if (d < r) {\n              var b = d - r;\n              var o = b * s;\n              n = parseFloat(n) + parseFloat(o);\n              var c = 100 - parseFloat(n);\n              h.css(q, parseFloat(n) + \"%\");\n              c -= p;\n              g.css(q, c + \"%\");\n            }\n\n            var v = h[q]();\n\n            if (v < l) {\n              var o = l * s;\n              h.css(q, parseFloat(o) + \"%\");\n            }\n          } else {\n            var d = i - n - m;\n\n            if (h[0].style[q] != n + \"px\") {\n              h[q](n);\n            }\n\n            if (g[0].style[q] != d + \"px\") {\n              g[q](d);\n            }\n\n            if (d < r) {\n              n += d - r;\n              g[q](r);\n              h[q](n);\n            }\n\n            if (n < l) {\n              h[q](l);\n            }\n          }\n        }\n      }\n\n      f();\n\n      this._raiseEvent(4, {\n        panels: this.panels\n      });\n    },\n    destroy: function destroy() {\n      this._removeHandlers();\n\n      a.jqx.utilities.resize(this.host, null, true);\n      this.host.remove();\n    },\n    _raiseEvent: function _raiseEvent(d, f) {\n      var e = new a.Event(this._events[d]);\n      e.owner = this;\n      e.args = f;\n      var c = this.orientation == \"vertical\" ? \"width\" : \"height\";\n      var b = new Array();\n      b[0] = {};\n      b[1] = {};\n      b[0].size = this.orientation == \"vertical\" ? this.panel1[0].offsetWidth : this.panel1[0].offsetHeight;\n      b[1].size = this.orientation == \"vertical\" ? this.panel2[0].offsetWidth : this.panel2[0].offsetHeight;\n      b[0].min = this.panels[0].min;\n      b[1].min = this.panels[1].min;\n      b[0].collapsible = this.panels[0].collapsible;\n      b[1].collapsible = this.panels[1].collapsible;\n      b[0].collapsed = this.panels[0].collapsed;\n      b[1].collapsed = this.panels[1].collapsed;\n      e.args.panels = b;\n      return this.host.trigger(e);\n    }\n  });\n})(jqxBaseFramework);","map":null,"metadata":{},"sourceType":"script"}
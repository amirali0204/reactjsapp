{"ast":null,"code":"\"use strict\";\n\nvar __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) {\n        if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n      }\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar React = require(\"react\");\n\nvar __1 = require(\"../../\");\n\nexports.FlowChart = function (props) {\n  var _a = React.useState({\n    width: 0,\n    height: 0\n  }),\n      canvasSize = _a[0],\n      setCanvasSize = _a[1];\n\n  var chart = props.chart,\n      _b = props.callbacks,\n      onDragNode = _b.onDragNode,\n      onDragCanvas = _b.onDragCanvas,\n      onCanvasDrop = _b.onCanvasDrop,\n      onLinkStart = _b.onLinkStart,\n      onLinkMove = _b.onLinkMove,\n      onLinkComplete = _b.onLinkComplete,\n      onLinkCancel = _b.onLinkCancel,\n      onPortPositionChange = _b.onPortPositionChange,\n      onLinkMouseEnter = _b.onLinkMouseEnter,\n      onLinkMouseLeave = _b.onLinkMouseLeave,\n      onLinkClick = _b.onLinkClick,\n      onCanvasClick = _b.onCanvasClick,\n      onDeleteKey = _b.onDeleteKey,\n      onNodeClick = _b.onNodeClick,\n      onNodeSizeChange = _b.onNodeSizeChange,\n      _c = props.Components,\n      _d = _c === void 0 ? {} : _c,\n      _e = _d.CanvasOuter,\n      CanvasOuter = _e === void 0 ? __1.CanvasOuterDefault : _e,\n      _f = _d.CanvasInner,\n      CanvasInner = _f === void 0 ? __1.CanvasInnerDefault : _f,\n      _g = _d.NodeInner,\n      NodeInner = _g === void 0 ? __1.NodeInnerDefault : _g,\n      _h = _d.Ports,\n      Ports = _h === void 0 ? __1.PortsDefault : _h,\n      _j = _d.Port,\n      Port = _j === void 0 ? __1.PortDefault : _j,\n      _k = _d.Node,\n      Node = _k === void 0 ? __1.NodeDefault : _k,\n      _l = _d.Link,\n      Link = _l === void 0 ? __1.LinkDefault : _l,\n      _m = props.config,\n      config = _m === void 0 ? {} : _m;\n\n  var links = chart.links,\n      nodes = chart.nodes,\n      selected = chart.selected,\n      hovered = chart.hovered,\n      offset = chart.offset;\n  var canvasCallbacks = {\n    onDragCanvas: onDragCanvas,\n    onCanvasClick: onCanvasClick,\n    onDeleteKey: onDeleteKey,\n    onCanvasDrop: onCanvasDrop\n  };\n  var linkCallbacks = {\n    onLinkMouseEnter: onLinkMouseEnter,\n    onLinkMouseLeave: onLinkMouseLeave,\n    onLinkClick: onLinkClick\n  };\n  var nodeCallbacks = {\n    onDragNode: onDragNode,\n    onNodeClick: onNodeClick,\n    onNodeSizeChange: onNodeSizeChange\n  };\n  var portCallbacks = {\n    onPortPositionChange: onPortPositionChange,\n    onLinkStart: onLinkStart,\n    onLinkMove: onLinkMove,\n    onLinkComplete: onLinkComplete,\n    onLinkCancel: onLinkCancel\n  };\n  var nodesInView = Object.keys(nodes).filter(function (nodeId) {\n    // TODO: define this in chart?\n    var defaultNodeSize = {\n      width: 500,\n      height: 500\n    };\n    var _a = nodes[nodeId].position,\n        x = _a.x,\n        y = _a.y;\n    var size = nodes[nodeId].size || defaultNodeSize;\n    return x + offset.x + size.width > 0 && x + offset.x < canvasSize.width && y + offset.y + size.height > 0 && y + offset.y < canvasSize.height;\n  });\n  var linksInView = Object.keys(links).filter(function (linkId) {\n    var from = links[linkId].from;\n    var to = links[linkId].to;\n    return !to.nodeId || nodesInView.indexOf(from.nodeId) !== -1 || nodesInView.indexOf(to.nodeId) !== -1;\n  });\n  return React.createElement(__1.CanvasWrapper, __assign({\n    config: config,\n    position: chart.offset,\n    ComponentInner: CanvasInner,\n    ComponentOuter: CanvasOuter,\n    onSizeChange: function onSizeChange(width, height) {\n      return setCanvasSize({\n        width: width,\n        height: height\n      });\n    }\n  }, canvasCallbacks), linksInView.map(function (linkId) {\n    var isSelected = !config.readonly && selected.type === 'link' && selected.id === linkId;\n    var isHovered = !config.readonly && hovered.type === 'link' && hovered.id === linkId;\n    var fromNodeId = links[linkId].from.nodeId;\n    var toNodeId = links[linkId].to.nodeId;\n    return React.createElement(__1.LinkWrapper, __assign({\n      config: config,\n      key: linkId,\n      link: links[linkId],\n      Component: Link,\n      isSelected: isSelected,\n      isHovered: isHovered,\n      fromNode: nodes[fromNodeId],\n      toNode: toNodeId ? nodes[toNodeId] : undefined\n    }, linkCallbacks));\n  }), nodesInView.map(function (nodeId) {\n    var isSelected = selected.type === 'node' && selected.id === nodeId;\n    var selectedLink = getSelectedLinkForNode(selected, nodeId, links);\n    var hoveredLink = getSelectedLinkForNode(hovered, nodeId, links);\n    return React.createElement(__1.NodeWrapper, __assign({\n      config: config,\n      key: nodeId,\n      Component: Node,\n      node: nodes[nodeId],\n      offset: chart.offset,\n      isSelected: isSelected,\n      selected: selectedLink ? selected : undefined,\n      hovered: hoveredLink ? hovered : undefined,\n      selectedLink: selectedLink,\n      hoveredLink: hoveredLink,\n      NodeInner: NodeInner,\n      Ports: Ports,\n      Port: Port\n    }, nodeCallbacks, portCallbacks));\n  }));\n};\n\nvar getSelectedLinkForNode = function getSelectedLinkForNode(selected, nodeId, links) {\n  var link = selected.type === 'link' && selected.id ? links[selected.id] : undefined;\n\n  if (link && (link.from.nodeId === nodeId || link.to.nodeId === nodeId)) {\n    return link;\n  }\n\n  return undefined;\n};","map":null,"metadata":{},"sourceType":"script"}
{"ast":null,"code":"var _jsxFileName = \"/Users/amirali/Documents/github/reactjsapp/deskvantage/src/DVComponents/DVDataGrid.tsx\";\nimport * as React from 'react';\nimport * as ReactDOM from 'react-dom';\nimport JqxGrid, { jqx } from 'jqwidgets-scripts/jqwidgets-react-tsx/jqxgrid';\nimport { griddata } from \"./beverages\";\nimport JqxButton from 'jqwidgets-scripts/jqwidgets-react-tsx/jqxbuttons';\n\nclass DVDataGrid extends React.PureComponent {\n  constructor(props) {\n    const renderstatusbar = statusbar => {\n      const style = {\n        float: 'left',\n        marginLeft: '5px'\n      };\n      const buttonsContainer = React.createElement(\"div\", {\n        style: {\n          overflow: 'hidden',\n          position: 'relative',\n          margin: '5px'\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 11\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        id: 'addButton',\n        style: style,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 12\n        },\n        __self: this\n      }), React.createElement(\"div\", {\n        id: 'deleteButton',\n        style: style,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 13\n        },\n        __self: this\n      }), React.createElement(\"div\", {\n        id: 'reloadButton',\n        style: style,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 14\n        },\n        __self: this\n      }), React.createElement(\"div\", {\n        id: 'searchButton',\n        style: style,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 15\n        },\n        __self: this\n      }));\n      ReactDOM.render(buttonsContainer, statusbar[0]);\n    };\n\n    super(props);\n    const source = {\n      datafields: [{\n        name: 'name',\n        type: 'string'\n      }, {\n        name: 'type',\n        type: 'string'\n      }, {\n        name: 'calories',\n        type: 'int'\n      }, {\n        name: 'totalfat',\n        type: 'string'\n      }, {\n        name: 'protein',\n        type: 'string'\n      }],\n      datatype: 'json',\n      id: 'id',\n      localdata: griddata,\n      sortcolumn: 'name',\n      sortdirection: 'asc'\n    };\n    this.state = {\n      columns: [{\n        text: 'Name',\n        datafield: 'name',\n        width: '20%'\n      }, {\n        text: 'Beverage Type',\n        datafield: 'type',\n        width: '20%'\n      }, {\n        text: 'Calories',\n        datafield: 'calories',\n        width: '20%'\n      }, {\n        text: 'Total Fat',\n        datafield: 'totalfat',\n        width: '20%'\n      }, {\n        text: 'Protein',\n        datafield: 'protein',\n        minwidth: '20%'\n      }],\n      source: new jqx.dataAdapter(source)\n    };\n  }\n\n  componentDidMount() {\n    setTimeout(() => {\n      this.createButtons();\n    });\n  }\n\n  createButtons() {\n    const addButtonClick = event => {};\n\n    const deleteButtonClick = event => {};\n\n    const reloadButtonClick = event => {};\n\n    const searchButtonClick = event => {};\n\n    ReactDOM.render(React.createElement(JqxButton, {\n      onClick: addButtonClick,\n      width: 80,\n      height: 25,\n      value: 'Add',\n      imgSrc: './../images/add.png',\n      imgPosition: 'center',\n      textPosition: 'center',\n      textImageRelation: 'imageBeforeText',\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 65\n      },\n      __self: this\n    }), document.getElementById('addButton'));\n    ReactDOM.render(React.createElement(JqxButton, {\n      onClick: deleteButtonClick,\n      width: 80,\n      height: 25,\n      value: 'Delete',\n      imgSrc: './../images/close.png',\n      imgPosition: 'center',\n      textPosition: 'center',\n      textImageRelation: 'imageBeforeText',\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 71\n      },\n      __self: this\n    }), document.getElementById('deleteButton'));\n    ReactDOM.render(React.createElement(JqxButton, {\n      onClick: reloadButtonClick,\n      width: 80,\n      height: 25,\n      value: 'Reload',\n      imgSrc: './../images/refresh.png',\n      imgPosition: 'center',\n      textPosition: 'center',\n      textImageRelation: 'imageBeforeText',\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 77\n      },\n      __self: this\n    }), document.getElementById('reloadButton'));\n    ReactDOM.render(React.createElement(JqxButton, {\n      onClick: searchButtonClick,\n      width: 80,\n      height: 25,\n      value: 'Find',\n      imgPosition: 'center',\n      textPosition: 'center',\n      textImageRelation: 'imageBeforeText',\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 83\n      },\n      __self: this\n    }), document.getElementById('searchButton'));\n  }\n\n  render() {\n    return React.createElement(JqxGrid, {\n      theme: 'light',\n      sortable: true,\n      altrows: true,\n      showstatusbar: true,\n      renderstatusbar: this.state.renderstatusbar,\n      onSort: this.myGridOnSort,\n      filterable: true,\n      selectionmode: 'checkbox',\n      width: '100%',\n      height: window.innerHeight - 245,\n      source: this.state.source,\n      columns: this.state.columns,\n      columnsresize: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 91\n      },\n      __self: this\n    });\n  }\n\n  myGridOnSort(event) {}\n\n}\n\nexport default DVDataGrid;","map":{"version":3,"sources":["/Users/amirali/Documents/github/reactjsapp/deskvantage/src/DVComponents/DVDataGrid.tsx"],"names":["React","ReactDOM","JqxGrid","jqx","griddata","JqxButton","DVDataGrid","PureComponent","constructor","props","renderstatusbar","statusbar","style","float","marginLeft","buttonsContainer","overflow","position","margin","render","source","datafields","name","type","datatype","id","localdata","sortcolumn","sortdirection","state","columns","text","datafield","width","minwidth","dataAdapter","componentDidMount","setTimeout","createButtons","addButtonClick","event","deleteButtonClick","reloadButtonClick","searchButtonClick","document","getElementById","myGridOnSort","window","innerHeight"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport * as ReactDOM from 'react-dom';\nimport JqxGrid, { IGridProps, jqx } from 'jqwidgets-scripts/jqwidgets-react-tsx/jqxgrid';\nimport {griddata} from \"./beverages\";\nimport JqxButton from 'jqwidgets-scripts/jqwidgets-react-tsx/jqxbuttons';\nclass DVDataGrid extends React.PureComponent<{}, IGridProps> {\n    constructor(props: {}) {\n        const renderstatusbar = (statusbar: any): void => {\n            const style: React.CSSProperties = { float: 'left', marginLeft: '5px' };\n            const buttonsContainer = (\n                <div style={{ overflow: 'hidden', position: 'relative', margin: '5px' }}>\n                    <div id={'addButton'} style={style} />\n                    <div id={'deleteButton'} style={style} />\n                    <div id={'reloadButton'} style={style} />\n                    <div id={'searchButton'} style={style} />\n                </div>\n            );\n            ReactDOM.render(buttonsContainer, statusbar[0]);\n        };\n        super(props);\n        const source: any =\n        {\n            datafields: [\n                { name: 'name', type: 'string' },\n                { name: 'type', type: 'string' },\n                { name: 'calories', type: 'int' },\n                { name: 'totalfat', type: 'string' },\n                { name: 'protein', type: 'string' }\n            ],\n            datatype: 'json',\n            id: 'id',\n            localdata: griddata,\n            sortcolumn: 'name',\n            sortdirection: 'asc'\n        };\n        this.state = {\n            columns: [\n                { text: 'Name', datafield: 'name', width: '20%' },\n                { text: 'Beverage Type', datafield: 'type', width: '20%' },\n                { text: 'Calories', datafield: 'calories', width: '20%' },\n                { text: 'Total Fat', datafield: 'totalfat', width: '20%' },\n                { text: 'Protein', datafield: 'protein', minwidth: '20%' }\n            ],\n            source: new jqx.dataAdapter(source)\n        }\n    }\n    public componentDidMount() {\n        setTimeout(() => {\n            this.createButtons();\n        });      \n    }\n    private createButtons(): void {\n        const addButtonClick = (event?: any) => {\n\n        };\n        const deleteButtonClick = (event?: any) => {\n\n        };\n        const reloadButtonClick = (event?: any) => {\n        };\n        const searchButtonClick = (event?: any) => {\n\n        };\n        ReactDOM.render(\n            <JqxButton onClick={addButtonClick}\n                width={80} height={25} value={'Add'} imgSrc={'./../images/add.png'}\n                imgPosition={'center'} textPosition={'center'} textImageRelation={'imageBeforeText'} />,\n            document.getElementById('addButton')\n        );\n        ReactDOM.render(\n            <JqxButton onClick={deleteButtonClick}\n                width={80} height={25} value={'Delete'} imgSrc={'./../images/close.png'}\n                imgPosition={'center'} textPosition={'center'} textImageRelation={'imageBeforeText'} />,\n            document.getElementById('deleteButton')\n        );\n        ReactDOM.render(\n            <JqxButton onClick={reloadButtonClick}\n                width={80} height={25} value={'Reload'} imgSrc={'./../images/refresh.png'}\n                imgPosition={'center'} textPosition={'center'} textImageRelation={'imageBeforeText'} />,\n            document.getElementById('reloadButton')\n        );\n        ReactDOM.render(\n            <JqxButton onClick={searchButtonClick}\n                width={80} height={25} value={'Find'} \n                imgPosition={'center'} textPosition={'center'} textImageRelation={'imageBeforeText'} />,\n            document.getElementById('searchButton')\n        );\n    }\n    public render() {\n        return (\n            <JqxGrid theme={'light'} sortable={true} altrows={true}  showstatusbar={true}\n            renderstatusbar={this.state.renderstatusbar}\n            onSort={this.myGridOnSort} filterable={true} selectionmode={'checkbox'}\n                width={'100%'} height={window.innerHeight-245} source={this.state.source} columns={this.state.columns} columnsresize={true} />\n        );\n    }\n    private myGridOnSort(event: any): void {\n    }\n\n}\nexport default DVDataGrid;"]},"metadata":{},"sourceType":"module"}